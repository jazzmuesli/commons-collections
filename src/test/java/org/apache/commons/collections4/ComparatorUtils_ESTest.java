/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:52:51 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.ComparatorUtils;
import org.apache.commons.collections4.Transformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComparatorUtils_ESTest extends ComparatorUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<String> comparator0 = ComparatorUtils.naturalComparator();
      String string0 = ComparatorUtils.min("tEeQ+hF'9y-sP", "", comparator0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = ComparatorUtils.transformedComparator((Comparator<String>) null, (Transformer<? super String, ? extends String>) transformer0);
      Comparator<String> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      String string0 = ComparatorUtils.max("WELL", (String) null, comparator1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.naturalComparator();
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator1 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min((Object) boolean0, (Object) comparator0, comparator1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Comparator<Object>[] comparatorArray0 = (Comparator<Object>[]) Array.newInstance(Comparator.class, 9);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      Comparator<Object> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Object>>) linkedList0);
      comparatorArray0[1] = comparator0;
      comparatorArray0[5] = comparatorArray0[1];
      comparatorArray0[8] = comparatorArray0[5];
      // Undeclared exception!
      try { 
        ComparatorUtils.max((Object) boolean0, (Object) boolean0, comparatorArray0[8]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Comparator<Comparator<String>>> linkedList0 = new LinkedList<Comparator<Comparator<String>>>();
      Comparator<Comparator<String>> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Comparator<String>>>) linkedList0);
      Comparator<Comparator<String>> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      Comparator<Comparator<Comparator<String>>> comparator2 = ComparatorUtils.nullLowComparator((Comparator<Comparator<Comparator<String>>>) null);
      // Undeclared exception!
      try { 
        ComparatorUtils.max(comparator1, comparator0, comparator2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.comparators.NullComparator cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Comparator<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Comparator<Comparator<Comparator<String>>>> linkedList0 = new LinkedList<Comparator<Comparator<Comparator<String>>>>();
      linkedList0.add((Comparator<Comparator<Comparator<String>>>) null);
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator((Collection<Comparator<Comparator<Comparator<String>>>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Comparator cannot be null
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }
//
//  @Test(timeout = 4000)
//  public void test08()  throws Throwable  {
//      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
//      Integer integer0 = new Integer(9);
//      linkedList0.offer(integer0);
//      // Undeclared exception!
//      try { 
//        ComparatorUtils.chainedComparator((Collection<Integer>) linkedList0);
//        fail("Expecting exception: ArrayStoreException");
//      
//      } catch(ArrayStoreException e) {
//         //
//         // java.lang.Integer
//         //
//         verifyException("java.util.LinkedList", e);
//      }
//  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Comparable<Boolean>>[] comparatorArray0 = (Comparator<Comparable<Boolean>>[]) Array.newInstance(Comparator.class, 9);
      Comparator<Comparable<Boolean>> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Comparable<Boolean>>) null);
      comparatorArray0[0] = comparator0;
      comparatorArray0[1] = comparator0;
      comparatorArray0[2] = comparatorArray0[1];
      comparatorArray0[3] = comparatorArray0[2];
      comparatorArray0[4] = comparator0;
      comparatorArray0[5] = comparator0;
      comparatorArray0[6] = comparatorArray0[5];
      comparatorArray0[7] = comparatorArray0[6];
      comparatorArray0[8] = comparatorArray0[3];
      Comparator<Comparable<Boolean>> comparator1 = ComparatorUtils.chainedComparator(comparatorArray0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.naturalComparator();
      Boolean boolean0 = Boolean.FALSE;
      Comparator<Boolean> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      Boolean boolean1 = ComparatorUtils.max(boolean0, (Boolean) null, comparator1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = ComparatorUtils.max((Object) "tEeQ+hF'9y-sP", (Object) "tEeQ+hF'9y-sP", (Comparator<Object>) null);
      assertEquals("tEeQ+hF'9y-sP", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.naturalComparator();
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        ComparatorUtils.max(boolean0, (Boolean) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Boolean", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      ClosureUtilsTest.MockTransformer<Object> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Object>();
      Comparator<Object> comparator0 = ComparatorUtils.transformedComparator((Comparator<Object>) null, (Transformer<? super Object, ?>) closureUtilsTest_MockTransformer0);
      Comparator<Object> comparator1 = ComparatorUtils.nullHighComparator(comparator0);
      Object object0 = ComparatorUtils.min((Object) integer0, (Object) null, comparator1);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Comparator<Boolean>> linkedList0 = new LinkedList<Comparator<Boolean>>();
      Comparator<Boolean> comparator0 = ComparatorUtils.chainedComparator((Collection<Comparator<Boolean>>) linkedList0);
      // Undeclared exception!
      try { 
        ComparatorUtils.min(comparator0, comparator0, (Comparator<Comparator<Boolean>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.comparators.ComparatorChain cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<String> comparator0 = ComparatorUtils.naturalComparator();
      // Undeclared exception!
      try { 
        ComparatorUtils.min((String) null, (String) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Comparable<Boolean>> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Comparable<Boolean>>) null);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Boolean>> comparator1 = ComparatorUtils.transformedComparator(comparator0, (Transformer<? super Comparable<Boolean>, ? extends Comparable<Boolean>>) transformer0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Comparator<Comparator<String>>[] comparatorArray0 = (Comparator<Comparator<String>>[]) Array.newInstance(Comparator.class, 4);
      Comparator<Comparator<String>> comparator0 = ComparatorUtils.nullHighComparator(comparatorArray0[2]);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comparator<Comparable<Boolean>>[] comparatorArray0 = (Comparator<Comparable<Boolean>>[]) Array.newInstance(Comparator.class, 9);
      Comparator<Comparable<Boolean>> comparator0 = ComparatorUtils.nullLowComparator((Comparator<Comparable<Boolean>>) null);
      comparatorArray0[0] = comparator0;
      // Undeclared exception!
      try { 
        ComparatorUtils.chainedComparator(comparatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Comparator cannot be null
         //
         verifyException("org.apache.commons.collections4.ComparatorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Boolean> comparator0 = ComparatorUtils.booleanComparator(false);
      Comparator<Boolean> comparator1 = ComparatorUtils.reversedComparator(comparator0);
      assertFalse(comparator1.equals((Object)comparator0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<String> comparator0 = ComparatorUtils.naturalComparator();
      Comparator<String> comparator1 = ComparatorUtils.nullLowComparator(comparator0);
      String string0 = ComparatorUtils.min((String) null, (String) null, comparator1);
      assertNull(string0);
  }
}
