/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:51:24 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.ListValuedMap;
import org.apache.commons.collections4.MultiMapUtils;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.apache.commons.collections4.multimap.HashSetValuedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiMapUtils_ESTest extends MultiMapUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValuedMap<Locale.FilteringMode, String> multiValuedMap0 = MultiMapUtils.emptyMultiValuedMap();
      Transformer<Object, Locale.FilteringMode> transformer0 = (Transformer<Object, Locale.FilteringMode>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      MultiValuedMap<Locale.FilteringMode, String> multiValuedMap1 = MultiMapUtils.transformedMultiValuedMap(multiValuedMap0, (Transformer<? super Locale.FilteringMode, ? extends Locale.FilteringMode>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      assertTrue(multiValuedMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashSetValuedHashMap<Integer, Integer> hashSetValuedHashMap0 = new HashSetValuedHashMap<Integer, Integer>();
      ArrayListValuedHashMap<Integer, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Integer>(hashSetValuedHashMap0);
      Integer integer0 = new Integer((-1));
      arrayListValuedHashMap0.put(integer0, integer0);
      hashSetValuedHashMap0.putAll((MultiValuedMap<? extends Integer, ? extends Integer>) arrayListValuedHashMap0);
      MultiValuedMap<Integer, Integer> multiValuedMap0 = MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ? extends Integer>) hashSetValuedHashMap0);
      assertFalse(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashSetValuedHashMap<Locale.LanguageRange, Object> hashSetValuedHashMap0 = new HashSetValuedHashMap<Locale.LanguageRange, Object>(0, 2932);
      Transformer<Object, Locale.LanguageRange> transformer0 = (Transformer<Object, Locale.LanguageRange>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      MultiValuedMap<Locale.LanguageRange, Object> multiValuedMap0 = MultiMapUtils.transformedMultiValuedMap((MultiValuedMap<Locale.LanguageRange, Object>) hashSetValuedHashMap0, (Transformer<? super Locale.LanguageRange, ? extends Locale.LanguageRange>) transformer0, (Transformer<? super Object, ?>) transformer0);
      assertTrue(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayListValuedHashMap<Object, String> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, String>(0);
      HashMap<Locale.FilteringMode, String> hashMap0 = new HashMap<Locale.FilteringMode, String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      hashMap0.put(locale_FilteringMode0, (String) null);
      arrayListValuedHashMap0.putAll((Map<?, ? extends String>) hashMap0);
      MultiValuedMap<Object, String> multiValuedMap0= 
    		  MultiMapUtils.emptyIfNull((MultiValuedMap<Object, String>) arrayListValuedHashMap0);
      assertFalse(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<?, ? extends Locale.FilteringMode>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MultiValuedMap must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      Bag<TransformedSortedBag<Integer>> bag0 = MultiMapUtils.getValuesAsBag((MultiValuedMap<Object, TransformedSortedBag<Integer>>) null, object0);
      assertNull(bag0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayListValuedHashMap<String, Locale.LanguageRange> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Locale.LanguageRange>(0);
      Set<Locale.LanguageRange> set0 = MultiMapUtils.getValuesAsSet((MultiValuedMap<String, Locale.LanguageRange>) arrayListValuedHashMap0, "uVs1|V**nMdF");
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set<TransformedBag<CollectionSortedBag>> set0 = MultiMapUtils.getValuesAsSet((MultiValuedMap<CollectionBag<LinkedList>, TransformedBag<CollectionSortedBag>>) null, (CollectionBag<LinkedList>) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListValuedMap<Integer, Object> listValuedMap0 = MultiMapUtils.newListValuedHashMap();
      Integer integer0 = new Integer(77);
      Collection<Object> collection0 = MultiMapUtils.getCollection((MultiValuedMap<Integer, Object>) listValuedMap0, integer0);
      assertFalse(collection0.contains(77));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Collection<LinkedHashSet<LinkedHashSet>> collection0 = MultiMapUtils.getCollection((MultiValuedMap<PredicatedBag<Integer>, LinkedHashSet<LinkedHashSet>>) null, (PredicatedBag<Integer>) null);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayListValuedHashMap<Object, String> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, String>();
      Object object0 = new Object();
      arrayListValuedHashMap0.put(object0, "Ca-:rGB9nVP\"Q");
      boolean boolean0 = MultiMapUtils.isEmpty(arrayListValuedHashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValuedMap<String, CollectionBag<TransformedSortedBag>> multiValuedMap0 = MultiMapUtils.emptyMultiValuedMap();
      boolean boolean0 = MultiMapUtils.isEmpty(multiValuedMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = MultiMapUtils.isEmpty((MultiValuedMap<?, ?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValuedMap<HashBag<Predicate>, TransformedSortedBag<Integer>> multiValuedMap0 = MultiMapUtils.emptyIfNull((MultiValuedMap<HashBag<Predicate>, TransformedSortedBag<Integer>>) null);
      assertTrue(multiValuedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MultiMapUtils.transformedMultiValuedMap((MultiValuedMap<String, String>) null, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MultiValuedMap must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayListValuedHashMap<String, Locale.LanguageRange> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Locale.LanguageRange>(0);
      MultiValuedMap<String, Locale.LanguageRange> multiValuedMap0 = MultiMapUtils.unmodifiableMultiValuedMap((MultiValuedMap<? extends String, ? extends Locale.LanguageRange>) arrayListValuedHashMap0);
      assertTrue(multiValuedMap0.isEmpty());
  }
}
