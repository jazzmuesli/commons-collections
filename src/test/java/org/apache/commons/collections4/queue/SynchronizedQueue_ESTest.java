/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:13:47 GMT 2019
 */

package org.apache.commons.collections4.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Queue;
import org.apache.commons.collections4.queue.SynchronizedQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SynchronizedQueue_ESTest extends SynchronizedQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.offerFirst("K%K.PI)_n[L ");
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(arrayDeque0);
      Object object0 = synchronizedQueue0.peek();
      assertEquals("K%K.PI)_n[L ", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue<ArrayDeque<Object>> priorityQueue0 = new PriorityQueue<ArrayDeque<Object>>();
      SynchronizedQueue<ArrayDeque<Object>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<ArrayDeque<Object>>) priorityQueue0);
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>();
      boolean boolean0 = synchronizedQueue0.equals(priorityQueue1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayDeque<LinkedList<Object>> arrayDeque0 = new ArrayDeque<LinkedList<Object>>();
      SynchronizedQueue<LinkedList<Object>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<LinkedList<Object>>) arrayDeque0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      synchronizedQueue0.add(linkedList0);
      LinkedList<Object> linkedList1 = synchronizedQueue0.element();
      assertTrue(arrayDeque0.contains(linkedList1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      SynchronizedQueue<LinkedList<Object>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<LinkedList<Object>>) linkedList0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(synchronizedQueue0);
      synchronizedQueue0.add(linkedList1);
      Object object0 = synchronizedQueue0.poll();
      SynchronizedQueue<String> synchronizedQueue1 = new SynchronizedQueue<String>(arrayDeque0, object0);
      Queue<String> queue0 = synchronizedQueue1.decorated();
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SynchronizedQueue.synchronizedQueue((Queue<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayDeque<LinkedList<Integer>> arrayDeque0 = new ArrayDeque<LinkedList<Integer>>();
      SynchronizedQueue<LinkedList<Integer>> synchronizedQueue0 = new SynchronizedQueue<LinkedList<Integer>>(arrayDeque0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.offer((LinkedList<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      PriorityQueue<PriorityQueue<Integer>> priorityQueue1 = new PriorityQueue<PriorityQueue<Integer>>();
      SynchronizedQueue<PriorityQueue<Integer>> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<PriorityQueue<Integer>>) priorityQueue1);
      priorityQueue1.add(priorityQueue0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.offer(priorityQueue0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.PriorityQueue cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      SynchronizedQueue<String> synchronizedQueue0 = null;
      try {
        synchronizedQueue0 = new SynchronizedQueue<String>(priorityQueue0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Lock must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SynchronizedQueue<ArrayDeque<Object>> synchronizedQueue0 = null;
      try {
        synchronizedQueue0 = new SynchronizedQueue<ArrayDeque<Object>>((Queue<ArrayDeque<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(arrayDeque0, priorityQueue0);
      boolean boolean0 = synchronizedQueue0.equals(synchronizedQueue0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      SynchronizedQueue<String> synchronizedQueue0 = new SynchronizedQueue<String>(arrayDeque0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.element();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(arrayDeque0, priorityQueue0);
      synchronizedQueue0.offer(synchronizedQueue0);
      Object object0 = synchronizedQueue0.remove();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      SynchronizedQueue<String> synchronizedQueue0 = SynchronizedQueue.synchronizedQueue((Queue<String>) priorityQueue0);
      synchronizedQueue0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(arrayDeque0, priorityQueue0);
      // Undeclared exception!
      try { 
        synchronizedQueue0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      SynchronizedQueue<Object> synchronizedQueue0 = new SynchronizedQueue<Object>(arrayDeque0, priorityQueue0);
      Object object0 = synchronizedQueue0.peek();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayDeque<LinkedList<Integer>> arrayDeque0 = new ArrayDeque<LinkedList<Integer>>();
      SynchronizedQueue<LinkedList<Integer>> synchronizedQueue0 = new SynchronizedQueue<LinkedList<Integer>>(arrayDeque0);
      LinkedList<Integer> linkedList0 = synchronizedQueue0.poll();
      assertNull(linkedList0);
  }
}
