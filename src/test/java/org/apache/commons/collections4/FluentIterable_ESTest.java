/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:11:57 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class FluentIterable_ESTest extends FluentIterable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      // Undeclared exception!
      try { 
        FluentIterable.of((Iterable<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) "6;,!b)<-E<");
      assertNotNull(fluentIterable0);
      
      FluentIterable<Object> fluentIterable1 = fluentIterable0.skip(2645L);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable2 = fluentIterable1.transform((Transformer<? super Object, ?>) transformer0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Object> fluentIterable3 = fluentIterable2.limit(0L);
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 9);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6;,!b)<-E<";
      stringArray0[1] = "6;,!b)<-E<";
      stringArray0[2] = "6;,!b)<-E<";
      FluentIterable<String> fluentIterable4 = FluentIterable.of(stringArray0);
      assertNotNull(fluentIterable4);
      assertEquals(3, stringArray0.length);
      
      FluentIterable<String> fluentIterable5 = fluentIterable4.loop();
      assertNotNull(fluentIterable5);
      assertEquals(3, stringArray0.length);
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      
      FluentIterable<String> fluentIterable6 = FluentIterable.of((Iterable<String>) fluentIterable5);
      assertNotNull(fluentIterable6);
      assertEquals(3, stringArray0.length);
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable6.equals((Object)fluentIterable4));
      assertSame(fluentIterable5, fluentIterable6);
      assertSame(fluentIterable6, fluentIterable5);
      
      Predicate<String> predicate0 = (Predicate<String>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(predicate0).evaluate(anyString());
      FluentIterable<String> fluentIterable7 = fluentIterable6.filter(predicate0);
      assertNotNull(fluentIterable7);
      assertEquals(3, stringArray0.length);
      assertFalse(fluentIterable4.equals((Object)fluentIterable6));
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable6.equals((Object)fluentIterable4));
      assertFalse(fluentIterable7.equals((Object)fluentIterable6));
      assertFalse(fluentIterable7.equals((Object)fluentIterable5));
      assertFalse(fluentIterable7.equals((Object)fluentIterable4));
      assertSame(fluentIterable5, fluentIterable6);
      assertSame(fluentIterable6, fluentIterable5);
      
      // Undeclared exception!
      fluentIterable7.eval();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-49));
      assertNotNull(integer0);
      assertEquals((-49), (int)integer0);
      
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) integer0);
      assertNotNull(fluentIterable0);
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(transformer0).transform(any());
      FluentIterable<Object> fluentIterable1 = fluentIterable0.transform((Transformer<? super Object, ?>) transformer0);
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      boolean boolean0 = fluentIterable1.contains(integer0);
      assertFalse(boolean0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Object> fluentIterable2 = fluentIterable1.reverse();
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      
      FluentIterable<Object> fluentIterable3 = FluentIterable.empty();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer((-377));
      assertNotNull(integer0);
      assertEquals((-377), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-377));
      assertNotNull(integer1);
      assertEquals((-377), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      assertNotNull(fluentIterable0);
      assertEquals(2, integerArray0.length);
      
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 6);
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of((Iterable<Integer>) fluentIterable0);
      assertNotNull(fluentIterable1);
      assertEquals(2, integerArray0.length);
      assertSame(fluentIterable0, fluentIterable1);
      assertSame(fluentIterable1, fluentIterable0);
      
      iterableArray0[0] = (Iterable<Integer>) fluentIterable1;
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.loop();
      assertNotNull(fluentIterable2);
      assertEquals(2, integerArray0.length);
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertSame(fluentIterable0, fluentIterable1);
      assertSame(fluentIterable1, fluentIterable0);
      
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.collate(iterableArray0[0], (Comparator<? super Integer>) null);
      assertNotNull(fluentIterable3);
      assertEquals(2, integerArray0.length);
      assertEquals(6, iterableArray0.length);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertSame(fluentIterable0, fluentIterable1);
      assertSame(fluentIterable1, fluentIterable0);
      
      iterableArray0[1] = (Iterable<Integer>) fluentIterable3;
      FluentIterable<Integer> fluentIterable4 = fluentIterable1.collate((Iterable<? extends Integer>) fluentIterable0);
      assertNotNull(fluentIterable4);
      assertEquals(2, integerArray0.length);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertSame(fluentIterable0, fluentIterable1);
      assertSame(fluentIterable1, fluentIterable0);
      
      iterableArray0[2] = (Iterable<Integer>) fluentIterable4;
      iterableArray0[3] = (Iterable<Integer>) fluentIterable0;
      iterableArray0[4] = (Iterable<Integer>) fluentIterable0;
      iterableArray0[5] = (Iterable<Integer>) fluentIterable0;
      FluentIterable<Integer> fluentIterable5 = fluentIterable0.zip(iterableArray0);
      assertNotNull(fluentIterable5);
      assertEquals(2, integerArray0.length);
      assertEquals(6, iterableArray0.length);
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertSame(fluentIterable0, fluentIterable1);
      
      // Undeclared exception!
      try { 
        fluentIterable5.skip((long) integerArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      // Undeclared exception!
      try { 
        fluentIterable0.transform((Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1459));
      assertNotNull(integer0);
      assertEquals((-1459), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1459));
      assertNotNull(integer1);
      assertEquals((-1459), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-1));
      assertNotNull(integer2);
      assertEquals((-1), (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1459));
      assertNotNull(integer3);
      assertEquals((-1459), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertEquals(0, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertNotNull(integer5);
      assertEquals((-1459), (int)integer5);
      assertEquals(8, integerArray0.length);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[1]);
      assertNotNull(integer6);
      assertEquals((-1459), (int)integer6);
      assertEquals(8, integerArray0.length);
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)integer0));
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[1]);
      assertNotNull(integer7);
      assertEquals((-1459), (int)integer7);
      assertEquals(8, integerArray0.length);
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer6));
      
      integerArray0[7] = integer7;
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integerArray0);
      assertNotNull(fluentIterable0);
      assertEquals(8, integerArray0.length);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.append(integerArray0);
      assertNotNull(fluentIterable1);
      assertEquals(8, integerArray0.length);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Integer> fluentIterable2 = fluentIterable0.zip((Iterable<? extends Integer>) fluentIterable1);
      assertNotNull(fluentIterable2);
      assertEquals(8, integerArray0.length);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      // Undeclared exception!
      try { 
        fluentIterable0.anyMatch((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer[] integerArray0 = null;
      // Undeclared exception!
      try { 
        FluentIterable.of((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      // Undeclared exception!
      try { 
        fluentIterable0.get(3132);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 3132
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.unmodifiable();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable2 = fluentIterable1.filter(predicate0);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable3 = fluentIterable2.transform((Transformer<? super String, ? extends String>) transformer0);
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      
      // Undeclared exception!
      try { 
        fluentIterable3.copyInto((Collection<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null
         //
         verifyException("org.apache.commons.collections4.FluentIterable", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = FluentIterable.empty();
      assertNotNull(fluentIterable0);
      
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.eval();
      assertNotNull(fluentIterable1);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.skip(542L);
      assertNotNull(fluentIterable2);
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.reverse();
      assertNotNull(fluentIterable3);
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.loop();
      assertNotNull(fluentIterable4);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<Integer> fluentIterable5 = fluentIterable4.transform((Transformer<? super Integer, ? extends Integer>) transformer0);
      assertNotNull(fluentIterable5);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = fluentIterable5.allMatch(predicate0);
      assertTrue(boolean0);
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) fluentIterable5;
      objectArray0[1] = (Object) fluentIterable1;
      objectArray0[2] = (Object) fluentIterable3;
      objectArray0[3] = (Object) fluentIterable1;
      FluentIterable<Object> fluentIterable6 = FluentIterable.of(objectArray0);
      assertNotNull(fluentIterable6);
      assertEquals(4, objectArray0.length);
      
      FluentIterable<Object> fluentIterable7 = FluentIterable.of((Iterable<Object>) fluentIterable6);
      assertNotNull(fluentIterable7);
      assertEquals(4, objectArray0.length);
      assertSame(fluentIterable6, fluentIterable7);
      assertSame(fluentIterable7, fluentIterable6);
      
      FluentIterable<Object> fluentIterable8 = fluentIterable7.unique();
      assertNotNull(fluentIterable8);
      assertEquals(4, objectArray0.length);
      assertFalse(fluentIterable8.equals((Object)fluentIterable7));
      assertFalse(fluentIterable8.equals((Object)fluentIterable6));
      assertSame(fluentIterable6, fluentIterable7);
      assertSame(fluentIterable7, fluentIterable6);
      
      FluentIterable<Object> fluentIterable9 = fluentIterable8.reverse();
      assertNotNull(fluentIterable9);
      assertEquals(4, objectArray0.length);
      assertFalse(fluentIterable8.equals((Object)fluentIterable7));
      assertFalse(fluentIterable8.equals((Object)fluentIterable6));
      assertFalse(fluentIterable9.equals((Object)fluentIterable8));
      assertFalse(fluentIterable9.equals((Object)fluentIterable7));
      assertFalse(fluentIterable9.equals((Object)fluentIterable6));
      assertFalse(fluentIterable6.equals((Object)fluentIterable8));
      assertFalse(fluentIterable7.equals((Object)fluentIterable8));
      assertSame(fluentIterable6, fluentIterable7);
      assertSame(fluentIterable7, fluentIterable6);
      
      int int0 = fluentIterable8.size();
      assertEquals(3, int0);
      assertEquals(4, objectArray0.length);
      assertFalse(fluentIterable8.equals((Object)fluentIterable9));
      assertFalse(fluentIterable8.equals((Object)fluentIterable7));
      assertFalse(fluentIterable8.equals((Object)fluentIterable6));
      assertFalse(fluentIterable6.equals((Object)fluentIterable8));
      assertFalse(fluentIterable6.equals((Object)fluentIterable9));
      assertFalse(fluentIterable7.equals((Object)fluentIterable9));
      assertFalse(fluentIterable7.equals((Object)fluentIterable8));
      assertSame(fluentIterable6, fluentIterable7);
      assertSame(fluentIterable7, fluentIterable6);
      
      FluentIterable<Object> fluentIterable10 = fluentIterable9.zip((Iterable<?>) fluentIterable5);
      assertNotNull(fluentIterable10);
      assertEquals(4, objectArray0.length);
      assertFalse(fluentIterable8.equals((Object)fluentIterable9));
      assertFalse(fluentIterable8.equals((Object)fluentIterable7));
      assertFalse(fluentIterable8.equals((Object)fluentIterable6));
      assertFalse(fluentIterable0.equals((Object)fluentIterable3));
      assertFalse(fluentIterable0.equals((Object)fluentIterable2));
      assertFalse(fluentIterable0.equals((Object)fluentIterable4));
      assertFalse(fluentIterable0.equals((Object)fluentIterable5));
      assertFalse(fluentIterable0.equals((Object)fluentIterable1));
      assertFalse(fluentIterable9.equals((Object)fluentIterable8));
      assertFalse(fluentIterable9.equals((Object)fluentIterable7));
      assertFalse(fluentIterable9.equals((Object)fluentIterable6));
      assertFalse(fluentIterable1.equals((Object)fluentIterable3));
      assertFalse(fluentIterable1.equals((Object)fluentIterable2));
      assertFalse(fluentIterable1.equals((Object)fluentIterable5));
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      assertFalse(fluentIterable1.equals((Object)fluentIterable4));
      assertFalse(fluentIterable2.equals((Object)fluentIterable3));
      assertFalse(fluentIterable2.equals((Object)fluentIterable5));
      assertFalse(fluentIterable2.equals((Object)fluentIterable1));
      assertFalse(fluentIterable2.equals((Object)fluentIterable0));
      assertFalse(fluentIterable2.equals((Object)fluentIterable4));
      assertFalse(fluentIterable10.equals((Object)fluentIterable6));
      assertFalse(fluentIterable10.equals((Object)fluentIterable9));
      assertFalse(fluentIterable10.equals((Object)fluentIterable7));
      assertFalse(fluentIterable10.equals((Object)fluentIterable8));
      assertFalse(fluentIterable3.equals((Object)fluentIterable0));
      assertFalse(fluentIterable3.equals((Object)fluentIterable2));
      assertFalse(fluentIterable3.equals((Object)fluentIterable5));
      assertFalse(fluentIterable3.equals((Object)fluentIterable1));
      assertFalse(fluentIterable3.equals((Object)fluentIterable4));
      assertFalse(fluentIterable4.equals((Object)fluentIterable2));
      assertFalse(fluentIterable4.equals((Object)fluentIterable3));
      assertFalse(fluentIterable4.equals((Object)fluentIterable5));
      assertFalse(fluentIterable4.equals((Object)fluentIterable0));
      assertFalse(fluentIterable4.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable0));
      assertFalse(fluentIterable5.equals((Object)fluentIterable1));
      assertFalse(fluentIterable5.equals((Object)fluentIterable4));
      assertFalse(fluentIterable5.equals((Object)fluentIterable3));
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
      assertFalse(fluentIterable6.equals((Object)fluentIterable8));
      assertFalse(fluentIterable6.equals((Object)fluentIterable9));
      assertFalse(fluentIterable7.equals((Object)fluentIterable9));
      assertFalse(fluentIterable7.equals((Object)fluentIterable8));
      assertSame(fluentIterable6, fluentIterable7);
      assertSame(fluentIterable7, fluentIterable6);
      
      // Undeclared exception!
      try { 
        fluentIterable9.limit((-1181L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k['2]3Gm";
      stringArray0[1] = "jcrX4M#P_";
      stringArray0[2] = "kBz9";
      stringArray0[3] = "Pj8>I";
      stringArray0[4] = "";
      stringArray0[5] = "7w)p>^~_I4K5{!%";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      assertNotNull(fluentIterable0);
      assertEquals(6, stringArray0.length);
      
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      assertNotNull(fluentIterable1);
      assertEquals(6, stringArray0.length);
      assertFalse(fluentIterable1.equals((Object)fluentIterable0));
      
      long long0 = (-2100L);
      // Undeclared exception!
      try { 
        fluentIterable1.limit((-2100L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FluentIterable<FluentIterable<String>> fluentIterable0 = new FluentIterable<FluentIterable<String>>();
      assertNotNull(fluentIterable0);
      
      FluentIterable<String>[] fluentIterableArray0 = null;
      // Undeclared exception!
      try { 
        fluentIterable0.append((FluentIterable<String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fluentIterable0;
      objectArray0[1] = (Object) fluentIterable0;
      objectArray0[2] = (Object) fluentIterable0;
      objectArray0[3] = (Object) fluentIterable0;
      objectArray0[4] = (Object) fluentIterable0;
      objectArray0[5] = (Object) fluentIterable0;
      FluentIterable<Object> fluentIterable1 = fluentIterable0.append(objectArray0);
      FluentIterable<Object> fluentIterable2 = FluentIterable.of((Iterable<Object>) fluentIterable1);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(transformer0).transform(any());
      fluentIterable2.transform((Transformer<? super Object, ?>) transformer0);
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 3);
      FluentIterable<String> fluentIterable3 = new FluentIterable<String>();
      iterableArray0[0] = (Iterable<String>) fluentIterable3;
      long long0 = (-6119L);
      // Undeclared exception!
      try { 
        fluentIterable3.skip((-6119L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = FluentIterable.empty();
      Class<Integer> class0 = Integer.class;
      fluentIterable0.toArray(class0);
      Integer integer0 = new Integer((-1));
      FluentIterable<Object> fluentIterable1 = FluentIterable.of((Object) integer0);
      FluentIterable<Object> fluentIterable2 = FluentIterable.of((Iterable<Object>) fluentIterable1);
      FluentIterable<Object> fluentIterable3 = fluentIterable2.loop();
      FluentIterable<Object> fluentIterable4 = fluentIterable3.reverse();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable5 = fluentIterable4.transform((Transformer<? super Object, ?>) transformer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable6 = fluentIterable5.collate((Iterable<?>) fluentIterable0, (Comparator<? super Object>) comparator0);
      // Undeclared exception!
      fluentIterable6.size();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      FluentIterable<String> fluentIterable1 = FluentIterable.of("Z_Ptf~^l");
      FluentIterable<String> fluentIterable2 = fluentIterable1.limit(0L);
      FluentIterable<String> fluentIterable3 = fluentIterable2.zip((Iterable<? extends String>) fluentIterable1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable4 = fluentIterable2.collate((Iterable<? extends String>) fluentIterable3, (Comparator<? super String>) comparator0);
      fluentIterable4.toList();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<String> fluentIterable5 = fluentIterable1.collate((Iterable<? extends String>) fluentIterable3, (Comparator<? super String>) comparator1);
      assertFalse(fluentIterable5.equals((Object)fluentIterable2));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.of("");
      FluentIterable<String> fluentIterable1 = fluentIterable0.loop();
      FluentIterable.of((Iterable<String>) fluentIterable0);
      FluentIterable<String> fluentIterable2 = fluentIterable1.reverse();
      FluentIterable<String> fluentIterable3 = FluentIterable.of((Iterable<String>) fluentIterable2);
      FluentIterable<String> fluentIterable4 = fluentIterable1.unmodifiable();
      FluentIterable<String> fluentIterable5 = fluentIterable3.append((Iterable<? extends String>) fluentIterable4);
      FluentIterable<String> fluentIterable6 = fluentIterable5.zip((Iterable<? extends String>) fluentIterable3);
      assertFalse(fluentIterable6.equals((Object)fluentIterable5));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) "");
      FluentIterable<Object> fluentIterable1 = FluentIterable.of((Iterable<Object>) fluentIterable0);
      FluentIterable<Object> fluentIterable2 = fluentIterable1.unmodifiable();
      FluentIterable<Object> fluentIterable3 = fluentIterable2.unique();
      FluentIterable<Object> fluentIterable4 = fluentIterable3.reverse();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).evaluate(any());
      boolean boolean0 = fluentIterable4.anyMatch(predicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8ZmHJq:6zJzxpc~";
      stringArray0[1] = "";
      stringArray0[2] = "(VO]|";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FluentIterable<String> fluentIterable0 = FluentIterable.of(stringArray0);
      Iterable<String>[] iterableArray0 = null;
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      Iterable<Integer>[] iterableArray0 = null;
      // Undeclared exception!
      try { 
        fluentIterable0.zip((Iterable<? extends Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterables must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Integer integer0 = new Integer(0);
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of(integer0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.eval();
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.unmodifiable();
      FluentIterable<Integer> fluentIterable4 = fluentIterable3.reverse();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(predicate0).evaluate(any());
      fluentIterable4.filter(predicate0);
      FluentIterable<Integer> fluentIterable5 = fluentIterable1.skip(0);
      fluentIterable5.toString();
      FluentIterable<Object> fluentIterable6 = FluentIterable.of((Iterable<Object>) fluentIterable0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate1).evaluate(any());
      fluentIterable1.anyMatch(predicate1);
      FluentIterable<Integer> fluentIterable7 = fluentIterable1.zip((Iterable<? extends Integer>) fluentIterable3);
      fluentIterable7.spliterator();
      FluentIterable.of((Iterable<Integer>) fluentIterable7);
      fluentIterable0.spliterator();
      fluentIterable0.isEmpty();
      fluentIterable0.isEmpty();
      // Undeclared exception!
      try { 
        fluentIterable6.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      FluentIterable<Integer> fluentIterable1 = FluentIterable.of((Iterable<Integer>) fluentIterable0);
      FluentIterable<Integer> fluentIterable2 = fluentIterable1.unmodifiable();
      FluentIterable<Integer> fluentIterable3 = fluentIterable2.collate((Iterable<? extends Integer>) fluentIterable0);
      FluentIterable<Object> fluentIterable4 = FluentIterable.of((Object) fluentIterable3);
      int int0 = 2;
      // Undeclared exception!
      try { 
        fluentIterable4.get(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 1
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }
}
