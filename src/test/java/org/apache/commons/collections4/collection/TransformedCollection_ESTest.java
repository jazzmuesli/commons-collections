/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:03:49 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformedCollection_ESTest extends TransformedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) factoryTransformer0);
      Object object0 = transformedCollection0.transform("KW&)?EkZPk5^:zP");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn("K&TJ|6e'4*vR").when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformingCollection((Collection<String>) linkedList0, (Transformer<? super String, ? extends String>) factoryTransformer0);
      String string0 = transformedCollection0.transform("KW&)?EkZPk5^:zP");
      assertEquals("K&TJ|6e'4*vR", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) factoryTransformer0);
      linkedList0.offerFirst(factoryTransformer0);
      boolean boolean0 = transformedCollection0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, TransformedCollection<Integer>> invokerTransformer0 = new InvokerTransformer<Object, TransformedCollection<Integer>>((String) null, classArray0, classArray0);
      // Undeclared exception!
      try { 
        TransformedCollection.transformingCollection((Collection<TransformedCollection<Integer>>) null, (Transformer<? super TransformedCollection<Integer>, ? extends TransformedCollection<Integer>>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offerLast("org.apache.commons.collections4.collection.TransformedCollection");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      // Undeclared exception!
      try { 
        TransformedCollection.transformedCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("'#k/^[-vKNpj@r&w", classArray0, classArray0);
      TransformedCollection<Integer> transformedCollection0 = TransformedCollection.transformedCollection((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
      transformedCollection0.setCollection((Collection<Integer>) null);
      // Undeclared exception!
      try { 
        TransformedCollection.transformedCollection((Collection<Integer>) transformedCollection0, (Transformer<? super Integer, ? extends Integer>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer(512);
      linkedList0.add(integer0);
      TransformedCollection<Integer> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.transform(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformingCollection((Collection<String>) linkedList0, (Transformer<? super String, ? extends String>) factoryTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.transform((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate0).evaluate(any());
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(predicate0, (Transformer<? super Object, ? extends String>) null, (Transformer<? super Object, ? extends String>) null);
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformedCollection((Collection<String>) linkedList0, (Transformer<? super String, ? extends String>) ifTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.transform("Transformer must not be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformedCollection<Integer> transformedCollection0 = TransformedCollection.transformedCollection((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) constantTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Transformer<Object, String>> linkedList0 = new LinkedList<Transformer<Object, String>>();
      Transformer<Object, Transformer<Object, String>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<Transformer<Object, String>> transformedCollection0 = new TransformedCollection<Transformer<Object, String>>(linkedList0, transformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.add((Transformer<Object, String>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      InvokerTransformer<String, String> invokerTransformer0 = new InvokerTransformer<String, String>((String) null, classArray0, classArray0);
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformedCollection((Collection<String>) linkedList0, (Transformer<? super String, ? extends String>) invokerTransformer0);
      // Undeclared exception!
      try { 
        transformedCollection0.add("]*#M*yZ+qNl&7a(oA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedCollection<Integer> transformedCollection0 = null;
      try {
        transformedCollection0 = new TransformedCollection<Integer>((Collection<Integer>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) factoryTransformer0);
      linkedList0.offerFirst(factoryTransformer0);
      Collection<Object> collection0 = transformedCollection0.transform(transformedCollection0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      // Undeclared exception!
      try { 
        TransformedCollection.transformedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, "").when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) factoryTransformer0);
      linkedList0.offerFirst(factoryTransformer0);
      TransformedCollection.transformedCollection((Collection<Object>) transformedCollection0, (Transformer<? super Object, ?>) factoryTransformer0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedCollection<Object> transformedCollection0 = TransformedCollection.transformingCollection((Collection<Object>) linkedList0, (Transformer<? super Object, ?>) factoryTransformer0);
      boolean boolean0 = transformedCollection0.addAll(transformedCollection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(factory0).create();
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(factory0);
      TransformedCollection<String> transformedCollection0 = TransformedCollection.transformingCollection((Collection<String>) linkedList0, (Transformer<? super String, ? extends String>) factoryTransformer0);
      boolean boolean0 = transformedCollection0.add("K&TJ|6e'4*vR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedCollection<Integer> transformedCollection0 = TransformedCollection.transformedCollection((Collection<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(5);
      // Undeclared exception!
      try { 
        transformedCollection0.transform(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Integer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }
}
