/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:46:07 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.collection.IndexedCollection;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IndexedCollection_ESTest extends IndexedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.add((Object) integer0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      IndexedCollection<Boolean, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 4);
      linkedList0.add("Duplicate key in uniquely indexed collection.");
      Transformer<String, Integer> transformer0 = InvokerTransformer.invokerTransformer("Duplicate key in uniquely indexed collection.", (Class<?>[]) classArray0, (Object[]) classArray0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Duplicate key in uniquely indexed collection.' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("k", classArray0, classArray0);
      linkedList0.add((Transformer<Object, Integer>) invokerTransformer0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Transformer<Object, Integer>>) linkedList0, (Transformer<Transformer<Object, Integer>, Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Transformer<Object, Integer>, Integer> hashMap0 = new HashMap<Transformer<Object, Integer>, Integer>();
      Transformer<Transformer<Object, Integer>, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Transformer<Object, Integer>, ? extends Integer>) hashMap0);
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<Transformer<Object, Integer>>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(1909);
      Transformer<String, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      linkedList0.add("");
      linkedList0.add("K");
      // Undeclared exception!
      try { 
        IndexedCollection.uniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Boolean> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.functors.TransformerPredicate");
      IndexedCollection<Boolean, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      IndexedCollection<Closure<Integer>, Integer> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) indexedCollection0, (Transformer<Integer, Closure<Integer>>) null);
      // Undeclared exception!
      try { 
        indexedCollection1.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-945));
      Transformer<String, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      IndexedCollection<Integer, String> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<String>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      linkedList0.add(0, (Object) indexedCollection0);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("ERFVXJwl3L", (Class<?>[]) null, (Object[]) null);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) indexedCollection0, (Transformer<Object, Boolean>) invokerTransformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'ERFVXJwl3L' on 'class org.apache.commons.collections4.collection.IndexedCollection' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, (Transformer<LinkedList<Object>, LinkedList<Boolean>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        IndexedCollection.nonUniqueIndexedCollection((Collection<String>) null, (Transformer<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Transformer<LinkedList<Object>, LinkedList<Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<Integer>, LinkedList<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.offerLast(linkedList1);
      // Undeclared exception!
      try { 
        indexedCollection0.containsAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      IndexedCollection<Closure<Object>, Closure<Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Closure<Object>>) linkedList0, (Transformer<Closure<Object>, Closure<Object>>) null);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Transformer<Closure<Object>, Boolean> transformer0 = MapTransformer.mapTransformer((Map<? super Closure<Object>, ? extends Boolean>) hashMap0);
      IndexedCollection<Boolean, Closure<Object>> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Closure<Object>>) indexedCollection0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection1.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Closure<Integer>> linkedList0 = new LinkedList<Closure<Integer>>();
      Transformer<Closure<Integer>, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<String, Closure<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Closure<Integer>>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.contains(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IndexedCollection<Boolean, Predicate<Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Boolean>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Transformer<LinkedList<Object>, LinkedList<Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<Integer>, LinkedList<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Transformer<LinkedList<Object>, Closure<Object>> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Closure<Object>, LinkedList<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      IndexedCollection<Predicate<Object>, Transformer<Object, Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Transformer<Object, Integer>>) linkedList0, (Transformer<Transformer<Object, Integer>, Predicate<Object>>) null);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll((Collection<? extends Transformer<Object, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, LinkedList<Transformer<Object, Integer>>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<Transformer<Object, Integer>>, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.add((Integer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Predicate<Boolean>> linkedList0 = new LinkedList<Predicate<Boolean>>();
      IndexedCollection<Object, Predicate<Boolean>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Boolean>>) linkedList0, (Transformer<Predicate<Boolean>, Object>) null);
      Predicate<Boolean> predicate0 = EqualPredicate.equalPredicate((Boolean) null);
      // Undeclared exception!
      try { 
        indexedCollection0.add(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<LinkedList<Transformer<Object, Integer>>> linkedList0 = new LinkedList<LinkedList<Transformer<Object, Integer>>>();
      linkedList0.add((LinkedList<Transformer<Object, Integer>>) null);
      Transformer<LinkedList<Transformer<Object, Integer>>, String> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<String, LinkedList<Transformer<Object, Integer>>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Transformer<Object, Integer>>>) linkedList0, transformer0);
      LinkedList<Transformer<Object, Integer>> linkedList1 = new LinkedList<Transformer<Object, Integer>>();
      // Undeclared exception!
      try { 
        indexedCollection0.add(linkedList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      boolean boolean0 = linkedList0.add((Object) integer0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      IndexedCollection<Boolean, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean1 = indexedCollection0.remove(integer0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      IndexedCollection<Predicate<Object>, LinkedList<Integer>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<LinkedList<Integer>>) linkedList0, (Transformer<LinkedList<Integer>, Predicate<Object>>) null);
      Transformer<LinkedList<Integer>, Integer> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Integer, LinkedList<Integer>> indexedCollection1 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Integer>>) indexedCollection0, transformer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(linkedList1);
      indexedCollection1.reindex();
      boolean boolean0 = indexedCollection1.contains(indexedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Transformer<Object, Integer>, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Transformer<Object, Integer>, ? extends Integer>) hashMap0);
      IndexedCollection<Integer, Transformer<Object, Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Object, Integer>>) linkedList0, transformer0);
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 9);
      InvokerTransformer<Object, Integer> invokerTransformer0 = new InvokerTransformer<Object, Integer>("", classArray0, classArray0);
      boolean boolean0 = indexedCollection0.add(invokerTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Transformer<Object, Integer>, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Transformer<Object, Integer>, ? extends Integer>) hashMap0);
      IndexedCollection<Integer, Transformer<Object, Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Transformer<Object, Integer>>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.contains(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Integer integer0 = new Integer(0);
      Transformer<Predicate<Object>, Object> transformer0 = ConstantTransformer.constantTransformer((Object) integer0);
      IndexedCollection<Object, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      linkedList0.add((Predicate<Object>) null);
      HashMap<Predicate<Object>, Transformer<Object, Integer>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, Integer>>();
      Transformer<Predicate<Object>, Integer> transformer1 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Predicate<Object>>, ? extends Transformer<? super Predicate<Object>, ? extends Integer>>) hashMap0);
      IndexedCollection<Integer, Predicate<Object>> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) indexedCollection0, transformer1);
      boolean boolean0 = indexedCollection1.retainAll(indexedCollection0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      IfTransformer<Object, Predicate<Object>> ifTransformer0 = new IfTransformer<Object, Predicate<Object>>((Predicate<? super Object>) null, transformer0, transformer0);
      IndexedCollection<Predicate<Object>, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList1, (Transformer<Object, Predicate<Object>>) ifTransformer0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
      Transformer<Object, String> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      IndexedCollection<String, Object> indexedCollection1 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) indexedCollection0, transformer1);
      boolean boolean0 = indexedCollection1.retainAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1114));
      linkedList0.add(integer0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      Transformer<Integer, Object> transformer0 = FactoryTransformer.factoryTransformer((Factory<?>) constantFactory0);
      IndexedCollection<Object, Integer> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) integer0);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertFalse(linkedList0.contains((-1114)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      IndexedCollection<Closure<Boolean>, LinkedList<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, (Transformer<LinkedList<Object>, Closure<Boolean>>) null);
      java.util.function.Predicate<Object> predicate0 = java.util.function.Predicate.isEqual((Object) indexedCollection0);
      linkedList0.add((LinkedList<Object>) null);
      boolean boolean0 = indexedCollection0.removeIf(predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Transformer<Object, Predicate<Object>>[] transformerArray0 = (Transformer<Object, Predicate<Object>>[]) Array.newInstance(Transformer.class, 2);
      SwitchTransformer<Integer, Predicate<Object>> switchTransformer0 = new SwitchTransformer<Integer, Predicate<Object>>(predicateArray0, transformerArray0, transformerArray0[1]);
      IndexedCollection<Predicate<Object>, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, (Transformer<Integer, Predicate<Object>>) switchTransformer0);
      boolean boolean0 = indexedCollection0.removeIf((java.util.function.Predicate<? super Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      LinkedList<Predicate<Integer>> linkedList0 = new LinkedList<Predicate<Integer>>();
      IndexedCollection<String, Predicate<Integer>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Integer>>) linkedList0, (Transformer<Predicate<Integer>, String>) null);
      boolean boolean0 = indexedCollection0.remove(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<Integer> factory0 = ExceptionFactory.exceptionFactory();
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(factory0);
      IndexedCollection<Integer, Object> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Object>) linkedList0, (Transformer<Object, Integer>) factoryTransformer0);
      Integer integer0 = new Integer(5);
      Object object0 = indexedCollection0.get(integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-1));
      linkedList0.add((Object) integer0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      IndexedCollection<Boolean, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      Object object0 = indexedCollection0.get((Boolean) null);
      assertEquals((-1), object0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IndexedCollection<Predicate<Object>, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Predicate<Object>>) null);
      boolean boolean0 = indexedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2207));
      linkedList0.add(integer0);
      Transformer<Integer, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Predicate<Object>, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      // Undeclared exception!
      try { 
        indexedCollection0.addAll(indexedCollection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Duplicate key in uniquely indexed collection.
         //
         verifyException("org.apache.commons.collections4.collection.IndexedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-2207));
      linkedList0.add(integer0);
      Transformer<Integer, Predicate<Object>> transformer0 = ConstantTransformer.nullTransformer();
      IndexedCollection<Predicate<Object>, Integer> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Integer>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IndexedCollection<Transformer<Object, Integer>, Predicate<Object>> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, (Transformer<Predicate<Object>, Transformer<Object, Integer>>) null);
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Collection<Predicate<Object>> collection0 = indexedCollection0.values(transformer0);
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Predicate<Object>, Integer> transformer0 = InvokerTransformer.invokerTransformer("7 wRV` MrHhf'Us");
      IndexedCollection<Integer, Predicate<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<Predicate<Object>>) linkedList0, transformer0);
      indexedCollection0.clear();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer((Boolean) null);
      IndexedCollection<Boolean, Object> indexedCollection0 = IndexedCollection.uniqueIndexedCollection((Collection<Object>) linkedList0, transformer0);
      boolean boolean0 = indexedCollection0.removeAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Transformer<LinkedList<Object>, LinkedList<Integer>> transformer0 = ExceptionTransformer.exceptionTransformer();
      IndexedCollection<LinkedList<Integer>, LinkedList<Object>> indexedCollection0 = IndexedCollection.nonUniqueIndexedCollection((Collection<LinkedList<Object>>) linkedList0, transformer0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      // Undeclared exception!
      try { 
        indexedCollection0.removeAll(linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }
}
