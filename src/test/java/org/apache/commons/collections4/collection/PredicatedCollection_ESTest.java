/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:02:22 GMT 2019
 */

package org.apache.commons.collections4.collection;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.function.Consumer;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.collection.PredicatedCollection;
import org.apache.commons.collections4.functors.AllPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PredicatedCollection_ESTest extends PredicatedCollection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      linkedList0.listIterator();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection.builder((Predicate<? super Predicate<Object>>) predicate0);
      PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = new PredicatedCollection.Builder<String>(predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      Set<String> set0 = predicatedCollection_Builder1.createPredicatedSet();
      PredicatedCollection<String> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<String>) set0, (Predicate<? super String>) predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder0.addAll(predicatedCollection0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder2.add("4i");
      Collection<String> collection0 = predicatedCollection_Builder3.rejectedElements();
      PredicatedCollection<String> predicatedCollection1 = PredicatedCollection.predicatedCollection(collection0, (Predicate<? super String>) predicate0);
      PredicatedCollection.builder((Predicate<? super String>) predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      predicatedCollection0.add("4i");
      Queue<Object> queue0 = predicatedCollection_Builder4.createPredicatedQueue();
      PredicatedCollection<Object> predicatedCollection2 = PredicatedCollection.predicatedCollection((Collection<Object>) queue0, (Predicate<? super Object>) predicate0);
      predicatedCollection2.validate(queue0);
      predicatedCollection0.add("4i");
      PredicatedCollection.predicatedCollection((Collection<String>) predicatedCollection1, (Predicate<? super String>) predicate0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      PredicatedCollection<Integer> predicatedCollection3 = new PredicatedCollection<Integer>(linkedList1, predicate0);
      PredicatedCollection<Integer> predicatedCollection4 = PredicatedCollection.predicatedCollection((Collection<Integer>) predicatedCollection3, (Predicate<? super Integer>) predicate0);
      Integer integer0 = new Integer((-1094));
      boolean boolean0 = predicatedCollection4.add(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.add("org.apache.commons.collections4.collection.SynchronizedCollection");
      MultiSet<String> multiSet0 = predicatedCollection_Builder1.createPredicatedMultiSet();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[1] = predicate1;
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      predicateArray0[2] = predicate2;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[3] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[4] = (Predicate<Object>) allPredicate1;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection<String> predicatedCollection0 = new PredicatedCollection<String>(multiSet0, predicate3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.addFirst(integer0);
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>((Predicate<? super Integer>[]) null);
      PredicatedCollection<Integer> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Integer>(linkedList0, allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      linkedList0.add(predicate0);
      predicatedCollection_Builder0.addAll(linkedList0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = new PredicatedCollection.Builder<String>(predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder1.add("a]*liWs[:g");
      MultiSet<String> multiSet0 = predicatedCollection_Builder2.createPredicatedMultiSet();
      PredicatedCollection<String> predicatedCollection0 = new PredicatedCollection<String>(multiSet0, predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder2.addAll(predicatedCollection0);
      predicatedCollection_Builder3.createPredicatedBag();
      predicatedCollection_Builder3.createPredicatedQueue();
      PredicatedCollection.notNullBuilder();
      predicatedCollection_Builder1.createPredicatedMultiSet();
      predicatedCollection_Builder3.createPredicatedQueue();
      predicatedCollection_Builder1.createPredicatedSet();
      predicatedCollection_Builder2.createPredicatedMultiSet(multiSet0);
      predicatedCollection_Builder2.add(">e");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      PredicatedCollection<Object> predicatedCollection1 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList1, (Predicate<? super Object>) predicate0);
      PredicatedCollection<Object> predicatedCollection2 = new PredicatedCollection<Object>(predicatedCollection1, predicate0);
      predicatedCollection1.setCollection(predicatedCollection2);
      PredicatedCollection<Object> predicatedCollection3 = null;
      try {
        predicatedCollection3 = new PredicatedCollection<Object>(predicatedCollection2, predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection<Predicate<Object>> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) allPredicate0);
      predicatedCollection0.setCollection(linkedList0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) predicatedCollection0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) predicate1);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedList0);
      Collection<Object> collection0 = predicatedCollection_Builder1.rejectedElements();
      PredicatedCollection<Object> predicatedCollection1 = PredicatedCollection.predicatedCollection(collection0, (Predicate<? super Object>) predicate1);
      // Undeclared exception!
      predicatedCollection1.validate(predicate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      MultiSet<String> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet();
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(multiSet0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder1.add("l!8^rEI");
      // Undeclared exception!
      try { 
        predicatedCollection_Builder2.createPredicatedQueue((Queue<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // queue must not be null
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      String string0 = "' - Predicate '";
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.add("' - Predicate '");
      List<String> list0 = predicatedCollection_Builder1.createPredicatedList();
      predicatedCollection_Builder1.addAll(list0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder3 = predicatedCollection_Builder2.add(integer0);
      predicatedCollection_Builder3.createPredicatedSet();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Object>) predicate1);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicatedCollection_Builder4.createPredicatedList((List<Object>) linkedList1);
      PredicatedCollection.notNullBuilder();
      // Undeclared exception!
      PredicatedCollection.predicatedCollection((Collection<String>) list0, (Predicate<? super String>) allPredicate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      linkedList0.add(predicate0);
      predicatedCollection_Builder0.addAll(linkedList0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = new PredicatedCollection.Builder<String>(predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder1.add("$a]*liWs[:g");
      MultiSet<String> multiSet0 = predicatedCollection_Builder2.createPredicatedMultiSet();
      PredicatedCollection<String> predicatedCollection0 = new PredicatedCollection<String>(multiSet0, predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder2.addAll(predicatedCollection0);
      Bag<String> bag0 = predicatedCollection_Builder3.createPredicatedBag();
      predicatedCollection_Builder3.createPredicatedQueue();
      PredicatedCollection.notNullBuilder();
      predicatedCollection_Builder1.createPredicatedMultiSet();
      predicatedCollection_Builder3.createPredicatedQueue();
      predicatedCollection_Builder1.createPredicatedSet();
      predicatedCollection_Builder2.createPredicatedMultiSet(multiSet0);
      predicatedCollection_Builder1.createPredicatedBag(bag0);
      predicatedCollection_Builder2.add(">e");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      PredicatedCollection<Object> predicatedCollection1 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList1, (Predicate<? super Object>) predicate0);
      PredicatedCollection<Object> predicatedCollection2 = new PredicatedCollection<Object>(predicatedCollection1, predicate0);
      PredicatedCollection<Object> predicatedCollection3 = new PredicatedCollection<Object>(predicatedCollection2, predicate0);
      predicatedCollection3.add(predicatedCollection0);
      predicatedCollection3.addAll(bag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Object>) allPredicate0);
      predicatedCollection_Builder4.add(predicatedCollection_Builder3);
      PredicatedCollection<String> predicatedCollection4 = PredicatedCollection.predicatedCollection((Collection<String>) multiSet0, (Predicate<? super String>) predicate0);
      assertFalse(predicatedCollection4.contains(">e"));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList0, (Predicate<? super Object>) predicate0);
      PredicatedCollection<Object> predicatedCollection1 = new PredicatedCollection<Object>(predicatedCollection0, predicate0);
      predicatedCollection1.remove(predicate0);
      // Undeclared exception!
      predicatedCollection1.add(linkedList0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Integer> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Integer>>) linkedList0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Integer>) predicate0);
      Queue<Integer> queue0 = predicatedCollection_Builder0.createPredicatedQueue();
      PredicatedCollection.notNullBuilder();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate2;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[4] = predicate3;
      Predicate<String> predicate4 = AllPredicate.allPredicate((Predicate<? super String>[]) predicateArray0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = new PredicatedCollection.Builder<String>(predicate4);
      predicatedCollection_Builder1.createPredicatedSet();
      PredicatedCollection<Integer> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Integer>) queue0, (Predicate<? super Integer>) allPredicate1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      predicatedCollection0.validate(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = predicatedCollection_Builder1.addAll((Collection<?>) null);
      Collection<Object> collection0 = predicatedCollection_Builder2.rejectedElements();
      predicatedCollection_Builder2.addAll(collection0);
      AllPredicate.allPredicate((Predicate<? super String>[]) predicateArray0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder0.add("tL`sVS'G>83x");
      predicatedCollection_Builder0.createPredicatedMultiSet();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder4 = new PredicatedCollection.Builder<Integer>(allPredicate0);
      List<String> list0 = predicatedCollection_Builder3.createPredicatedList();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.toArray((Object[]) predicateArray0);
      linkedList0.poll();
      predicatedCollection_Builder2.createPredicatedList((List<Object>) linkedList0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder5 = new PredicatedCollection.Builder<Object>(allPredicate0);
      predicatedCollection_Builder1.createPredicatedBag();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<String>) list0, (Predicate<? super String>) allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection<Object> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList0, (Predicate<? super Object>) predicate0);
      PredicatedCollection<Object> predicatedCollection1 = new PredicatedCollection<Object>(predicatedCollection0, predicate0);
      predicatedCollection1.remove(predicate0);
      // Undeclared exception!
      predicatedCollection1.add(linkedList0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = new PredicatedCollection.Builder<String>(allPredicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = PredicatedCollection.builder((Predicate<? super Object>) allPredicate0);
      predicatedCollection_Builder1.rejectedElements();
      List<String> list0 = predicatedCollection_Builder0.createPredicatedList();
      PredicatedCollection<String> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<String>) list0, (Predicate<? super String>) allPredicate0);
      // Undeclared exception!
      try { 
        predicatedCollection0.validate("Mbp?#U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray1[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray1[1] = predicate1;
      Predicate<Object> predicate2 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray1[2] = predicate2;
      Predicate<Object> predicate3 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[0] = predicate3;
      Predicate<Object> predicate4 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray1);
      predicateArray0[1] = predicate4;
      Predicate<Object> predicate5 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[2] = predicate5;
      Predicate<Object> predicate6 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[3] = predicate6;
      PredicatedCollection<Predicate<Object>> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) predicate5);
      Predicate<Object> predicate7 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) predicatedCollection0);
      predicateArray0[4] = predicate7;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(allPredicate0);
      predicatedCollection_Builder0.createPredicatedMultiSet();
      PredicatedCollection.notNullBuilder();
      LinkedList<Predicate<String>> linkedList1 = new LinkedList<Predicate<String>>();
      PredicatedCollection<Predicate<String>> predicatedCollection1 = PredicatedCollection.predicatedCollection((Collection<Predicate<String>>) linkedList1, (Predicate<? super Predicate<String>>) predicate3);
      Predicate<String>[] predicateArray2 = (Predicate<String>[]) Array.newInstance(Predicate.class, 3);
      Predicate<String> predicate8 = AllPredicate.allPredicate((Collection<? extends Predicate<? super String>>) predicatedCollection1);
      predicateArray2[0] = predicate8;
      AllPredicate<String> allPredicate1 = new AllPredicate<String>(predicateArray0);
      predicateArray2[1] = (Predicate<String>) allPredicate1;
      AllPredicate<String> allPredicate2 = new AllPredicate<String>(predicateArray0);
      predicateArray2[2] = (Predicate<String>) allPredicate2;
      Predicate<String> predicate9 = AllPredicate.allPredicate((Predicate<? super String>[]) predicateArray2);
      boolean boolean0 = predicatedCollection1.add(predicate9);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      String string0 = "' - Predicate '";
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.add("' - Predicate '");
      List<String> list0 = predicatedCollection_Builder1.createPredicatedList();
      predicatedCollection_Builder1.addAll(list0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder3 = predicatedCollection_Builder2.add(integer0);
      predicatedCollection_Builder3.createPredicatedSet();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Object>) predicate1);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      predicatedCollection_Builder4.createPredicatedList((List<Object>) linkedList1);
      PredicatedCollection.notNullBuilder();
      // Undeclared exception!
      PredicatedCollection.predicatedCollection((Collection<String>) list0, (Predicate<? super String>) allPredicate0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Predicate<String>> linkedList0 = new LinkedList<Predicate<String>>();
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Predicate<String>>) linkedList0, (Predicate<? super Predicate<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Collection<Integer> collection0 = predicatedCollection_Builder0.rejectedElements();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(collection0);
      predicatedCollection_Builder1.createPredicatedList();
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      List<String> list0 = predicatedCollection_Builder2.createPredicatedList();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<String> predicate0 = AllPredicate.allPredicate((Predicate<? super String>[]) predicateArray0);
      PredicatedCollection<String> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<String>) list0, (Predicate<? super String>) predicate0);
      PredicatedCollection<String> predicatedCollection1 = new PredicatedCollection<String>(predicatedCollection0, predicate0);
      PredicatedCollection<String> predicatedCollection2 = new PredicatedCollection<String>(predicatedCollection1, predicate0);
      predicatedCollection2.validate("hu");
      PredicatedCollection.notNullBuilder();
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Object>) null, (Predicate<? super Object>) predicate1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = new PredicatedCollection.Builder<Object>(predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = predicatedCollection_Builder1.add((Object) null);
      Set<Object> set0 = predicatedCollection_Builder2.createPredicatedSet();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder3 = predicatedCollection_Builder2.addAll(set0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      predicatedCollection_Builder3.createPredicatedList((List<Object>) linkedList0);
      Queue<Object> queue0 = predicatedCollection_Builder3.createPredicatedQueue((Queue<Object>) linkedList0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder4 = new PredicatedCollection.Builder<Integer>(predicate0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder5 = predicatedCollection_Builder4.addAll((Collection<? extends Integer>) null);
      predicatedCollection_Builder5.add((Integer) null);
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder6 = PredicatedCollection.builder((Predicate<? super Predicate<Object>>) predicate0);
      predicatedCollection_Builder3.rejectedElements();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      predicatedCollection_Builder6.createPredicatedQueue((Queue<Predicate<Object>>) linkedList1);
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(queue0, predicate0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      predicatedCollection_Builder0.createPredicatedList();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = predicatedCollection_Builder1.add((Object) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Queue<Object> queue0 = predicatedCollection_Builder2.createPredicatedQueue((Queue<Object>) linkedList0);
      assertNotNull(queue0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      linkedList0.add(predicate0);
      Predicate<String> predicate1 = AllPredicate.allPredicate((Collection<? extends Predicate<? super String>>) linkedList0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = new PredicatedCollection.Builder<String>(predicate1);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedList1);
      predicatedCollection_Builder1.createPredicatedSet();
      predicatedCollection_Builder1.rejectedElements();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      Set<Object> set0 = predicatedCollection_Builder2.createPredicatedSet();
      PredicatedCollection<Object> predicatedCollection0 = new PredicatedCollection<Object>(set0, predicate0);
      predicatedCollection_Builder2.rejectedElements();
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder3 = new PredicatedCollection.Builder<Predicate<Object>>(predicate0);
      predicatedCollection_Builder3.createPredicatedQueue();
      predicatedCollection_Builder3.add(predicate0);
      PredicatedCollection.Builder<Predicate<String>> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Predicate<String>>) predicate0);
      predicatedCollection_Builder4.createPredicatedBag();
      predicatedCollection_Builder1.createPredicatedBag();
      boolean boolean0 = predicatedCollection0.addAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Integer integer0 = new Integer((-1));
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = predicatedCollection_Builder0.add(integer0);
      Set<Integer> set0 = predicatedCollection_Builder1.createPredicatedSet();
      assertTrue(set0.contains((-1)));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Predicate<String>> linkedList0 = new LinkedList<Predicate<String>>();
      Predicate<String> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super String>>) linkedList0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = new PredicatedCollection.Builder<String>(predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = PredicatedCollection.builder((Predicate<? super String>) predicate0);
      List<String> list0 = predicatedCollection_Builder1.createPredicatedList();
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder0.addAll(list0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder2.add("");
      MultiSet<String> multiSet0 = predicatedCollection_Builder3.createPredicatedMultiSet();
      MultiSet<String> multiSet1 = predicatedCollection_Builder3.createPredicatedMultiSet(multiSet0);
      assertTrue(multiSet1.contains(""));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedCollection<Predicate<Object>> predicatedCollection0 = new PredicatedCollection<Predicate<Object>>(linkedList0, allPredicate0);
      PredicatedCollection<Predicate<Object>> predicatedCollection1 = PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) predicatedCollection0, (Predicate<? super Predicate<Object>>) allPredicate0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) predicatedCollection1);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      predicatedCollection_Builder0.createPredicatedQueue();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      PredicatedCollection<String> predicatedCollection2 = PredicatedCollection.predicatedCollection((Collection<String>) linkedList1, (Predicate<? super String>) allPredicate0);
      PredicatedCollection<String> predicatedCollection3 = new PredicatedCollection<String>(predicatedCollection2, allPredicate0);
      predicatedCollection3.removeAll(linkedList0);
      PredicatedCollection<String> predicatedCollection4 = new PredicatedCollection<String>(predicatedCollection3, allPredicate0);
      PredicatedCollection<String> predicatedCollection5 = PredicatedCollection.predicatedCollection((Collection<String>) predicatedCollection4, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        predicatedCollection5.add("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Integer>) predicate0);
      Collection<Integer> collection0 = predicatedCollection_Builder0.rejectedElements();
      PredicatedCollection<Integer> predicatedCollection0 = new PredicatedCollection<Integer>(collection0, predicate0);
      Integer integer0 = new Integer(2642);
      // Undeclared exception!
      try { 
        predicatedCollection0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) allPredicate0;
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate1;
      AllPredicate<Object> allPredicate2 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) allPredicate2;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray1[0] = (Predicate<Object>) allPredicate1;
      predicateArray1[1] = (Predicate<Object>) allPredicate1;
      predicateArray1[2] = (Predicate<Object>) allPredicate1;
      predicateArray1[3] = (Predicate<Object>) allPredicate0;
      predicateArray1[4] = (Predicate<Object>) allPredicate1;
      AllPredicate<Object> allPredicate3 = new AllPredicate<Object>(predicateArray1);
      predicateArray0[3] = (Predicate<Object>) allPredicate3;
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.builder((Predicate<? super Object>) predicate0);
      PredicatedCollection<String> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<String>((Collection<String>) null, allPredicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedCollection<Integer> predicatedCollection0 = new PredicatedCollection<Integer>(linkedList0, allPredicate0);
      boolean boolean0 = predicatedCollection0.addAll(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection<Integer> predicatedCollection0 = null;
      try {
        predicatedCollection0 = new PredicatedCollection<Integer>((Collection<Integer>) null, allPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super String>) allPredicate0);
      predicatedCollection_Builder0.createPredicatedQueue();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = new PredicatedCollection.Builder<Integer>(allPredicate0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      // Undeclared exception!
      try { 
        predicatedCollection_Builder2.createPredicatedMultiSet((MultiSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MultiSet must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      Bag<String> bag0 = predicatedCollection_Builder0.createPredicatedBag();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicatedCollection.builder((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      MultiSet<String> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet();
      predicatedCollection_Builder0.createPredicatedMultiSet(multiSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      predicatedCollection_Builder0.createPredicatedList((List<String>) linkedList0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = new PredicatedCollection.Builder<Object>(allPredicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = predicatedCollection_Builder1.addAll(linkedList0);
      assertNotNull(predicatedCollection_Builder2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Predicate<Object>>) predicate0);
      assertNotNull(predicatedCollection_Builder0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      predicatedCollection_Builder0.add("org.apache.commons.collections4.bag.SynchronizedSortedBag");
      predicatedCollection_Builder0.createPredicatedMultiSet();
      predicatedCollection_Builder0.rejectedElements();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      List<Integer> list0 = predicatedCollection_Builder1.createPredicatedList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      List<String> list0 = predicatedCollection_Builder0.createPredicatedList();
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(list0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder1.add("<_^l{l1l9x=a");
      assertSame(predicatedCollection_Builder0, predicatedCollection_Builder2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      // Undeclared exception!
      try { 
        predicatedCollection_Builder0.createPredicatedBag((Bag<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Bag must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = null;
      try {
        predicatedCollection_Builder0 = new PredicatedCollection.Builder<String>((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      int int0 = 557;
      Integer integer0 = new Integer(557);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = predicatedCollection_Builder0.add(integer0);
      // Undeclared exception!
      try { 
        predicatedCollection_Builder1.createPredicatedSet((Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PredicatedCollection.notNullBuilder();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PredicatedCollection.notNullBuilder();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate1;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.builder((Predicate<? super String>) allPredicate0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Integer>(allPredicate0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      // Undeclared exception!
      try { 
        predicatedCollection_Builder1.createPredicatedMultiSet((MultiSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MultiSet must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedList0);
      predicatedCollection_Builder1.createPredicatedSet();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      List<String> list0 = predicatedCollection_Builder2.createPredicatedList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      linkedList0.add(predicate0);
      predicatedCollection_Builder0.addAll(linkedList0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder1 = new PredicatedCollection.Builder<String>(predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = predicatedCollection_Builder1.add("a]*liWs[:g");
      MultiSet<String> multiSet0 = predicatedCollection_Builder2.createPredicatedMultiSet();
      PredicatedCollection<String> predicatedCollection0 = new PredicatedCollection<String>(multiSet0, predicate0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder3 = predicatedCollection_Builder2.addAll(predicatedCollection0);
      Bag<String> bag0 = predicatedCollection_Builder3.createPredicatedBag();
      predicatedCollection_Builder3.createPredicatedQueue();
      PredicatedCollection.notNullBuilder();
      predicatedCollection_Builder1.createPredicatedMultiSet();
      predicatedCollection_Builder3.createPredicatedQueue();
      predicatedCollection_Builder1.createPredicatedSet();
      predicatedCollection_Builder2.createPredicatedMultiSet(multiSet0);
      predicatedCollection_Builder2.add(">e");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      PredicatedCollection<Object> predicatedCollection1 = PredicatedCollection.predicatedCollection((Collection<Object>) linkedList1, (Predicate<? super Object>) predicate0);
      PredicatedCollection<Object> predicatedCollection2 = new PredicatedCollection<Object>(predicatedCollection1, predicate0);
      PredicatedCollection<Object> predicatedCollection3 = new PredicatedCollection<Object>(predicatedCollection2, predicate0);
      predicatedCollection3.add(predicatedCollection0);
      predicatedCollection3.addAll(bag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder4 = PredicatedCollection.builder((Predicate<? super Object>) allPredicate0);
      predicatedCollection_Builder4.add(predicatedCollection_Builder3);
      PredicatedCollection<Predicate<Object>> predicatedCollection4 = PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) predicate0);
      predicatedCollection4.validate(predicate0);
      assertTrue(predicatedCollection4.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection<Predicate<Object>> predicatedCollection0 = PredicatedCollection.predicatedCollection((Collection<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) allPredicate0);
      predicatedCollection0.setCollection(linkedList0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) predicatedCollection0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = PredicatedCollection.builder((Predicate<? super Object>) predicate1);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = predicatedCollection_Builder0.addAll(linkedList0);
      Collection<Object> collection0 = predicatedCollection_Builder1.rejectedElements();
      PredicatedCollection<Object> predicatedCollection1 = PredicatedCollection.predicatedCollection(collection0, (Predicate<? super Object>) predicate1);
      predicatedCollection1.validate(predicate0);
      AllPredicate<Object> allPredicate1 = new AllPredicate<Object>(predicateArray0);
      PredicatedCollection.Builder<String> predicatedCollection_Builder2 = PredicatedCollection.builder((Predicate<? super String>) allPredicate1);
      // Undeclared exception!
      try { 
        predicatedCollection_Builder2.createPredicatedList((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<String> predicatedCollection_Builder0 = PredicatedCollection.notNullBuilder();
      MultiSet<String> multiSet0 = predicatedCollection_Builder0.createPredicatedMultiSet();
      predicatedCollection_Builder0.createPredicatedMultiSet(multiSet0);
      PredicatedCollection.notNullBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Integer integer0 = new Integer(187);
      linkedList0.add(integer0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = PredicatedCollection.notNullBuilder();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = PredicatedCollection.notNullBuilder();
      assertNotSame(predicatedCollection_Builder2, predicatedCollection_Builder1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder0 = new PredicatedCollection.Builder<Object>(predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder1 = new PredicatedCollection.Builder<Object>(predicate0);
      PredicatedCollection.Builder<Object> predicatedCollection_Builder2 = predicatedCollection_Builder1.add((Object) null);
      Set<Object> set0 = predicatedCollection_Builder2.createPredicatedSet();
      PredicatedCollection.Builder<Object> predicatedCollection_Builder3 = predicatedCollection_Builder2.addAll(set0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder4 = new PredicatedCollection.Builder<Integer>(predicate0);
      PredicatedCollection.Builder<Integer> predicatedCollection_Builder5 = predicatedCollection_Builder4.addAll((Collection<? extends Integer>) null);
      predicatedCollection_Builder5.add((Integer) null);
      PredicatedCollection.Builder<Predicate<Object>> predicatedCollection_Builder6 = PredicatedCollection.builder((Predicate<? super Predicate<Object>>) predicate0);
      predicatedCollection_Builder3.rejectedElements();
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Queue<Predicate<Object>> queue0 = predicatedCollection_Builder6.createPredicatedQueue((Queue<Predicate<Object>>) linkedList0);
      assertFalse(queue0.contains(predicate0));
  }
}
