/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:53:59 GMT 2019
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.set.MapBackedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MapBackedSet_ESTest extends MapBackedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      // Undeclared exception!
      try { 
        mapBackedSet0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      hashMap0.computeIfAbsent(object0, unaryOperator0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      mapBackedSet0.add(hashMap0);
      MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      mapBackedSet1.contains(mapBackedSet0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MapBackedSet<Object, LinkedList<Object>> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Object, ? super LinkedList<Object>>) hashMap0, linkedList0);
      // Undeclared exception!
      try { 
        mapBackedSet2.add(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      Object object1 = new Object();
      hashMap0.put((Object) null, object1);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0, (Object) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Object object2 = new Object();
      MapBackedSet<Integer, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap1, object2);
      mapBackedSet0.retainAll(mapBackedSet1);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      String string0 = "";
      MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap2, (Object) "");
      mapBackedSet0.add(hashMap0);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Integer> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap3);
      Object object3 = new Object();
      mapBackedSet2.equals(object3);
      mapBackedSet2.remove("");
      HashMap<Integer, Object> hashMap4 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap4);
      mapBackedSet3.addAll(mapBackedSet2);
      String string1 = null;
      MapBackedSet<Object, String> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0, (String) null);
      // Undeclared exception!
      try { 
        mapBackedSet4.retainAll(mapBackedSet3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, object0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashMap0.put((String) null, object0);
      hashMap0.put((String) null, (Object) null);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function.identity();
      function2.andThen((Function<? super Integer, ?>) unaryOperator0);
      hashMap0.computeIfAbsent("", function2);
      mapBackedSet0.contains((Object) null);
      MapBackedSet<String, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0, (Integer) null);
      mapBackedSet1.addAll(mapBackedSet0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap1, (Object) "");
      mapBackedSet2.add((Integer) null);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      MapBackedSet<Object, String> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap2, "kGp<Q1Ha7a+'nmY|b!");
      mapBackedSet3.add(hashMap0);
      mapBackedSet3.size();
      MapBackedSet<Object, Object> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap2);
      mapBackedSet4.retainAll(mapBackedSet2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mapBackedSet0.forEach(consumer0);
      Object object1 = new Object();
      hashMap0.put(object1, object1);
      Set<Object> set0 = hashMap0.keySet();
      MapBackedSet<Object, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0, "E|Xq+;?wKg0]t;<K'");
      mapBackedSet1.parallelStream();
      mapBackedSet1.add(set0);
      // Undeclared exception!
      try { 
        mapBackedSet0.removeAll(mapBackedSet1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      mapBackedSet0.containsAll(linkedList0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) hashMap0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mapBackedSet0;
      objectArray0[3] = (Object) hashMap1;
      objectArray0[4] = (Object) hashMap0;
      objectArray0[5] = (Object) mapBackedSet0;
      mapBackedSet1.toArray(objectArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      Integer integer0 = new Integer(608);
      hashMap0.put("`w7Z", integer0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      mapBackedSet0.removeAll(linkedList0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet1.containsAll(mapBackedSet0);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap2, "`w7Z");
      mapBackedSet2.containsAll(mapBackedSet1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(object0, biFunction0);
      String string0 = "z#tp?s]3%-$'BR'm^";
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0, (Object) "z#tp?s]3%-$'BR'm^");
      // Undeclared exception!
      try { 
        mapBackedSet0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("k+f5\"4?wQ`!oS6XvB+r", "k+f5\"4?wQ`!oS6XvB+r");
      Integer integer0 = new Integer(1);
      MapBackedSet<Object, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0, integer0);
      MapBackedSet<Object, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      mapBackedSet0.removeAll(mapBackedSet1);
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<String, ? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      mapBackedSet0.removeIf(predicate3);
      Object object1 = new Object();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0, object1);
      mapBackedSet0.retainAll(mapBackedSet1);
      mapBackedSet0.hashCode();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      MapBackedSet<Object, String> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1);
      // Undeclared exception!
      try { 
        mapBackedSet2.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0);
      Integer integer0 = new Integer(1899);
      Predicate<String> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.or(predicate0);
      Predicate.isEqual((Object) mapBackedSet0);
      Predicate<String> predicate3 = predicate2.and(predicate1);
      predicate3.and(predicate0);
      mapBackedSet0.removeIf(predicate3);
      mapBackedSet0.clear();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w%!)?PPR`3RF$0^A";
      stringArray0[1] = "TC`Dox?4F%0d%QT_KE";
      stringArray0[2] = "CHgR~H";
      stringArray0[3] = "Hb+FAp<";
      stringArray0[4] = "Kse$r";
      Object object0 = new Object();
      hashMap1.put(object0, "w%!)?PPR`3RF$0^A");
      stringArray0[5] = "";
      stringArray0[6] = "7sFC;7";
      stringArray0[7] = "org.apache.commons.collections4.set.MapBackedSet";
      // Undeclared exception!
      try { 
        mapBackedSet1.toArray(stringArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Object
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      MapBackedSet<String, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap1);
      mapBackedSet1.equals(mapBackedSet0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap2);
      mapBackedSet2.remove(mapBackedSet1);
      Object object0 = new Object();
      mapBackedSet0.add(object0);
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      MapBackedSet<Integer, String> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap3);
      mapBackedSet3.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("", "");
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      mapBackedSet0.toArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.put("", (Object) null);
      mapBackedSet0.removeAll(linkedList0);
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      mapBackedSet1.addAll(mapBackedSet0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, (Object) "");
      mapBackedSet2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      mapBackedSet0.add("");
      mapBackedSet0.remove("");
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "");
      Spliterator<Object> spliterator0 = mapBackedSet0.spliterator();
      mapBackedSet1.isEmpty();
      mapBackedSet0.remove("");
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap0.put("", hashMap1);
      hashMap2.put("", spliterator0);
      MapBackedSet<String, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap2, (Object) hashMap1);
      mapBackedSet2.spliterator();
      mapBackedSet2.retainAll(mapBackedSet1);
      mapBackedSet1.removeAll(mapBackedSet0);
      MapBackedSet<String, String> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap2);
      Object[] objectArray0 = mapBackedSet3.toArray();
      MapBackedSet<String, Integer> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap2);
      mapBackedSet4.toArray(objectArray0);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      hashMap3.getOrDefault("N", mapBackedSet1);
      MapBackedSet<Integer, Object> mapBackedSet5 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap3);
      Integer integer0 = new Integer(0);
      mapBackedSet5.add(integer0);
      mapBackedSet0.retainAll(mapBackedSet2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = "";
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mapBackedSet0.forEach(consumer0);
      MapBackedSet<Object, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet1.removeAll(mapBackedSet0);
      mapBackedSet0.retainAll(mapBackedSet1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.remove((Object) mapBackedSet1);
      MapBackedSet<String, String> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap1);
      // Undeclared exception!
      try { 
        mapBackedSet2.removeIf((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put("", object0);
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, object0);
      hashMap0.put("I7=`em", object0);
      mapBackedSet0.remove("");
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      mapBackedSet1.toArray();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap1, "I7=`em");
      Object object1 = new Object();
      mapBackedSet2.equals(object1);
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("$%w~<KN+Do6bA^n!ox", "org.apache.commons.collections4.set.MapBackedSet");
      hashMap0.put(";y+y{yy", "$%w~<KN+Do6bA^n!ox");
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "$%w~<KN+Do6bA^n!ox");
      mapBackedSet0.add("$%w~<KN+Do6bA^n!ox");
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet1.add(hashMap1);
      mapBackedSet1.equals("$%w~<KN+Do6bA^n!ox");
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap2, (Object) "$%w~<KN+Do6bA^n!ox");
      Integer integer0 = new Integer(1);
      mapBackedSet2.add(integer0);
      mapBackedSet0.hashCode();
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap3);
      mapBackedSet3.isEmpty();
      mapBackedSet0.add((String) null);
      HashMap<Object, Object> hashMap4 = new HashMap<Object, Object>();
      MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap4, ">rt]q=@4)828,!S)");
      MapBackedSet<Object, Integer> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1, integer0);
      mapBackedSet4.iterator();
      MapBackedSet<Integer, String> mapBackedSet5 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap2);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      mapBackedSet5.removeIf(predicate3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      hashMap0.put(integer0, object0);
      MapBackedSet<Integer, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0, (Object) hashMap0);
      mapBackedSet0.size();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      mapBackedSet1.stream();
      mapBackedSet1.isEmpty();
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer(int0);
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      Integer integer2 = new Integer(2532);
      integerArray0[6] = integer2;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      mapBackedSet0.toArray(integerArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      MapBackedSet<Integer, Integer> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super Integer>) hashMap0, integer0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      predicate0.test(hashMap0);
      mapBackedSet0.removeIf(predicate0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Object object1 = new Object();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, object1);
      mapBackedSet1.contains(predicate0);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      MapBackedSet<String, Integer> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap2, integer0);
      mapBackedSet2.iterator();
      mapBackedSet1.hashCode();
      MapBackedSet<Object, String> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "");
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        mapBackedSet3.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      mapBackedSet0.add("");
      hashMap0.entrySet();
      hashMap0.put((Object) null, "");
      Object object0 = new Object();
      mapBackedSet0.equals(object0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap1, integer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      mapBackedSet0.removeIf(predicate3);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap2, "K%6xkc/$Qsg6^I^E");
      mapBackedSet1.clear();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      Object object1 = new Object();
      hashMap0.put(object0, object1);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      mapBackedSet0.retainAll(mapBackedSet1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0);
      Object object0 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual(object0);
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      mapBackedSet0.removeIf(predicate2);
      MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap0);
      mapBackedSet0.equals(predicate0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1, (Object) predicate2);
      mapBackedSet1.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Integer integer0 = new Integer(3028);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      mapBackedSet0.removeIf(predicate2);
      mapBackedSet0.iterator();
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<String, ? super Object>) null, (Object) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, object0);
      mapBackedSet0.isEmpty();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap1.replace(integer0, (Object) hashMap0, (Object) integer0);
      MapBackedSet<Integer, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap1, "");
      mapBackedSet1.isEmpty();
      Integer integer1 = new Integer(0);
      MapBackedSet<String, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, (Object) integer1);
      mapBackedSet2.parallelStream();
      mapBackedSet0.addAll(mapBackedSet2);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator0.compose((Function<? super Object, ?>) function0);
      hashMap1.computeIfAbsent(integer0, function1);
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<Object, ? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      mapBackedSet0.size();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "iY5p0e~0pyRt4y4_p(G");
      mapBackedSet0.contains(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet1.contains(mapBackedSet0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      mapBackedSet0.removeIf(predicate1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Integer integer0 = new Integer((-1096));
      mapBackedSet0.contains(integer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      MapBackedSet<Integer, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap0);
      // Undeclared exception!
      try { 
        mapBackedSet0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) mapBackedSet0);
      mapBackedSet0.removeIf(predicate0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = new Object();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0, object0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      mapBackedSet0.removeAll(mapBackedSet1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0, "");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("", "");
      MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap1, "");
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap2.put("", object0);
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap2);
      mapBackedSet0.iterator();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        mapBackedSet0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap1);
      mapBackedSet0.removeAll(mapBackedSet1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-2495));
      hashMap0.put(integer0, linkedList0);
      MapBackedSet<Integer, LinkedList<String>> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Integer, ? super LinkedList<String>>) hashMap0, linkedList0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet1.containsAll(mapBackedSet0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.getOrDefault((Object) null, integer0);
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      mapBackedSet0.clear();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      hashMap0.put(object0, (Object) null);
      hashMap0.forEach(biConsumer0);
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      Integer integer0 = new Integer((-1));
      mapBackedSet0.parallelStream();
      boolean boolean0 = mapBackedSet0.remove(integer0);
      hashMap0.put(mapBackedSet0, mapBackedSet0);
      mapBackedSet0.iterator();
      MapBackedSet<Object, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap0);
      mapBackedSet1.retainAll(mapBackedSet0);
      mapBackedSet1.stream();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.entrySet();
      MapBackedSet<String, Integer> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap1, integer0);
      mapBackedSet2.clear();
      MapBackedSet<Object, String> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      boolean boolean1 = mapBackedSet3.add("acQ]:MJgH\"c:bGu");
      boolean boolean2 = mapBackedSet3.containsAll(mapBackedSet2);
      assertTrue(mapBackedSet2.isEmpty());
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = mapBackedSet0.isEmpty();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap0);
      boolean boolean0 = mapBackedSet0.add(hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean1 = mapBackedSet0.containsAll(linkedList0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("$%w~<KN+Do6bA^n!ox", "org.apache.commons.collections4.set.MapBackedSet");
      hashMap0.put(";y+y{yy", "$%w~<KN+Do6bA^n!ox");
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "$%w~<KN+Do6bA^n!ox");
      mapBackedSet0.add("$%w~<KN+Do6bA^n!ox");
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet1.add(hashMap1);
      mapBackedSet1.equals("$%w~<KN+Do6bA^n!ox");
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap2, (Object) "$%w~<KN+Do6bA^n!ox");
      Integer integer0 = new Integer(1);
      mapBackedSet2.add(integer0);
      mapBackedSet0.hashCode();
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap3);
      mapBackedSet3.isEmpty();
      mapBackedSet0.add((String) null);
      HashMap<Object, Object> hashMap4 = new HashMap<Object, Object>();
      MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap4, ">rt]q=@4)828,!S)");
      MapBackedSet<Object, Integer> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1, integer0);
      mapBackedSet4.iterator();
      MapBackedSet<Integer, String> mapBackedSet5 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap2);
      assertFalse(mapBackedSet5.isEmpty());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      mapBackedSet5.removeIf(predicate4);
      assertTrue(mapBackedSet5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, (Object) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      mapBackedSet0.retainAll(mapBackedSet1);
      MapBackedSet<Object, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      Object object0 = new Object();
      hashMap0.put((String) null, object0);
      mapBackedSet2.addAll(mapBackedSet0);
      mapBackedSet2.addAll(mapBackedSet1);
      mapBackedSet0.containsAll(mapBackedSet2);
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        MapBackedSet.mapBackedSet((Map<String, ? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The map must not be null
         //
         verifyException("org.apache.commons.collections4.set.MapBackedSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      MapBackedSet<Object, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1));
      MapBackedSet<Object, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1, integer0);
      mapBackedSet0.removeAll(mapBackedSet1);
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      MapBackedSet<String, Integer> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap2);
      Integer integer1 = new Integer((-1));
      hashMap2.put("jC5XGM3p/\"|?e", integer1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      mapBackedSet2.addAll(linkedList0);
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap3);
      assertTrue(mapBackedSet3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      mapBackedSet0.toArray();
      Integer integer0 = new Integer((-1));
      MapBackedSet<String, Integer> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0, integer0);
      mapBackedSet1.hashCode();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      MapBackedSet<Integer, String> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap1, "}zCpD}");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mapBackedSet2.forEach(consumer0);
      mapBackedSet2.clear();
      boolean boolean0 = mapBackedSet1.remove(mapBackedSet0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      MapBackedSet<Object, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap2);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) mapBackedSet3;
      Object object0 = new Object();
      mapBackedSet1.spliterator();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) mapBackedSet1;
      objectArray0[3] = (Object) hashMap0;
      objectArray0[4] = (Object) mapBackedSet0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      mapBackedSet3.toArray(objectArray0);
      MapBackedSet<Object, Integer> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap2, integer0);
      mapBackedSet4.isEmpty();
      Object object2 = new Object();
      MapBackedSet<String, Object> mapBackedSet5 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0, object2);
      boolean boolean1 = mapBackedSet5.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MapBackedSet<String, String> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.put((Object) null, (Object) null);
      MapBackedSet<Object, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<Object, ? super String>) hashMap1, "0c^");
      mapBackedSet1.contains(hashMap1);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(934);
      hashMap2.put(integer0, "0c^");
      MapBackedSet<Integer, Object> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<Integer, ? super Object>) hashMap2, (Object) hashMap0);
      boolean boolean0 = mapBackedSet2.isEmpty();
      assertFalse(boolean0);
      
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet3 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap3);
      mapBackedSet3.spliterator();
      mapBackedSet2.clear();
      mapBackedSet3.hashCode();
      Integer integer1 = new Integer(2452);
      mapBackedSet2.add(integer1);
      MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap3);
      MapBackedSet<Integer, String> mapBackedSet4 = MapBackedSet.mapBackedSet((Map<Integer, ? super String>) hashMap2, "S)kFtiMxw(Tuz0:{l(Z");
      mapBackedSet4.iterator();
      MapBackedSet<String, Integer> mapBackedSet5 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap3);
      mapBackedSet5.equals("S)kFtiMxw(Tuz0:{l(Z");
      MapBackedSet<Object, Object> mapBackedSet6 = MapBackedSet.mapBackedSet((Map<Object, ? super Object>) hashMap1);
      mapBackedSet6.add("S)kFtiMxw(Tuz0:{l(Z");
      MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "[rmP}K'XP&>kbS=6");
      mapBackedSet6.clear();
      mapBackedSet0.removeAll(mapBackedSet2);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      mapBackedSet6.removeIf(predicate0);
      assertTrue(mapBackedSet6.isEmpty());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      MapBackedSet<Object, LinkedList<Object>> mapBackedSet7 = MapBackedSet.mapBackedSet((Map<Object, ? super LinkedList<Object>>) hashMap1, linkedList0);
      boolean boolean1 = mapBackedSet7.isEmpty();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapBackedSet<String, Object> mapBackedSet0 = MapBackedSet.mapBackedSet((Map<String, ? super Object>) hashMap0);
      MapBackedSet<String, String> mapBackedSet1 = MapBackedSet.mapBackedSet((Map<String, ? super String>) hashMap0, "nb]");
      LinkedList<String> linkedList0 = new LinkedList<String>(mapBackedSet1);
      mapBackedSet1.parallelStream();
      linkedList0.retainAll(mapBackedSet0);
      linkedList0.pollFirst();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(1478);
      MapBackedSet.mapBackedSet((Map<Object, ? super Integer>) hashMap1, integer0);
      boolean boolean0 = mapBackedSet0.addAll(linkedList0);
      mapBackedSet1.addAll(mapBackedSet0);
      MapBackedSet<String, Integer> mapBackedSet2 = MapBackedSet.mapBackedSet((Map<String, ? super Integer>) hashMap0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean1 = mapBackedSet2.containsAll(linkedList1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }
}
