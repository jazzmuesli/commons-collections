/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:08:41 GMT 2019
 */

package org.apache.commons.collections4.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.set.TransformedSortedSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TransformedSortedSet_ESTest extends TransformedSortedSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      SortedSet<Integer> sortedSet0 = transformedSortedSet0.getSortedSet();
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Integer integer0 = new Integer(3422);
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      SortedSet<Integer> sortedSet0 = transformedSortedSet0.tailSet(integer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer(967);
      SortedSet<Integer> sortedSet0 = transformedSortedSet0.subSet(integer0, integer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer((-3345));
      treeSet0.add(integer0);
      Integer integer1 = transformedSortedSet0.last();
      assertEquals((-3345), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<String, String> transformer0 = CloneTransformer.cloneTransformer();
      treeSet0.add("");
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedSortedSet0.first();
      assertTrue(transformedSortedSet0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      Transformer<Integer, Integer> transformer0 = CloneTransformer.cloneTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      Comparator<? super Integer> comparator1 = transformedSortedSet0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      InvokerTransformer<Object, Predicate<Object>> invokerTransformer0 = new InvokerTransformer<Object, Predicate<Object>>("", classArray0, classArray0);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformingSortedSet((SortedSet<Predicate<Object>>) null, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) invokerTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("l}x");
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Transformer<Boolean, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Boolean>) predicate0);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<Boolean>) null, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Predicate<Object>> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Predicate<Object>>) treeSet0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.tailSet((Predicate<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SortedSet<String> sortedSet0 = treeSet0.headSet("");
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet(sortedSet0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.tailSet("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromKey out of range
         //
         verifyException("java.util.TreeMap$AscendingSubMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<Object> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Object>) treeSet0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.subSet(treeSet0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.TreeSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>((String) null);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) constantFactory0);
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.headSet((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      TreeSet<Object> treeSet1 = new TreeSet<Object>();
      TransformedSortedSet<Object> transformedSortedSet1 = TransformedSortedSet.transformedSortedSet((SortedSet<Object>) treeSet1, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet1.headSet(transformedSortedSet0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.set.TransformedSortedSet cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      TransformedSortedSet<Predicate<Object>> transformedSortedSet0 = null;
      try {
        transformedSortedSet0 = new TransformedSortedSet<Predicate<Object>>(treeSet0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<String, String> transformer0 = CloneTransformer.cloneTransformer();
      treeSet0.add("");
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      TransformedSortedSet<String> transformedSortedSet1 = TransformedSortedSet.transformedSortedSet((SortedSet<String>) transformedSortedSet0, (Transformer<? super String, ? extends String>) transformer0);
      assertTrue(transformedSortedSet1.contains(""));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      Integer integer0 = new Integer((-3345));
      treeSet0.add(integer0);
      // Undeclared exception!
      try { 
        TransformedSortedSet.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeSet<Boolean> treeSet0 = new TreeSet<Boolean>();
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      TransformedSortedSet<Boolean> transformedSortedSet0 = new TransformedSortedSet<Boolean>(treeSet0, transformer0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(nullIsExceptionPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(nullIsExceptionPredicate0);
      SortedSet<Boolean> sortedSet0 = transformedSortedSet0.headSet(boolean0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.subSet((Integer) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Predicate<Object>> transformedSortedSet0 = TransformedSortedSet.transformedSortedSet((SortedSet<Predicate<Object>>) treeSet0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      Comparator<? super Predicate<Object>> comparator0 = transformedSortedSet0.comparator();
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeSet<Closure<Object>> treeSet0 = new TreeSet<Closure<Object>>();
      Transformer<Object, Closure<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Closure<Object>> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<Closure<Object>>) treeSet0, (Transformer<? super Closure<Object>, ? extends Closure<Object>>) transformer0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.tailSet(transformerClosure0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.TransformerClosure cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedSortedSet<Integer> transformedSortedSet0 = new TransformedSortedSet<Integer>(treeSet0, transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.last();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Transformer<String, String> transformer0 = CloneTransformer.cloneTransformer();
      TransformedSortedSet<String> transformedSortedSet0 = TransformedSortedSet.transformingSortedSet((SortedSet<String>) treeSet0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedSortedSet0.first();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }
}
