/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:21:58 GMT 2019
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class HashMultiSet_ESTest extends HashMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>(linkedList0);
      hashMultiSet0.setCount("3T;:VDU@jhM@eP@", 3963);
      HashMultiSet<String> hashMultiSet1 = new HashMultiSet<String>(hashMultiSet0);
      HashMultiSet<String> hashMultiSet2 = new HashMultiSet<String>(hashMultiSet0);
      assertTrue(hashMultiSet2.contains("3T;:VDU@jhM@eP@"));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = null;
      try {
        hashMultiSet0 = new HashMultiSet<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>(linkedList0);
      OutputStream outputStream0 = mock(OutputStream.class, new ViolatedAssumptionAnswer());
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(outputStream0);
      objectOutputStream0.writeObject(hashMultiSet0);
      assertTrue(hashMultiSet0.isEmpty());
  }
}
