/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:38:15 GMT 2019
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractMapMultiSet_ESTest extends AbstractMapMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-3760));
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      abstractMapMultiSet_MutableInteger0.value = 0;
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger1 = new AbstractMapMultiSet.MutableInteger((-476));
      assertNotNull(abstractMapMultiSet_MutableInteger1);
      
      boolean boolean0 = abstractMapMultiSet_MutableInteger1.equals(abstractMapMultiSet_MutableInteger0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      boolean boolean0 = hashMultiSet0.add("*Zn':Z=Ot");
      assertTrue(hashMultiSet0.contains("*Zn':Z=Ot"));
      assertTrue(boolean0);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      
      boolean boolean1 = hashMultiSet0.add("*Zn':Z=Ot");
      assertTrue(hashMultiSet0.contains("*Zn':Z=Ot"));
      assertTrue(boolean1);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(2, hashMultiSet0.size());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = hashMultiSet0.add("*Zn':Z=Ot");
      assertTrue(hashMultiSet0.contains("*Zn':Z=Ot"));
      assertTrue(boolean2);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(3, hashMultiSet0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      boolean boolean0 = hashMultiSet0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      
      int int0 = hashMultiSet0.uniqueElements();
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>[] synchronizedMultiSetArray0 = (SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>[]) Array.newInstance(SynchronizedMultiSet.class, 0);
      SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>[] synchronizedMultiSetArray1 = hashMultiSet0.toArray(synchronizedMultiSetArray0);
      assertEquals(0, synchronizedMultiSetArray0.length);
      assertEquals(0, synchronizedMultiSetArray1.length);
      assertSame(synchronizedMultiSetArray0, synchronizedMultiSetArray1);
      assertSame(synchronizedMultiSetArray1, synchronizedMultiSetArray0);
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(synchronizedMultiSetArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-1826));
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      boolean boolean0 = hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      assertTrue(hashMultiSet0.contains(abstractMapMultiSet_MutableInteger0));
      assertTrue(boolean0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      
      int int0 = hashMultiSet0.size();
      assertTrue(hashMultiSet0.contains(abstractMapMultiSet_MutableInteger0));
      assertEquals(1, int0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<Map.Entry<Closure<Object>, AbstractMapMultiSet.MutableInteger>> hashMultiSet0 = new HashMultiSet<Map.Entry<Closure<Object>, AbstractMapMultiSet.MutableInteger>>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertNotNull(hashMultiSet1);
      
      boolean boolean0 = hashMultiSet1.add((Object) "Fn9P6*=");
      assertTrue(hashMultiSet1.contains("Fn9P6*="));
      assertTrue(boolean0);
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertFalse(hashMultiSet1.isEmpty());
      assertEquals(1, hashMultiSet1.size());
      
      Map<Object, AbstractMapMultiSet.MutableInteger> map0 = (Map<Object, AbstractMapMultiSet.MutableInteger>)hashMultiSet1.getMap();
      assertTrue(hashMultiSet1.contains("Fn9P6*="));
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertFalse(hashMultiSet1.isEmpty());
      assertEquals(1, hashMultiSet1.size());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-3760));
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      HashMultiSet<UnmodifiableMultiSet<Boolean>> hashMultiSet0 = new HashMultiSet<UnmodifiableMultiSet<Boolean>>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      boolean boolean0 = hashMultiSet0.contains(abstractMapMultiSet_MutableInteger0);
      assertFalse(boolean0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMultiSet<Closure<Object>> hashMultiSet0 = new HashMultiSet<Closure<Object>>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      // Undeclared exception!
      try { 
        hashMultiSet0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      // Undeclared exception!
      try { 
        hashMultiSet0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Map.Entry<Closure<Object>, AbstractMapMultiSet.MutableInteger>> hashMultiSet0 = new HashMultiSet<Map.Entry<Closure<Object>, AbstractMapMultiSet.MutableInteger>>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      // Undeclared exception!
      try { 
        hashMultiSet0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<Closure<String>> hashMultiSet0 = new HashMultiSet<Closure<String>>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      boolean boolean0 = hashMultiSet0.add((Closure<String>) null);
      assertTrue(boolean0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      
      hashMultiSet0.hashCode();
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMultiSet<NullIsFalsePredicate<Object>> hashMultiSet0 = new HashMultiSet<NullIsFalsePredicate<Object>>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      int int0 = hashMultiSet0.remove((Object) "%l", 2687);
      assertEquals(0, int0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<AbstractMap.SimpleEntry<Object, Object>> hashMultiSet0 = new HashMultiSet<AbstractMap.SimpleEntry<Object, Object>>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertNotNull(hashMultiSet1);
      
      int int0 = hashMultiSet1.add((Object) null, 1013);
      assertFalse(hashMultiSet1.contains(1013));
      assertEquals(0, int0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertFalse(hashMultiSet1.isEmpty());
      assertEquals(1013, hashMultiSet1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      Integer integer0 = new Integer(5902);
      assertEquals(5902, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = hashMultiSet0.add(integer0);
      assertTrue(hashMultiSet0.contains(integer0));
      assertTrue(boolean0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      
      int int0 = hashMultiSet0.add(integer0, 0);
      assertFalse(hashMultiSet0.contains(int0));
      assertTrue(hashMultiSet0.contains(integer0));
      assertEquals(1, int0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      int int0 = hashMultiSet0.size();
      assertEquals(0, int0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = hashMultiSet0.add(integer0);
      assertTrue(hashMultiSet0.contains(integer0));
      assertTrue(boolean0);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      
      hashMultiSet0.hashCode();
      assertTrue(hashMultiSet0.contains(integer0));
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>();
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertNotNull(hashMultiSet1);
      
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(hashMultiSet1);
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertTrue(hashMultiSet2.isEmpty());
      assertEquals(0, hashMultiSet2.size());
      assertNotNull(hashMultiSet2);
      
      boolean boolean0 = hashMultiSet2.add((Object) hashMultiSet0);
      assertTrue(boolean0);
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertFalse(hashMultiSet2.isEmpty());
      assertEquals(1, hashMultiSet2.size());
      
      boolean boolean1 = hashMultiSet2.equals(hashMultiSet1);
      assertFalse(boolean1);
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertFalse(hashMultiSet2.isEmpty());
      assertEquals(1, hashMultiSet2.size());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = hashMultiSet0.equals(integer0);
      assertFalse(boolean0);
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      boolean boolean0 = hashMultiSet0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      Closure<Object>[] closureArray1 = hashMultiSet0.toArray(closureArray0);
      assertEquals(6, closureArray0.length);
      assertEquals(6, closureArray1.length);
      assertSame(closureArray0, closureArray1);
      assertSame(closureArray1, closureArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      assertNotNull(closureArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = hashMultiSet0.add(instanceofPredicate0);
      assertTrue(hashMultiSet0.contains(instanceofPredicate0));
      assertTrue(boolean0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      
      SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>[] synchronizedMultiSetArray0 = (SynchronizedMultiSet<AbstractMapMultiSet.MutableInteger>[]) Array.newInstance(SynchronizedMultiSet.class, 0);
      // Undeclared exception!
      try { 
        hashMultiSet0.toArray(synchronizedMultiSetArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.collections4.functors.InstanceofPredicate
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(0);
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      boolean boolean0 = hashMultiSet0.add(abstractMapMultiSet_MutableInteger0);
      assertTrue(hashMultiSet0.contains(abstractMapMultiSet_MutableInteger0));
      assertTrue(boolean0);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      
      Object[] objectArray0 = hashMultiSet0.toArray();
      assertTrue(hashMultiSet0.contains(abstractMapMultiSet_MutableInteger0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, hashMultiSet0.size());
      assertFalse(hashMultiSet0.isEmpty());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMultiSet<Predicate<Object>> hashMultiSet0 = new HashMultiSet<Predicate<Object>>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      Object[] objectArray0 = hashMultiSet0.toArray();
      assertEquals(0, objectArray0.length);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("cK_");
      assertNotNull(mockPrintStream0);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      boolean boolean0 = hashMultiSet0.add(instanceofPredicate0);
      assertTrue(hashMultiSet0.contains(instanceofPredicate0));
      assertTrue(boolean0);
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      assertNotNull(dataOutputStream0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0, 1);
      assertNotNull(bufferedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      
      hashMultiSet0.doWriteObject(objectOutputStream0);
      assertTrue(hashMultiSet0.contains(instanceofPredicate0));
      assertFalse(hashMultiSet0.isEmpty());
      assertEquals(1, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractMapMultiSet.EntrySetIterator<SynchronizedMultiSet<String>> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<SynchronizedMultiSet<String>>((Iterator<Map.Entry<SynchronizedMultiSet<String>, AbstractMapMultiSet.MutableInteger>>) null, (AbstractMapMultiSet<SynchronizedMultiSet<String>>) null);
      assertNotNull(abstractMapMultiSet_EntrySetIterator0);
      
      // Undeclared exception!
      try { 
        abstractMapMultiSet_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$EntrySetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Iterator<Map.Entry<InputStream, AbstractMapMultiSet.MutableInteger>> iterator0 = (Iterator<Map.Entry<InputStream, AbstractMapMultiSet.MutableInteger>>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      AbstractMapMultiSet.EntrySetIterator<InputStream> abstractMapMultiSet_EntrySetIterator0 = new AbstractMapMultiSet.EntrySetIterator<InputStream>(iterator0, (AbstractMapMultiSet<InputStream>) null);
      assertNotNull(abstractMapMultiSet_EntrySetIterator0);
      
      MultiSet.Entry<InputStream> multiSet_Entry0 = abstractMapMultiSet_EntrySetIterator0.next();
      assertNotNull(multiSet_Entry0);
      
      abstractMapMultiSet_EntrySetIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Iterator<Boolean> iterator0 = (Iterator<Boolean>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      AbstractMapMultiSet.UniqueSetIterator<Boolean> abstractMapMultiSet_UniqueSetIterator0 = new AbstractMapMultiSet.UniqueSetIterator<Boolean>(iterator0, (AbstractMapMultiSet<Boolean>) null);
      assertNotNull(abstractMapMultiSet_UniqueSetIterator0);
      
      // Undeclared exception!
      try { 
        abstractMapMultiSet_UniqueSetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet$UniqueSetIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Iterator<InstanceofPredicate> iterator0 = (Iterator<InstanceofPredicate>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(iterator0).next();
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      AbstractMapMultiSet.UniqueSetIterator<InstanceofPredicate> abstractMapMultiSet_UniqueSetIterator0 = new AbstractMapMultiSet.UniqueSetIterator<InstanceofPredicate>(iterator0, hashMultiSet0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(abstractMapMultiSet_UniqueSetIterator0);
      
      InstanceofPredicate instanceofPredicate0 = abstractMapMultiSet_UniqueSetIterator0.next();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNull(instanceofPredicate0);
      
      abstractMapMultiSet_UniqueSetIterator0.remove();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-3486));
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      boolean boolean0 = abstractMapMultiSet_MutableInteger0.equals(hashMultiSet0);
      assertFalse(boolean0);
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(3);
      assertNotNull(abstractMapMultiSet_MutableInteger0);
      
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger1 = new AbstractMapMultiSet.MutableInteger((-2330));
      assertNotNull(abstractMapMultiSet_MutableInteger1);
      
      boolean boolean0 = abstractMapMultiSet_MutableInteger0.equals(abstractMapMultiSet_MutableInteger1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMultiSet<HashMultiSet<InputStream>> hashMultiSet0 = new HashMultiSet<HashMultiSet<InputStream>>();
      assertTrue(hashMultiSet0.isEmpty());
      assertEquals(0, hashMultiSet0.size());
      assertNotNull(hashMultiSet0);
      
      HashMultiSet<Predicate<Object>> hashMultiSet1 = new HashMultiSet<Predicate<Object>>();
      assertEquals(0, hashMultiSet1.size());
      assertTrue(hashMultiSet1.isEmpty());
      assertNotNull(hashMultiSet1);
      
      // Undeclared exception!
      try { 
        hashMultiSet1.remove((Object) hashMultiSet0, (-3486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMultiSet<InstanceofPredicate> hashMultiSet0 = new HashMultiSet<InstanceofPredicate>();
      assertEquals(0, hashMultiSet0.size());
      assertTrue(hashMultiSet0.isEmpty());
      assertNotNull(hashMultiSet0);
      
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      // Undeclared exception!
      try { 
        hashMultiSet0.add(instanceofPredicate0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger(818);
      hashMultiSet1.add(abstractMapMultiSet_MutableInteger0);
      hashMultiSet1.add(abstractMapMultiSet_MutableInteger0);
      assertFalse(hashMultiSet1.isEmpty());
      
      boolean boolean0 = hashMultiSet1.retainAll(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMultiSet<InputStream> hashMultiSet0 = new HashMultiSet<InputStream>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      hashMultiSet0.add((InputStream) sequenceInputStream0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(hashMultiSet0);
      boolean boolean0 = hashMultiSet1.equals(hashMultiSet0);
      assertFalse(hashMultiSet0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      HashMultiSet<AbstractMap.SimpleEntry<Object, Object>> hashMultiSet1 = new HashMultiSet<AbstractMap.SimpleEntry<Object, Object>>();
      int int0 = hashMultiSet1.getCount(hashMultiSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMultiSet<AbstractMap.SimpleEntry<Integer, InstanceofPredicate>> hashMultiSet0 = new HashMultiSet<AbstractMap.SimpleEntry<Integer, InstanceofPredicate>>();
      boolean boolean0 = hashMultiSet0.isEmpty();
      assertTrue(boolean0);
  }
}
