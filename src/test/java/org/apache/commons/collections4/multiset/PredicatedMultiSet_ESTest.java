/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:06:08 GMT 2019
 */

package org.apache.commons.collections4.multiset;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Set;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.multiset.AbstractMapMultiSet;
import org.apache.commons.collections4.multiset.HashMultiSet;
import org.apache.commons.collections4.multiset.PredicatedMultiSet;
import org.apache.commons.collections4.multiset.SynchronizedMultiSet;
import org.apache.commons.collections4.multiset.UnmodifiableMultiSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PredicatedMultiSet_ESTest extends PredicatedMultiSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Object>) hashMultiSet0, (Predicate<? super Object>) predicate0);
      predicatedMultiSet0.setCount("org.apache.commons.collections4.multiset.PredicatedMultiSet", 2);
      assertEquals(2, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      HashMultiSet<SynchronizedMultiSet<Integer>> hashMultiSet0 = new HashMultiSet<SynchronizedMultiSet<Integer>>();
      PredicatedMultiSet<SynchronizedMultiSet<Integer>> predicatedMultiSet0 = new PredicatedMultiSet<SynchronizedMultiSet<Integer>>(hashMultiSet0, predicate0);
      int int0 = predicatedMultiSet0.remove((Object) hashMultiSet0, 4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicatedMultiSet<Integer> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Integer>) hashMultiSet0, (Predicate<? super Integer>) onePredicate0);
      MultiSet<Integer> multiSet0 = predicatedMultiSet0.decorated();
      assertNotNull(multiSet0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedMultiSet<Boolean> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Boolean>) hashMultiSet0, (Predicate<? super Boolean>) predicate0);
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(predicatedMultiSet0);
      PredicatedMultiSet<Object> predicatedMultiSet1 = new PredicatedMultiSet<Object>(hashMultiSet1, predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet1.setCount((Object) null, (-3312));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      MultiSet<AbstractMapMultiSet.MutableInteger> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends AbstractMapMultiSet.MutableInteger>) hashMultiSet0);
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet(multiSet0, (Predicate<? super AbstractMapMultiSet.MutableInteger>) instanceofPredicate0);
      AbstractMapMultiSet.MutableInteger abstractMapMultiSet_MutableInteger0 = new AbstractMapMultiSet.MutableInteger((-1093));
      // Undeclared exception!
      try { 
        predicatedMultiSet0.setCount(abstractMapMultiSet_MutableInteger0, (-1093));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMultiSet<String> hashMultiSet0 = new HashMultiSet<String>();
      Predicate<String> predicate0 = NotNullPredicate.notNullPredicate();
      MultiSet<String> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends String>) hashMultiSet0);
      PredicatedMultiSet<String> predicatedMultiSet0 = new PredicatedMultiSet<String>(multiSet0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.remove((Object) hashMultiSet0, (-2309));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        PredicatedMultiSet.predicatedMultiSet((MultiSet<Integer>) null, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      HashMultiSet<HashMultiSet<String>> hashMultiSet0 = new HashMultiSet<HashMultiSet<String>>();
      HashMultiSet<String> hashMultiSet1 = new HashMultiSet<String>();
      hashMultiSet0.add(hashMultiSet1);
      // Undeclared exception!
      try { 
        PredicatedMultiSet.predicatedMultiSet((MultiSet<HashMultiSet<String>>) hashMultiSet0, (Predicate<? super HashMultiSet<String>>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet@0000000006' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@7' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      MultiSet<Integer> multiSet0 = UnmodifiableMultiSet.unmodifiableMultiSet((MultiSet<? extends Integer>) hashMultiSet0);
      Predicate<Integer> predicate0 = TruePredicate.truePredicate();
      PredicatedMultiSet<Integer> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet(multiSet0, (Predicate<? super Integer>) predicate0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.add(integer0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multiset.UnmodifiableMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMultiSet<Integer> hashMultiSet0 = new HashMultiSet<Integer>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      HashMultiSet<PredicatedMultiSet<Object>> hashMultiSet1 = new HashMultiSet<PredicatedMultiSet<Object>>();
      PredicatedMultiSet<PredicatedMultiSet<Object>> predicatedMultiSet0 = new PredicatedMultiSet<PredicatedMultiSet<Object>>(hashMultiSet1, onePredicate0);
      HashMultiSet<Object> hashMultiSet2 = new HashMultiSet<Object>(hashMultiSet0);
      PredicatedMultiSet<Object> predicatedMultiSet1 = new PredicatedMultiSet<Object>(hashMultiSet2, onePredicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.add(predicatedMultiSet1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.HashMultiSet@0000000006' - Predicate 'org.apache.commons.collections4.functors.OnePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMultiSet<HashMultiSet<String>> hashMultiSet0 = new HashMultiSet<HashMultiSet<String>>();
      SynchronizedMultiSet<HashMultiSet<String>> synchronizedMultiSet0 = new SynchronizedMultiSet<HashMultiSet<String>>(hashMultiSet0);
      HashMultiSet<String> hashMultiSet1 = new HashMultiSet<String>();
      synchronizedMultiSet0.add(hashMultiSet1);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("dib1h9:$1QlIr>(r", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      PredicatedMultiSet<HashMultiSet<String>> predicatedMultiSet0 = null;
      try {
        predicatedMultiSet0 = new PredicatedMultiSet<HashMultiSet<String>>(synchronizedMultiSet0, transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'dib1h9:$1QlIr>(r' on 'class org.apache.commons.collections4.multiset.HashMultiSet' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedMultiSet<Boolean> predicatedMultiSet0 = null;
      try {
        predicatedMultiSet0 = new PredicatedMultiSet<Boolean>((MultiSet<Boolean>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      hashMultiSet0.add((Object) hashMultiSet0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = null;
      try {
        predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.multiset.AbstractMultiSet$EntrySet@0000000005' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@6' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0, uniquePredicate0);
      boolean boolean0 = predicatedMultiSet0.equals(uniquePredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet1 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMultiSet0, (Equator<Object>) defaultEquator0);
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet1, predicate0);
      boolean boolean0 = predicatedMultiSet0.equals(hashMultiSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0, uniquePredicate0);
      Set<AbstractMapMultiSet.MutableInteger> set0 = predicatedMultiSet0.uniqueSet();
      HashMultiSet<Object> hashMultiSet1 = new HashMultiSet<Object>(set0);
      SynchronizedMultiSet<Object> synchronizedMultiSet0 = SynchronizedMultiSet.synchronizedMultiSet((MultiSet<Object>) hashMultiSet1);
      PredicatedMultiSet<Object> predicatedMultiSet1 = new PredicatedMultiSet<Object>(synchronizedMultiSet0, uniquePredicate0);
      int int0 = predicatedMultiSet1.getCount(synchronizedMultiSet0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, predicate0);
      predicatedMultiSet0.add((Object) "bIqff#E&;V'", 4539);
      assertEquals(4539, hashMultiSet0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMultiSet<Object> hashMultiSet0 = new HashMultiSet<Object>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicatedMultiSet<Object> predicatedMultiSet0 = new PredicatedMultiSet<Object>(hashMultiSet0, predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.setCount("bIqff#E&;V'", (-400));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Count must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMultiSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0, uniquePredicate0);
      predicatedMultiSet0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMultiSet<AbstractMapMultiSet.MutableInteger> hashMultiSet0 = new HashMultiSet<AbstractMapMultiSet.MutableInteger>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedMultiSet<AbstractMapMultiSet.MutableInteger> predicatedMultiSet0 = new PredicatedMultiSet<AbstractMapMultiSet.MutableInteger>(hashMultiSet0, uniquePredicate0);
      Set<MultiSet.Entry<AbstractMapMultiSet.MutableInteger>> set0 = (Set<MultiSet.Entry<AbstractMapMultiSet.MutableInteger>>)predicatedMultiSet0.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMultiSet<Boolean> hashMultiSet0 = new HashMultiSet<Boolean>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) hashMultiSet0, (Equator<Object>) defaultEquator0);
      HashMultiSet<Predicate<String>> hashMultiSet1 = new HashMultiSet<Predicate<String>>();
      PredicatedMultiSet<Predicate<String>> predicatedMultiSet0 = PredicatedMultiSet.predicatedMultiSet((MultiSet<Predicate<String>>) hashMultiSet1, (Predicate<? super Predicate<String>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedMultiSet0.remove((Object) predicatedMultiSet0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Occurrences must not be negative.
         //
         verifyException("org.apache.commons.collections4.multiset.AbstractMapMultiSet", e);
      }
  }
}
