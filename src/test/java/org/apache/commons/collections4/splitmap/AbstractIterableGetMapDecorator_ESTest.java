/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:00:06 GMT 2019
 */

package org.apache.commons.collections4.splitmap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIterableGetMapDecorator_ESTest extends AbstractIterableGetMapDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      Object object0 = null;
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0);
      abstractIterableGetMapDecorator1.equals(abstractIterableGetMapDecorator0);
      HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Integer>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Integer>>(hashMap1);
      abstractIterableGetMapDecorator2.keySet();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Object> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, HashMap<Object, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, HashMap<Object, String>>();
      HashMap<String, HashMap<Object, String>> hashMap0 = new HashMap<String, HashMap<Object, String>>();
      abstractIterableGetMapDecorator0.map = (Map<String, HashMap<Object, String>>) hashMap0;
      abstractIterableGetMapDecorator0.entrySet();
      HashMap<HashMap<Object, Object>, Object> hashMap1 = new HashMap<HashMap<Object, Object>, Object>();
      AbstractIterableGetMapDecorator<HashMap<Object, Object>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<HashMap<Object, Object>, Object>(hashMap1);
      abstractIterableGetMapDecorator1.map = (Map<HashMap<Object, Object>, Object>) hashMap1;
      abstractIterableGetMapDecorator1.size();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(0);
      hashMap2.put(integer0, integer0);
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Integer, Integer>(hashMap2);
      Integer integer1 = new Integer(0);
      abstractIterableGetMapDecorator2.remove(integer1);
      abstractIterableGetMapDecorator2.entrySet();
      AbstractIterableGetMapDecorator<HashMap<Object, String>, Integer> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<HashMap<Object, String>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer(2903);
      Integer integer1 = new Integer(2903);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer1, integer1);
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      Integer integer2 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer2);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Integer>(integer2, integer0);
      hashMap0.put(integer1, abstractMap_SimpleEntry2);
      hashMap0.put(integer2, abstractMap_SimpleEntry1);
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap0);
      abstractIterableGetMapDecorator0.size();
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, Integer>();
      abstractIterableGetMapDecorator1.decorated();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.entrySet();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap1);
      abstractIterableGetMapDecorator2.isEmpty();
      abstractIterableGetMapDecorator2.toString();
      HashMap<Object, HashMap<Object, String>> hashMap2 = new HashMap<Object, HashMap<Object, String>>(2903);
      AbstractIterableGetMapDecorator<Object, HashMap<Object, String>> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<Object, HashMap<Object, String>>(hashMap2);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.get(hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("V<7!F]BL]", "V<7!F]BL]");
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, String>(hashMap0);
      abstractIterableGetMapDecorator0.decorated();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, (Object) null);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry1);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry2 = (AbstractMap.SimpleEntry<Object, Object>) mock(AbstractMap.SimpleEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(abstractMap_SimpleEntry2).toString();
      hashMap1.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleEntry2);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(hashMap1);
      Object object0 = new Object();
      abstractIterableGetMapDecorator1.containsValue(object0);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap2);
      abstractIterableGetMapDecorator2.map = (Map<Object, Object>) hashMap2;
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)abstractIterableGetMapDecorator2.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      abstractIterableGetMapDecorator0.map = (Map<Object, Integer>) hashMap0;
      Integer integer0 = new Integer(132);
      hashMap0.put("", integer0);
      abstractIterableGetMapDecorator0.containsKey("");
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", hashMap0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      Integer integer0 = new Integer(0);
      abstractIterableGetMapDecorator0.remove(integer0);
      abstractIterableGetMapDecorator0.entrySet();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      String string0 = null;
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, Object>>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap2);
      abstractIterableGetMapDecorator2.remove((Object) null);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.remove(abstractIterableGetMapDecorator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap0);
      abstractIterableGetMapDecorator0.values();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>(hashMap0);
      abstractIterableGetMapDecorator0.remove(hashMap0);
      abstractIterableGetMapDecorator0.remove(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      abstractIterableGetMapDecorator0.map = (Map<Integer, String>) hashMap0;
      abstractIterableGetMapDecorator0.mapIterator();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(2589);
      hashMap1.put(integer0, "");
      abstractIterableGetMapDecorator0.map = (Map<Integer, String>) hashMap1;
      abstractIterableGetMapDecorator0.containsValue("");
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>(hashMap2);
      abstractIterableGetMapDecorator1.map = (Map<String, Object>) hashMap2;
      Object object0 = abstractIterableGetMapDecorator1.remove((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, String>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, String>(hashMap0);
      abstractIterableGetMapDecorator0.keySet();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      String string0 = null;
      Integer integer0 = new Integer((-1535));
      hashMap1.put((String) null, integer0);
      abstractIterableGetMapDecorator1.map = (Map<String, Integer>) hashMap1;
      abstractIterableGetMapDecorator1.mapIterator();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, Integer> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.get(abstractIterableGetMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, String>, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      HashMap<String, AbstractMap.SimpleEntry<Integer, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Integer, String>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Integer, String>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<Integer, String>>(hashMap0);
      Integer integer0 = new Integer(0);
      abstractIterableGetMapDecorator1.get(integer0);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.entrySet();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, Integer>(hashMap1);
      abstractIterableGetMapDecorator1.mapIterator();
      abstractIterableGetMapDecorator1.hashCode();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap2);
      abstractIterableGetMapDecorator2.isEmpty();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Object>, Integer> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>();
      Integer integer0 = new Integer(2903);
      Integer integer1 = new Integer(2903);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer1, integer1);
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      Integer integer2 = new Integer((-1));
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer2);
      hashMap0.put(integer2, abstractMap_SimpleEntry1);
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<Object, Integer>>(hashMap0);
      abstractIterableGetMapDecorator0.size();
      assertFalse(abstractIterableGetMapDecorator0.isEmpty());
      
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, Integer>();
      abstractIterableGetMapDecorator1.decorated();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap1.entrySet();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap1);
      boolean boolean0 = abstractIterableGetMapDecorator2.isEmpty();
      assertTrue(boolean0);
      
      abstractIterableGetMapDecorator2.toString();
      assertTrue(abstractIterableGetMapDecorator2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap0);
      abstractIterableGetMapDecorator0.isEmpty();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.containsKey(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, Object>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.containsKey(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0);
      Set<AbstractMap.SimpleEntry<Object, String>> set0 = abstractIterableGetMapDecorator0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.equals(hashMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.keySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<String, Object>) hashMap0;
      abstractIterableGetMapDecorator0.map = (Map<String, Object>) hashMap0;
      abstractIterableGetMapDecorator0.toString();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = "m}V5G";
      Object object0 = new Object();
      hashMap0.put("m}V5G", object0);
      hashMap0.put("m}V5G", "m}V5G");
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<Object, Object>) hashMap0;
      abstractIterableGetMapDecorator0.map = null;
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>(hashMap0);
      Map<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> map0 = abstractIterableGetMapDecorator0.decorated();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      HashMap<Object, AbstractMap.SimpleEntry<String, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<String, String>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<String, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<String, String>>(hashMap1);
      abstractIterableGetMapDecorator0.get(hashMap1);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = null;
      hashMap0.put((Object) null, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0);
      Map<Object, AbstractMap.SimpleImmutableEntry<String, String>> map0 = null;
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<String, String>> abstractIterableGetMapDecorator2 = null;
      try {
        abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleImmutableEntry<String, String>>((Map<Object, AbstractMap.SimpleImmutableEntry<String, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, Object>();
      Map<Integer, Object> map0 = abstractIterableGetMapDecorator1.map;
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.containsValue(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Object>>(hashMap0);
      abstractIterableGetMapDecorator0.map = (Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Object>>) hashMap0;
      abstractIterableGetMapDecorator0.get(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, String>(hashMap1);
      Integer integer0 = new Integer(0);
      abstractIterableGetMapDecorator1.map = (Map<Integer, String>) hashMap1;
      abstractIterableGetMapDecorator1.mapIterator();
      hashMap1.put(integer0, "org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator");
      abstractIterableGetMapDecorator1.mapIterator();
      abstractIterableGetMapDecorator1.equals(hashMap0);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap2 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Object>, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Object>, Object>(hashMap2);
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator2.mapIterator();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<Integer, Object>();
      Map<Integer, Object> map0 = abstractIterableGetMapDecorator3.map;
      abstractIterableGetMapDecorator3.map = null;
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("{`=:}U\"xw", "{`=:}U\"xw");
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(hashMap1);
      abstractIterableGetMapDecorator0.get("{`=:}U\"xw");
      hashMap0.put("{`=:}U\"xw", (Object) null);
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>(hashMap0);
      abstractIterableGetMapDecorator1.mapIterator();
      abstractIterableGetMapDecorator1.remove(hashMap0);
      hashMap0.remove((Object) "{`=:}U\"xw", (Object) "{`=:}U\"xw");
      abstractIterableGetMapDecorator1.isEmpty();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, String>(hashMap2);
      HashMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, String>> hashMap3 = new HashMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, String>>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, String>> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, String>>(hashMap3);
      abstractIterableGetMapDecorator3.remove((Object) null);
      abstractIterableGetMapDecorator2.remove((Object) null);
      abstractIterableGetMapDecorator2.get((Object) null);
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<String, Integer>();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator5 = new AbstractIterableGetMapDecorator<Object, Integer>();
      Object object0 = new Object();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator6 = new AbstractIterableGetMapDecorator<Object, Object>();
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap4 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator7 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap4);
      abstractIterableGetMapDecorator7.get((Object) null);
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator6.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      AbstractIterableGetMapDecorator<Integer, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, Integer>(hashMap0);
      abstractIterableGetMapDecorator0.hashCode();
      HashMap<Object, AbstractMap.SimpleEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, String>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, String>>(hashMap1);
      Collection<AbstractMap.SimpleEntry<Object, String>> collection0 = abstractIterableGetMapDecorator1.values();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Object>(hashMap0);
      abstractIterableGetMapDecorator0.remove((Object) null);
      abstractIterableGetMapDecorator0.map = (Map<String, Object>) hashMap0;
      abstractIterableGetMapDecorator0.size();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.mapIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>(hashMap0);
      assertEquals(0, abstractIterableGetMapDecorator0.size());
      
      abstractIterableGetMapDecorator0.isEmpty();
      abstractIterableGetMapDecorator0.map = (Map<Integer, String>) hashMap0;
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.get(abstractIterableGetMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Integer>, String>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator0.entrySet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = new Object();
      hashMap0.put(object0, (String) null);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.remove((Object) hashMap1);
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      abstractIterableGetMapDecorator0.equals(abstractIterableGetMapDecorator0);
      abstractIterableGetMapDecorator0.decorated();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.get(abstractIterableGetMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1579);
      hashMap0.put(integer0, "19(V-v`]*<Av7");
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator0.isEmpty();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap1);
      boolean boolean1 = abstractIterableGetMapDecorator2.containsKey(hashMap0);
      assertTrue(boolean1 == boolean0);
      assertTrue(abstractIterableGetMapDecorator2.isEmpty());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<String, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(hashMap0);
      abstractIterableGetMapDecorator0.containsValue(hashMap0);
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Object, Object>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.remove(abstractIterableGetMapDecorator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, Integer>, Integer> map0 = null;
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Integer> abstractIterableGetMapDecorator0 = null;
      try {
        abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Object, Integer>, Integer>((Map<AbstractMap.SimpleEntry<Object, Integer>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>();
      Integer integer0 = new Integer(1);
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0);
      abstractIterableGetMapDecorator1.equals(abstractIterableGetMapDecorator0);
      HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Integer, Integer>>();
      AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Integer>> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<Object, AbstractMap.SimpleEntry<Integer, Integer>>(hashMap1);
      Set<Object> set0 = abstractIterableGetMapDecorator2.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<String, Integer>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AbstractIterableGetMapDecorator<String, String> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<String, String>(hashMap0);
      boolean boolean0 = abstractIterableGetMapDecorator3.isEmpty();
      assertTrue(boolean0);
      
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap1);
      abstractIterableGetMapDecorator4.size();
      assertTrue(abstractIterableGetMapDecorator4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, String>();
      abstractIterableGetMapDecorator0.decorated();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.equals((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractIterableGetMapDecorator<Integer, String> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Integer, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      abstractIterableGetMapDecorator0.map = (Map<Integer, String>) hashMap0;
      abstractIterableGetMapDecorator0.mapIterator();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(2589);
      hashMap0.put(integer0, "x|");
      Integer integer1 = new Integer(2589);
      hashMap1.put(integer1, "");
      abstractIterableGetMapDecorator0.map = (Map<Integer, String>) hashMap1;
      abstractIterableGetMapDecorator0.containsValue("");
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>(hashMap2);
      abstractIterableGetMapDecorator1.map = (Map<String, Object>) hashMap2;
      Object object0 = new Object();
      HashMap<String, Integer> hashMap3 = new HashMap<String, Integer>();
      AbstractIterableGetMapDecorator<String, Integer> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<String, Integer>(hashMap3);
      abstractIterableGetMapDecorator2.keySet();
      AbstractIterableGetMapDecorator<Object, Integer> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<Object, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator3.containsKey("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, String>>();
      AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, String>> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<String, AbstractMap.SimpleEntry<String, String>>(hashMap0);
      abstractIterableGetMapDecorator0.toString();
      AbstractIterableGetMapDecorator<String, Object> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<String, Object>();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, Integer> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, Integer>();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, Integer> abstractIterableGetMapDecorator2 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<Integer, String>, Integer>(hashMap1);
      abstractIterableGetMapDecorator2.remove(hashMap0);
      abstractIterableGetMapDecorator2.containsKey(hashMap1);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      AbstractIterableGetMapDecorator<Integer, Object> abstractIterableGetMapDecorator3 = new AbstractIterableGetMapDecorator<Integer, Object>(hashMap2);
      Collection<Object> collection0 = abstractIterableGetMapDecorator3.values();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      hashMap3.put(abstractIterableGetMapDecorator2, "=/WCbIi^i0HGO<+*");
      AbstractIterableGetMapDecorator<Object, String> abstractIterableGetMapDecorator4 = new AbstractIterableGetMapDecorator<Object, String>(hashMap3);
      abstractIterableGetMapDecorator4.entrySet();
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer> abstractIterableGetMapDecorator5 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator5.remove(collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("", (Object) null);
      AbstractIterableGetMapDecorator<Object, Object> abstractIterableGetMapDecorator0 = new AbstractIterableGetMapDecorator<Object, Object>(hashMap0);
      abstractIterableGetMapDecorator0.mapIterator();
      hashMap0.put((Object) null, (Object) null);
      Object object0 = new Object();
      hashMap0.put(object0, object0);
      abstractIterableGetMapDecorator0.equals((Object) null);
      abstractIterableGetMapDecorator0.containsKey((Object) null);
      AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, Integer>> abstractIterableGetMapDecorator1 = new AbstractIterableGetMapDecorator<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleEntry<Object, Integer>>();
      // Undeclared exception!
      try { 
        abstractIterableGetMapDecorator1.values();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.splitmap.AbstractIterableGetMapDecorator", e);
      }
  }
}
