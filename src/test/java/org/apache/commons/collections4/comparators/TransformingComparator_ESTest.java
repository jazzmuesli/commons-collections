/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:49:56 GMT 2019
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.comparators.TransformingComparator;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformingComparator_ESTest extends TransformingComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(3);
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      TransformingComparator<String, Integer> transformingComparator0 = new TransformingComparator<String, Integer>(constantTransformer0);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("org.apache.commons.collections4.comparators.TransformingComparator");
      TransformingComparator<Object, String> transformingComparator1 = new TransformingComparator<Object, String>(transformer0, transformingComparator0);
      int int0 = transformingComparator1.compare(transformingComparator0, (Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicateArray0[2]);
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      transformerArray0[0] = (Transformer<Object, Boolean>) predicateTransformer0;
      SwitchTransformer<Object, Boolean> switchTransformer0 = new SwitchTransformer<Object, Boolean>(predicateArray0, transformerArray0, transformerArray0[0]);
      TransformingComparator<Predicate<String>, Boolean> transformingComparator0 = new TransformingComparator<Predicate<String>, Boolean>(switchTransformer0);
      Predicate<String> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super String, Boolean>) predicateTransformer0);
      int int0 = transformingComparator0.compare(predicate0, predicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Transformer<Object, Transformer<Integer, Object>> transformer0 = ConstantTransformer.nullTransformer();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1620.67), 2363.74028829).when(toDoubleFunction0).applyAsDouble(any());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      TransformingComparator<String, Object> transformingComparator0 = new TransformingComparator<String, Object>(transformer0, comparator0);
      int int0 = transformingComparator0.compare("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(161);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      TransformingComparator<Integer, Integer> transformingComparator0 = new TransformingComparator<Integer, Integer>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(integer0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      Class<String> class0 = String.class;
      Transformer<Integer, Object> transformer0 = InvokerTransformer.invokerTransformer("VChw2fSJ", (Class<?>[]) classArray0, (Object[]) classArray0);
      Transformer<Object, Transformer<Integer, Object>> transformer1 = ConstantTransformer.constantTransformer(transformer0);
      TransformingComparator<Object, Transformer<Integer, Object>> transformingComparator0 = new TransformingComparator<Object, Transformer<Integer, Object>>(transformer1);
      // Undeclared exception!
      try { 
        transformingComparator0.compare(transformer1, class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.InvokerTransformer cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.collections4.comparators.ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      TransformingComparator<Predicate<Boolean>, TransformingComparator<Object, String>> transformingComparator0 = new TransformingComparator<Predicate<Boolean>, TransformingComparator<Object, String>>((Transformer<? super Predicate<Boolean>, ? extends TransformingComparator<Object, String>>) null);
      TransformingComparator<Object, String> transformingComparator1 = new TransformingComparator<Object, String>(transformer0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformingComparator<Transformer<Object, String>, Boolean> transformingComparator0 = new TransformingComparator<Transformer<Object, String>, Boolean>((Transformer<? super Transformer<Object, String>, ? extends Boolean>) null);
      TransformingComparator<Transformer<Object, Integer>, Integer> transformingComparator1 = new TransformingComparator<Transformer<Object, Integer>, Integer>((Transformer<? super Transformer<Object, Integer>, ? extends Integer>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      TransformingComparator<String, String> transformingComparator0 = new TransformingComparator<String, String>(transformer0, comparator0);
      Transformer<Object, Predicate<Object>> transformer1 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Object, Predicate<Object>> transformingComparator1 = new TransformingComparator<Object, Predicate<Object>>(transformer1);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<Integer, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Integer, Predicate<Object>> transformingComparator0 = new TransformingComparator<Integer, Predicate<Object>>(transformer0, (Comparator<Predicate<Object>>) null);
      Transformer<Object, Transformer<Integer, Object>> transformer1 = InvokerTransformer.invokerTransformer("EEP{ud.9~h04", (Class<?>[]) null, (Object[]) null);
      SwitchTransformer<Object, Transformer<Integer, Object>> switchTransformer0 = new SwitchTransformer<Object, Transformer<Integer, Object>>((Predicate<? super Object>[]) null, (Transformer<? super Object, ? extends Transformer<Integer, Object>>[]) null, transformer1);
      TransformingComparator<Object, Object> transformingComparator1 = new TransformingComparator<Object, Object>(switchTransformer0);
      boolean boolean0 = transformingComparator0.equals(transformingComparator1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformingComparator<Comparable<Object>, Integer> transformingComparator0 = new TransformingComparator<Comparable<Object>, Integer>((Transformer<? super Comparable<Object>, ? extends Integer>) null, (Comparator<Integer>) null);
      Transformer<Boolean, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      TransformingComparator<Boolean, Integer> transformingComparator1 = new TransformingComparator<Boolean, Integer>(transformer0, (Comparator<Integer>) null);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransformingComparator<Transformer<Object, Integer>, Integer> transformingComparator0 = new TransformingComparator<Transformer<Object, Integer>, Integer>((Transformer<? super Transformer<Object, Integer>, ? extends Integer>) null);
      boolean boolean0 = transformingComparator0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Object, Predicate<Object>> transformingComparator0 = new TransformingComparator<Object, Predicate<Object>>(transformer0);
      TransformingComparator<Integer, Predicate<Object>> transformingComparator1 = new TransformingComparator<Integer, Predicate<Object>>(transformer0);
      boolean boolean0 = transformingComparator1.equals(transformingComparator0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction0);
      TransformingComparator<String, String> transformingComparator0 = new TransformingComparator<String, String>(transformer0, comparator0);
      Object object0 = new Object();
      boolean boolean0 = transformingComparator0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<Object, Predicate<Object>> transformingComparator0 = new TransformingComparator<Object, Predicate<Object>>(transformer0);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransformingComparator<Comparable<Object>, Integer> transformingComparator0 = new TransformingComparator<Comparable<Object>, Integer>((Transformer<? super Comparable<Object>, ? extends Integer>) null, (Comparator<Integer>) null);
      transformingComparator0.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      InstantiateFactory<String> instantiateFactory0 = new InstantiateFactory<String>(class0);
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) instantiateFactory0);
      Transformer<String, Predicate<Object>> transformer1 = ExceptionTransformer.exceptionTransformer();
      TransformingComparator<String, Predicate<Object>> transformingComparator0 = new TransformingComparator<String, Predicate<Object>>(transformer1);
      TransformingComparator<TransformingComparator<String, Object>, String> transformingComparator1 = new TransformingComparator<TransformingComparator<String, Object>, String>(transformer0, transformingComparator0);
      TransformingComparator<String, Object> transformingComparator2 = new TransformingComparator<String, Object>(transformer0);
      // Undeclared exception!
      try { 
        transformingComparator1.compare(transformingComparator2, (TransformingComparator<String, Object>) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }
}
