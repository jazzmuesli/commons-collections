/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:41:24 GMT 2019
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.util.BitSet;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import org.apache.commons.collections4.comparators.ComparatorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ComparatorChain_ESTest extends ComparatorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1086, 2).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      Comparator<Integer> comparator1 = Comparator.nullsFirst((Comparator<? super Integer>) comparator0);
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain0);
      ToIntFunction<String> toIntFunction1 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction1);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparator3);
      comparatorChain0.compare(comparatorChain1, comparatorChain1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparator2, false);
      comparatorChain2.thenComparing(comparator0);
      BitSet bitSet0 = new BitSet();
      bitSet0.previousClearBit(0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      comparatorChain3.equals((Object) null);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(comparator1);
      comparatorChain4.addComparator(comparator1, true);
      boolean boolean0 = true;
      comparatorChain4.addComparator(comparator1, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ToLongFunction<Integer> toLongFunction1 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      comparatorChain0.setForwardSort(0);
      Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction1);
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Integer>>) toIntFunction0);
      linkedList0.add(comparator1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      comparatorChain1.addComparator(comparator2);
      // Undeclared exception!
      try { 
        comparatorChain1.addComparator(comparator1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2617), 2).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      Comparator<Integer> comparator1 = Comparator.nullsFirst((Comparator<? super Integer>) comparator0);
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain0);
      ToIntFunction<String> toIntFunction1 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction1);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparator3);
      comparatorChain0.compare(comparatorChain1, comparatorChain1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparator2, false);
      comparatorChain2.thenComparing(comparator0);
      BitSet bitSet0 = new BitSet();
      bitSet0.previousClearBit(0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      comparatorChain3.equals((Object) null);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(comparator1);
      comparatorChain4.addComparator(comparator1, true);
      boolean boolean0 = true;
      comparatorChain4.addComparator(comparator1, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ToLongFunction<Integer> toLongFunction1 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.setForwardSort(0);
      Comparator<Integer> comparator1 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction1);
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Integer>>) toIntFunction0);
      linkedList0.add(comparator2);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      Comparator<ComparatorChain<Integer>> comparator3 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      comparatorChain1.addComparator(comparator3);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>();
      comparatorChain2.addComparator(comparator1);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Object>> comparator4 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<Object>>) toDoubleFunction0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>(comparator4);
      Comparator.reverseOrder();
      comparatorChain3.equals("");
      comparatorChain0.hashCode();
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      comparatorChain4.hashCode();
      comparatorChain2.addComparator(comparator1);
      comparatorChain0.setForwardSort(0);
      comparatorChain2.addComparator(comparator1);
      Integer integer0 = new Integer(0);
      comparatorChain4.equals(integer0);
      ComparatorChain<Comparable<Object>> comparatorChain5 = new ComparatorChain<Comparable<Object>>((List<Comparator<Comparable<Object>>>) null, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain5.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) null);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction0);
      Comparator.naturalOrder();
      comparatorChain0.addComparator(comparator0);
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, true);
      Comparator<ComparatorChain<Integer>> comparator2 = new ComparatorChain<ComparatorChain<Integer>>(comparator1);
      comparatorChain1.addComparator(comparator2, true);
      comparatorChain1.setReverseSort(0);
      comparatorChain1.setComparator(0, comparator1);
      LinkedList<Comparator<ComparatorChain<String>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<String>>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain2 = new ComparatorChain<ComparatorChain<String>>(linkedList0);
      comparatorChain2.equals("");
      comparatorChain0.size();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(linkedList1);
      comparatorChain3.isLocked();
      LinkedList<Comparator<String>> linkedList2 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain4 = new ComparatorChain<String>(linkedList2);
      Integer integer0 = new Integer(0);
      comparatorChain0.compare(comparatorChain4, integer0);
      comparatorChain0.isLocked();
      comparatorChain3.isLocked();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      long[] longArray0 = new long[5];
      longArray0[0] = (-790L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 933L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      BitSet bitSet1 = bitSet0.get(0, 0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet1);
      comparatorChain0.hashCode();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>((List<Comparator<Integer>>) null, bitSet0);
      comparatorChain1.hashCode();
      try { 
        comparatorChain0.compare((Object) null, bitSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      long[] longArray0 = new long[5];
      longArray0[0] = (-790L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (-1L);
      longArray0[4] = 933L;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      bitSet0.get(0, 0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, (BitSet) null);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>(linkedList0);
      linkedList0.add((Comparator<String>) comparatorChain0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>((Comparator<Object>) null, false);
      Comparator<Object> comparator0 = Comparator.nullsLast((Comparator<? super Object>) comparatorChain1);
      comparatorChain0.thenComparing(comparator0);
      String string0 = "";
      linkedList0.remove((Object) comparatorChain0);
      try { 
        comparatorChain0.compare("X!tUAF<aWlQ]Rx", "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = Comparator.nullsFirst((Comparator<? super Comparable<Object>>) null);
      ComparatorChain<Comparable<Object>> comparatorChain0 = new ComparatorChain<Comparable<Object>>(comparator0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingDouble(toDoubleFunction0);
      comparatorChain0.equals((Object) null);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<Object> comparator1 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator1);
      comparatorChain1.isLocked();
      comparatorChain0.size();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>((Comparator<Integer>) null);
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(comparatorChain2, false);
      comparatorChain3.hashCode();
      comparatorChain1.hashCode();
      Comparator<ComparatorChain<String>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<String>>) comparator1);
      ComparatorChain<ComparatorChain<String>> comparatorChain4 = new ComparatorChain<ComparatorChain<String>>(comparator2);
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      BitSet bitSet0 = new BitSet(0);
      bitSet0.set(0, 1);
      ComparatorChain<String> comparatorChain5 = new ComparatorChain<String>(linkedList0, bitSet0);
      Comparator.naturalOrder();
      Comparator<Comparable<Object>> comparator3 = Comparator.naturalOrder();
      comparatorChain5.equals(comparatorChain3);
      comparatorChain1.compare("Dx5r:Xu)9~O6Fw", linkedList0);
      comparatorChain2.size();
      comparatorChain1.equals((Object) null);
      Integer integer0 = new Integer(1);
      comparatorChain1.equals(integer0);
      comparatorChain1.compare(comparatorChain4, comparator3);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain6 = new ComparatorChain<ComparatorChain<Integer>>();
      Object object0 = new Object();
      comparatorChain6.equals(object0);
      ToDoubleFunction<Object> toDoubleFunction1 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Object>> comparator4 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Object>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain7 = new ComparatorChain<ComparatorChain<Object>>(comparator4);
      comparatorChain7.size();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      comparatorChain0.isLocked();
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setReverseSort(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((List<Comparator<Object>>) null, bitSet0);
      int int0 = 0;
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain0);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(0, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      comparatorChain0.isLocked();
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain1 = new ComparatorChain<Integer>(linkedList0, (BitSet) null);
      // Undeclared exception!
      try { 
        comparatorChain1.setForwardSort(224);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      comparatorChain0.addComparator((Comparator<Object>) comparatorChain1, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      boolean boolean0 = false;
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>(comparatorChain0, false);
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      BitSet bitSet0 = new BitSet();
      bitSet0.previousSetBit(0);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(linkedList0, bitSet0);
      Comparator<String> comparator0 = comparatorChain2.reversed();
      ComparatorChain<String> comparatorChain3 = new ComparatorChain<String>(comparator0, false);
      int int0 = comparatorChain3.size();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(linkedList1);
      linkedList1.add((Comparator<Integer>) comparatorChain4);
      Integer integer0 = new Integer(2688);
      Integer integer1 = new Integer(1);
      comparatorChain4.compare(integer0, integer1);
      List<Comparator<Comparator<Object>>> list0 = null;
      ComparatorChain<Comparator<Object>> comparatorChain5 = new ComparatorChain<Comparator<Object>>(list0);
      int int1 = (-1);
      Comparator<Comparator<Object>> comparator1 = null;
      comparatorChain5.setComparator(int1, comparator1);
      Comparator<Object> comparator2 = null;
      Comparator<Integer> comparator3 = comparatorChain4.thenComparing(comparator2);
      comparatorChain4.setComparator(int0, comparator3);
      int int2 = 2124;
      comparatorChain2.setReverseSort(int2);
      boolean boolean1 = true;
      ComparatorChain<Object> comparatorChain6 = new ComparatorChain<Object>(comparator2, boolean1);
      comparatorChain6.setComparator(int2, comparator2, boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparatorChain0);
      comparatorChain0.addComparator((Comparator<String>) comparatorChain1);
      String string0 = "";
      int int0 = comparatorChain0.compare(string0, string0);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(int0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(linkedList0, bitSet0);
      comparatorChain2.hashCode();
      ComparatorChain<Comparable<Integer>> comparatorChain3 = new ComparatorChain<Comparable<Integer>>();
      comparatorChain3.hashCode();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(comparator0, true);
      comparatorChain0.setReverseSort(1760);
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      linkedList0.clear();
      BitSet bitSet1 = bitSet0.get(0, 0);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(linkedList0, bitSet1);
      comparatorChain1.setForwardSort(1);
      ComparatorChain<Comparator<String>> comparatorChain2 = new ComparatorChain<Comparator<String>>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<String>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<String>>) toDoubleFunction0);
      comparatorChain2.addComparator(comparator1);
      comparatorChain2.setForwardSort(0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>((Comparator<Comparator<Object>>) null);
      comparatorChain3.setComparator(0, (Comparator<Comparator<Object>>) null, false);
      ComparatorChain<ComparatorChain<String>> comparatorChain4 = new ComparatorChain<ComparatorChain<String>>((Comparator<ComparatorChain<String>>) null, false);
      // Undeclared exception!
      try { 
        comparatorChain4.setComparator((-1150), (Comparator<ComparatorChain<String>>) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Comparator<Comparator<Object>>> linkedList0 = new LinkedList<Comparator<Comparator<Object>>>();
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>(linkedList0);
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>(comparatorChain0);
      comparatorChain1.setComparator(0, (Comparator<Comparator<Object>>) comparatorChain0, false);
      comparatorChain1.addComparator((Comparator<Comparator<Object>>) comparatorChain0, true);
      LinkedList<Comparator<String>> linkedList1 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(linkedList1);
      try { 
        comparatorChain2.compare("hk}al\"Vy3/^Z/Fpjr", "Z");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>();
      comparatorChain1.hashCode();
      comparatorChain1.hashCode();
      LinkedList<Comparator<Comparator<String>>> linkedList0 = new LinkedList<Comparator<Comparator<String>>>();
      ComparatorChain<Comparator<String>> comparatorChain2 = new ComparatorChain<Comparator<String>>(linkedList0);
      ComparatorChain<ComparatorChain<Comparator<Object>>> comparatorChain3 = new ComparatorChain<ComparatorChain<Comparator<Object>>>();
      boolean boolean0 = comparatorChain3.equals(comparatorChain2);
      assertTrue(boolean0);
      
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>();
      ComparatorChain<Integer> comparatorChain5 = new ComparatorChain<Integer>(comparatorChain4);
      comparatorChain5.setComparator(0, (Comparator<Integer>) comparatorChain4);
      assertFalse(comparatorChain5.equals((Object)comparatorChain4));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      ComparatorChain<Comparable<String>> comparatorChain1 = new ComparatorChain<Comparable<String>>((Comparator<Comparable<String>>) null);
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comparatorChain1.compare(comparable0, comparable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<Object> comparator0 = null;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>((Comparator<Object>) null, true);
      Comparator<Object> comparator1 = comparatorChain0.reversed();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator1);
      comparatorChain1.setReverseSort(1);
      comparatorChain1.equals(comparatorChain0);
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      Comparator<String> comparator2 = null;
      Comparator.nullsLast((Comparator<? super Comparator<Integer>>) comparator1);
      comparatorChain2.addComparator((Comparator<String>) null, true);
      comparatorChain2.addComparator((Comparator<String>) null, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(1, (Comparator<Object>) comparatorChain1, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0);
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain1);
      Comparator<Integer> comparator1 = comparatorChain0.thenComparing(comparator0);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(comparator1);
      comparatorChain2.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0);
      comparatorChain0.hashCode();
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>();
      int int0 = (-945);
      boolean boolean0 = true;
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(comparatorChain1, true);
      try { 
        comparatorChain1.setComparator((-945), (Comparator<String>) comparatorChain2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Comparator<ComparatorChain<Object>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Object>>>();
      ComparatorChain<ComparatorChain<Object>> comparatorChain0 = new ComparatorChain<ComparatorChain<Object>>(linkedList0);
      comparatorChain0.size();
      ComparatorChain<ComparatorChain<String>> comparatorChain1 = new ComparatorChain<ComparatorChain<String>>();
      comparatorChain1.size();
      LinkedList<Comparator<Object>> linkedList1 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain2 = new ComparatorChain<Object>(linkedList1);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>();
      Comparator.naturalOrder();
      linkedList1.add((Comparator<Object>) comparatorChain2);
      comparatorChain2.setReverseSort(0);
      comparatorChain2.setComparator(0, (Comparator<Object>) comparatorChain3, true);
      // Undeclared exception!
      try { 
        Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      Comparator<Integer> comparator1 = Comparator.nullsFirst((Comparator<? super Integer>) comparator0);
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain0);
      ToIntFunction<String> toIntFunction1 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction1);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparator3);
      comparatorChain0.compare(comparatorChain1, comparatorChain1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparator2, false);
      comparatorChain2.thenComparing(comparator0);
      BitSet bitSet0 = new BitSet();
      bitSet0.previousClearBit(0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      comparatorChain3.equals((Object) null);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(comparator1);
      comparatorChain4.addComparator(comparator1, true);
      boolean boolean0 = true;
      comparatorChain4.addComparator(comparator1, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator(0, comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1211;
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1211);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      bitSet0.toByteArray();
      // Undeclared exception!
      try { 
        comparatorChain0.addComparator((Comparator<Comparator<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = null;
      try {
        comparatorChain0 = new ComparatorChain<Integer>((List<Comparator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = Comparator.reverseOrder();
      ComparatorChain<Comparable<Object>> comparatorChain0 = new ComparatorChain<Comparable<Object>>(comparator0);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      long[] longArray0 = new long[0];
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0, bitSet0);
      boolean boolean0 = comparatorChain0.equals(comparatorChain1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      Comparator<Integer> comparator0 = Comparator.nullsFirst((Comparator<? super Integer>) comparatorChain0);
      comparatorChain0.addComparator(comparator0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>();
      // Undeclared exception!
      try { 
        comparatorChain1.setComparator(0, (Comparator<Object>) null, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-19);
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0, bitSet0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0, true);
      try { 
        comparatorChain0.setComparator((-1), (Comparator<Object>) comparatorChain1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Comparator<Comparable<Integer>>> linkedList0 = new LinkedList<Comparator<Comparable<Integer>>>();
      ComparatorChain<Comparable<Integer>> comparatorChain0 = new ComparatorChain<Comparable<Integer>>(linkedList0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingInt((ToIntFunction<? super Comparable<String>>) toIntFunction0);
      Comparator<Comparable<Integer>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Comparable<Integer>>) toDoubleFunction0);
      comparatorChain0.addComparator(comparator0);
      ComparatorChain<ComparatorChain<Object>> comparatorChain1 = new ComparatorChain<ComparatorChain<Object>>();
      comparatorChain1.size();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      LinkedList<Comparator<String>> linkedList1 = new LinkedList<Comparator<String>>();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      ComparatorChain<String> comparatorChain3 = new ComparatorChain<String>(linkedList1, bitSet0);
      comparatorChain2.addComparator((Comparator<String>) comparatorChain3);
      LinkedList<Comparator<Comparable<Object>>> linkedList2 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain4 = new ComparatorChain<Comparable<Object>>(linkedList2);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      try { 
        comparatorChain4.compare(comparable0, comparable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<String>>) toIntFunction0);
      ComparatorChain<ComparatorChain<String>> comparatorChain0 = new ComparatorChain<ComparatorChain<String>>(comparator0, false);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      Comparator<Object> comparator2 = Comparator.nullsLast((Comparator<? super Object>) comparator1);
      Comparator.nullsFirst((Comparator<? super Object>) comparator2);
      ComparatorChain<ComparatorChain<String>> comparatorChain1 = new ComparatorChain<ComparatorChain<String>>(comparatorChain0);
      int int0 = (-1775);
      // Undeclared exception!
      try { 
        comparatorChain1.setReverseSort((-1775));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1775
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      boolean boolean0 = true;
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      comparatorChain0.reversed();
      // Undeclared exception!
      try { 
        comparatorChain0.setForwardSort((-1063));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -1063
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(linkedList0);
      comparatorChain0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparatorChain0);
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>(linkedList0);
      Comparator<Integer> comparator0 = comparatorChain2.thenComparing((Comparator<? super Integer>) comparatorChain0);
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(comparator0, true);
      try { 
        comparatorChain1.compare(comparatorChain0, comparatorChain3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>();
      comparatorChain0.setForwardSort(353);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Comparator<Integer>> linkedList0 = new LinkedList<Comparator<Integer>>();
      BitSet bitSet0 = new BitSet(0);
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>(linkedList0, bitSet0);
      assertFalse(comparatorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-2617), 2).when(toIntFunction0).applyAsInt(any());
      Comparator<Object> comparator0 = Comparator.comparingInt((ToIntFunction<? super Object>) toIntFunction0);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0);
      Comparator<Integer> comparator1 = Comparator.nullsFirst((Comparator<? super Integer>) comparator0);
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparatorChain0);
      ToIntFunction<String> toIntFunction1 = (ToIntFunction<String>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator3 = Comparator.comparingInt((ToIntFunction<? super String>) toIntFunction1);
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparator3);
      comparatorChain0.compare(comparatorChain1, comparatorChain1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain2 = new ComparatorChain<ComparatorChain<Integer>>(comparator2, false);
      comparatorChain2.thenComparing(comparator0);
      BitSet bitSet0 = new BitSet();
      bitSet0.previousClearBit(0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>((List<Comparator<Comparator<Object>>>) null, bitSet0);
      comparatorChain3.equals((Object) null);
      ComparatorChain<Integer> comparatorChain4 = new ComparatorChain<Integer>(comparator1);
      comparatorChain4.addComparator(comparator1, false);
      boolean boolean0 = true;
      comparatorChain4.addComparator(comparator1, true);
      // Undeclared exception!
      try { 
        comparatorChain0.setComparator((-1), comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Comparator ordering cannot be changed after the first comparison is performed
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComparatorChain<Integer> comparatorChain0 = new ComparatorChain<Integer>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      comparatorChain0.thenComparing(comparator0);
      LinkedList<Comparator<Object>> linkedList0 = new LinkedList<Comparator<Object>>();
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(linkedList0);
      comparatorChain1.hashCode();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>();
      ComparatorChain<String> comparatorChain3 = new ComparatorChain<String>();
      comparatorChain2.equals(comparatorChain3);
      comparatorChain2.size();
      Comparator.nullsLast((Comparator<? super Comparable<Object>>) comparatorChain1);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      try { 
        comparatorChain1.compare(comparatorChain0, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ComparatorChains must contain at least one Comparator
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ToLongFunction<Integer> toLongFunction1 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.setForwardSort(0);
      Comparator<Integer> comparator0 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction1);
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Integer>>) toIntFunction0);
      linkedList0.add(comparator1);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>();
      comparatorChain2.addComparator(comparator0);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Object>> comparator2 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<Object>>) toDoubleFunction0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>(comparator2);
      Comparator.reverseOrder();
      boolean boolean0 = comparatorChain3.equals("");
      assertFalse(boolean0);
      
      comparatorChain0.hashCode();
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      comparatorChain4.hashCode();
      comparatorChain2.addComparator(comparator0);
      comparatorChain0.setForwardSort(0);
      comparatorChain2.addComparator(comparator0);
      comparatorChain0.size();
      boolean boolean1 = comparatorChain4.equals(comparatorChain1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ToLongFunction<Integer> toLongFunction1 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.setForwardSort(0);
      Comparator<Integer> comparator1 = Comparator.comparingLong((ToLongFunction<? super Integer>) toLongFunction1);
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Integer>> comparator2 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Integer>>) toIntFunction0);
      linkedList0.add(comparator2);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(linkedList0, (BitSet) null);
      Comparator<ComparatorChain<Integer>> comparator3 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      comparatorChain1.addComparator(comparator3);
      ComparatorChain<Integer> comparatorChain2 = new ComparatorChain<Integer>();
      comparatorChain2.addComparator(comparator1);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Comparator<Object>> comparator4 = Comparator.comparingDouble((ToDoubleFunction<? super Comparator<Object>>) toDoubleFunction0);
      ComparatorChain<Comparator<Object>> comparatorChain3 = new ComparatorChain<Comparator<Object>>(comparator4);
      Comparator.reverseOrder();
      boolean boolean0 = comparatorChain3.equals("");
      assertFalse(boolean0);
      
      comparatorChain0.hashCode();
      ComparatorChain<Object> comparatorChain4 = new ComparatorChain<Object>();
      comparatorChain4.hashCode();
      comparatorChain2.addComparator(comparator1);
      comparatorChain0.setForwardSort(0);
      comparatorChain2.addComparator(comparator1);
      ToIntFunction<Object> toIntFunction1 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Object>> comparator5 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<Object>>) toIntFunction1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain5 = new ComparatorChain<ComparatorChain<Object>>(comparator5);
      comparatorChain5.hashCode();
      comparatorChain3.isLocked();
      comparatorChain0.isLocked();
      comparatorChain3.isLocked();
      ComparatorChain<Object> comparatorChain6 = new ComparatorChain<Object>(comparatorChain4);
      boolean boolean1 = comparatorChain1.equals(comparatorChain6);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComparatorChain<String> comparatorChain0 = new ComparatorChain<String>();
      ComparatorChain<String> comparatorChain1 = new ComparatorChain<String>(comparatorChain0);
      ComparatorChain<String> comparatorChain2 = null;
      try {
        comparatorChain2 = new ComparatorChain<String>((List<Comparator<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.comparators.ComparatorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<String>> comparator0 = Comparator.comparingInt((ToIntFunction<? super ComparatorChain<String>>) toIntFunction0);
      ComparatorChain<ComparatorChain<String>> comparatorChain0 = new ComparatorChain<ComparatorChain<String>>(comparator0, false);
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      ComparatorChain<Object> comparatorChain1 = new ComparatorChain<Object>(comparator1);
      Comparator<Object> comparator2 = Comparator.nullsFirst((Comparator<? super Object>) comparatorChain1);
      ComparatorChain<ComparatorChain<String>> comparatorChain2 = new ComparatorChain<ComparatorChain<String>>(comparatorChain0, false);
      ComparatorChain<Object> comparatorChain3 = new ComparatorChain<Object>(comparator2);
      Comparator.nullsLast((Comparator<? super Object>) comparatorChain3);
      boolean boolean0 = comparatorChain3.equals(comparatorChain0);
      assertFalse(boolean0);
      
      ComparatorChain<String> comparatorChain4 = new ComparatorChain<String>();
      comparatorChain3.hashCode();
      assertFalse(comparatorChain1.equals((Object)comparatorChain3));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Comparator<Object> comparator0 = Comparator.nullsFirst((Comparator<? super Object>) null);
      ComparatorChain<Object> comparatorChain0 = new ComparatorChain<Object>(comparator0, true);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      comparatorChain0.thenComparingInt(toIntFunction0);
      Comparator.naturalOrder();
      comparatorChain0.addComparator(comparator0);
      Comparator<ComparatorChain<Integer>> comparator1 = Comparator.nullsLast((Comparator<? super ComparatorChain<Integer>>) comparator0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain1 = new ComparatorChain<ComparatorChain<Integer>>(comparator1, false);
      Comparator<ComparatorChain<Integer>> comparator2 = comparatorChain1.reversed();
      comparatorChain1.addComparator(comparator2, true);
      comparatorChain1.setReverseSort(0);
      comparatorChain1.setComparator(0, comparator1);
      LinkedList<Comparator<ComparatorChain<String>>> linkedList0 = new LinkedList<Comparator<ComparatorChain<String>>>();
      ComparatorChain<ComparatorChain<String>> comparatorChain2 = new ComparatorChain<ComparatorChain<String>>(linkedList0);
      linkedList0.add((Comparator<ComparatorChain<String>>) comparatorChain2);
      comparatorChain2.equals("");
      comparatorChain0.size();
      LinkedList<Comparator<Integer>> linkedList1 = new LinkedList<Comparator<Integer>>();
      ComparatorChain<Integer> comparatorChain3 = new ComparatorChain<Integer>(linkedList1);
      comparatorChain3.isLocked();
      LinkedList<Comparator<String>> linkedList2 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain4 = new ComparatorChain<String>(linkedList2);
      Integer integer0 = new Integer(0);
      int int0 = comparatorChain0.compare(comparatorChain4, integer0);
      assertTrue(comparatorChain0.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      ComparatorChain<Comparator<Object>> comparatorChain0 = new ComparatorChain<Comparator<Object>>();
      ComparatorChain<Comparator<Object>> comparatorChain1 = new ComparatorChain<Comparator<Object>>(comparatorChain0, false);
      comparatorChain1.size();
      LinkedList<Comparator<String>> linkedList0 = new LinkedList<Comparator<String>>();
      ComparatorChain<String> comparatorChain2 = new ComparatorChain<String>(linkedList0, bitSet0);
      ComparatorChain<String> comparatorChain3 = new ComparatorChain<String>(comparatorChain2);
      assertFalse(comparatorChain3.isLocked());
      
      linkedList0.parallelStream();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super String>) toDoubleFunction0);
      comparatorChain3.setComparator(0, comparator0);
      ToDoubleFunction<Comparator<Object>> toDoubleFunction1 = (ToDoubleFunction<Comparator<Object>>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ComparatorChain<Object>> comparator1 = Comparator.comparingDouble((ToDoubleFunction<? super ComparatorChain<Object>>) toDoubleFunction1);
      ComparatorChain<ComparatorChain<Object>> comparatorChain4 = new ComparatorChain<ComparatorChain<Object>>(comparator1);
      comparatorChain4.equals(comparator1);
      ComparatorChain<String> comparatorChain5 = new ComparatorChain<String>(linkedList0, bitSet0);
      assertFalse(comparatorChain5.isLocked());
      
      comparatorChain2.addComparator((Comparator<String>) comparatorChain5);
      assertTrue(comparatorChain5.equals((Object)comparatorChain2));
      
      LinkedList<Comparator<ComparatorChain<Integer>>> linkedList1 = new LinkedList<Comparator<ComparatorChain<Integer>>>();
      ComparatorChain<ComparatorChain<Integer>> comparatorChain6 = new ComparatorChain<ComparatorChain<Integer>>(linkedList1, bitSet0);
      ComparatorChain<ComparatorChain<Integer>> comparatorChain7 = new ComparatorChain<ComparatorChain<Integer>>(comparatorChain6);
      comparatorChain7.setComparator(0, (Comparator<ComparatorChain<Integer>>) comparatorChain6, true);
      LinkedList<Comparator<Comparable<Object>>> linkedList2 = new LinkedList<Comparator<Comparable<Object>>>();
      ComparatorChain<Comparable<Object>> comparatorChain8 = new ComparatorChain<Comparable<Object>>(linkedList2, bitSet0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = comparatorChain8.equals(integer0);
      assertFalse(boolean0);
      assertEquals("{}", bitSet0.toString());
  }
}
