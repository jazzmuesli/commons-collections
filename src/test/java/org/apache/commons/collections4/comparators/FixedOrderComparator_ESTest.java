/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:36:32 GMT 2019
 */

package org.apache.commons.collections4.comparators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.comparators.FixedOrderComparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FixedOrderComparator_ESTest extends FixedOrderComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      fixedOrderComparator1.add(fixedOrderComparator0);
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      Comparator.comparingInt((ToIntFunction<? super Integer>) toIntFunction0);
      fixedOrderComparator2.equals((Object) null);
      Object object1 = new Object();
      fixedOrderComparator1.compare(object1, "pKN\"&]9|0");
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      assertEquals(3, fixedOrderComparator_UnknownObjectBehaviorArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      fixedOrderComparator1.add(linkedList0);
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      fixedOrderComparator2.equals((Object) null);
      Object object1 = new Object();
      int int0 = fixedOrderComparator1.compare(object1, "Unknown object behavior must not be null");
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      fixedOrderComparator1.add(linkedList0);
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      fixedOrderComparator2.equals(fixedOrderComparator2);
      Object object1 = new Object();
      fixedOrderComparator1.compare(object1, "Unknown object behavior must not be null");
      int int1 = fixedOrderComparator2.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      fixedOrderComparator1.add(linkedList0);
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      fixedOrderComparator2.equals((Object) null);
      Object object1 = new Object();
      int int0 = fixedOrderComparator1.compare(object1, "pKN\"&]9|0");
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      boolean boolean0 = fixedOrderComparator1.add(fixedOrderComparator0);
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      assertEquals(1, int0);
      
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      boolean boolean1 = fixedOrderComparator2.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      Object object1 = new Object();
      int int1 = fixedOrderComparator1.compare(object1, "pKN\"&]9|0");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = new FixedOrderComparator<Object>();
      // Undeclared exception!
      try { 
        fixedOrderComparator1.setUnknownObjectBehavior((FixedOrderComparator.UnknownObjectBehavior) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Unknown object behavior must not be null
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      fixedOrderComparator1.thenComparingDouble(toDoubleFunction0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>();
      // Undeclared exception!
      try { 
        fixedOrderComparator1.add((Object) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>(integerArray0);
      Integer integer0 = new Integer(4);
      Integer.toUnsignedLong(2004);
      fixedOrderComparator0.equals(integer0);
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(integerArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.BEFORE;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      FixedOrderComparator.UnknownObjectBehavior.values();
      LinkedList<FixedOrderComparator<String>> linkedList0 = new LinkedList<FixedOrderComparator<String>>();
      FixedOrderComparator<FixedOrderComparator<String>> fixedOrderComparator2 = new FixedOrderComparator<FixedOrderComparator<String>>(linkedList0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior1 = FixedOrderComparator.UnknownObjectBehavior.EXCEPTION;
      fixedOrderComparator2.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior1);
      fixedOrderComparator2.hashCode();
      FixedOrderComparator<String> fixedOrderComparator3 = new FixedOrderComparator<String>();
      fixedOrderComparator3.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      FixedOrderComparator<Integer> fixedOrderComparator4 = new FixedOrderComparator<Integer>();
      fixedOrderComparator3.equals(fixedOrderComparator4);
      fixedOrderComparator3.equals(fixedOrderComparator_UnknownObjectBehavior0);
      fixedOrderComparator1.equals(integer0);
      // Undeclared exception!
      try { 
        Comparator.comparingInt((ToIntFunction<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) linkedList0);
      FixedOrderComparator<Object> fixedOrderComparator0 = null;
      try {
        fixedOrderComparator0 = new FixedOrderComparator<Object>(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      FixedOrderComparator<Integer> fixedOrderComparator0 = new FixedOrderComparator<Integer>();
      FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>();
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = FixedOrderComparator.UnknownObjectBehavior.AFTER;
      fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
      int int0 = fixedOrderComparator1.compare(fixedOrderComparator0, linkedList0);
      assertTrue(fixedOrderComparator1.isLocked());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      Comparator.naturalOrder();
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(objectArray0);
      LinkedList<Comparable<Object>> linkedList0 = new LinkedList<Comparable<Object>>();
      FixedOrderComparator<Comparable<Object>> fixedOrderComparator1 = new FixedOrderComparator<Comparable<Object>>(linkedList0);
      fixedOrderComparator1.hashCode();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FixedOrderComparator<String> fixedOrderComparator2 = new FixedOrderComparator<String>(stringArray0);
      fixedOrderComparator2.hashCode();
      fixedOrderComparator2.getUnknownObjectBehavior();
      fixedOrderComparator0.compare(objectArray0[4], (Object) null);
      // Undeclared exception!
      try { 
        fixedOrderComparator0.checkLocked();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "l*'-f:yWE)D~PUL1{l";
      String string0 = "3}VfDA>@1;\"3|57zn";
      stringArray0[1] = "3}VfDA>@1;\"3|57zn";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "3`FKzuU~T}dw";
      stringArray0[7] = "";
      stringArray0[8] = "Attempting to compare unknown object ";
      FixedOrderComparator<String> fixedOrderComparator0 = new FixedOrderComparator<String>(stringArray0);
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingLong((ToLongFunction<? super Object>) toLongFunction0);
      fixedOrderComparator0.compare("", "3}VfDA>@1;\"3|57zn");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fixedOrderComparator0.addAsEqual("3}VfDA>@1;\"3|57zn", "3}VfDA>@1;\"3|57zn");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">";
      stringArray0[1] = "org.apache.commons.collections4.comparators.FixedOrderComparator";
      stringArray0[2] = "=3l,Gq";
      stringArray0[3] = "u)>&`h$+Q]7#KIB";
      stringArray0[4] = "";
      stringArray0[5] = "ijkMQ3M{2f";
      FixedOrderComparator<String> fixedOrderComparator0 = new FixedOrderComparator<String>(stringArray0);
      fixedOrderComparator0.checkLocked();
      fixedOrderComparator0.addAsEqual("", "k<~aYy_`OXc");
      fixedOrderComparator0.add("Sn+Z!q`");
      fixedOrderComparator0.addAsEqual(">", ">");
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(stringArray0);
      fixedOrderComparator1.getUnknownObjectBehavior();
      fixedOrderComparator1.compare("", "=3l,Gq");
      fixedOrderComparator1.hashCode();
      assertTrue(fixedOrderComparator1.isLocked());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">";
      stringArray0[1] = "org.apache.commons.collections4.comparators.FixedOrderComparator";
      stringArray0[2] = "=3l,Gq";
      stringArray0[3] = "u)>&`h$+Q]7#KIB";
      stringArray0[4] = "";
      stringArray0[5] = "ijkM3M2f";
      FixedOrderComparator<String> fixedOrderComparator0 = new FixedOrderComparator<String>(stringArray0);
      fixedOrderComparator0.addAsEqual("", "k<~aYy_`OXc");
      fixedOrderComparator0.add("Sn+Z!q`");
      fixedOrderComparator0.addAsEqual(">", ">");
      FixedOrderComparator<Object> fixedOrderComparator1 = new FixedOrderComparator<Object>(stringArray0);
      FixedOrderComparator.UnknownObjectBehavior fixedOrderComparator_UnknownObjectBehavior0 = fixedOrderComparator1.getUnknownObjectBehavior();
      fixedOrderComparator1.compare("", "=3l,Gq");
      // Undeclared exception!
      try { 
        fixedOrderComparator1.setUnknownObjectBehavior(fixedOrderComparator_UnknownObjectBehavior0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot modify a FixedOrderComparator after a comparison
         //
         verifyException("org.apache.commons.collections4.comparators.FixedOrderComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedOrderComparator.UnknownObjectBehavior[] fixedOrderComparator_UnknownObjectBehaviorArray0 = FixedOrderComparator.UnknownObjectBehavior.values();
      FixedOrderComparator<Object> fixedOrderComparator0 = new FixedOrderComparator<Object>(fixedOrderComparator_UnknownObjectBehaviorArray0);
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      fixedOrderComparator0.checkLocked();
      fixedOrderComparator0.add(fixedOrderComparator0);
      fixedOrderComparator0.hashCode();
      String[] stringArray0 = new String[0];
      FixedOrderComparator<String> fixedOrderComparator1 = new FixedOrderComparator<String>(stringArray0);
      String string0 = "Vzkz5oH-<U";
      fixedOrderComparator1.addAsEqual(string0, string0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = null;
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      fixedOrderComparator0.thenComparing((Function<? super Object, ?>) function1, (Comparator<? super Object>) fixedOrderComparator0);
      fixedOrderComparator1.checkLocked();
      Comparator.reverseOrder();
      fixedOrderComparator1.equals(fixedOrderComparator0);
      FixedOrderComparator.UnknownObjectBehavior.values();
      String string1 = "";
      FixedOrderComparator.UnknownObjectBehavior.valueOf(string1);
      fixedOrderComparator0.getUnknownObjectBehavior();
      String string2 = "";
      FixedOrderComparator.UnknownObjectBehavior.valueOf(string2);
      FixedOrderComparator.UnknownObjectBehavior.values();
  }
}
