/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:37:54 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.map.CompositeMap;
import org.apache.commons.collections4.map.EmptyMapMutator;
import org.apache.commons.collections4.map.EntrySetToMapIteratorAdapter;
import org.apache.commons.collections4.set.CompositeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CompositeMap_ESTest extends CompositeMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<EmptyMapMutator<String, Object>, Integer>[] mapArray0 = (Map<EmptyMapMutator<String, Object>, Integer>[]) Array.newInstance(Map.class, 9);
      EmptyMapMutator<EmptyMapMutator<String, Object>, Integer> emptyMapMutator0 = new EmptyMapMutator<EmptyMapMutator<String, Object>, Integer>();
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap0 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>((Map<EmptyMapMutator<String, Object>, Integer>) null, (Map<EmptyMapMutator<String, Object>, Integer>) null, emptyMapMutator0);
      mapArray0[0] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap0;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap1 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>((Map<EmptyMapMutator<String, Object>, Integer>) null, (Map<EmptyMapMutator<String, Object>, Integer>) null, emptyMapMutator0);
      mapArray0[1] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap1;
      HashMap<EmptyMapMutator<String, Object>, Integer> hashMap0 = new HashMap<EmptyMapMutator<String, Object>, Integer>();
      mapArray0[2] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap2 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(mapArray0, emptyMapMutator0);
      mapArray0[3] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap2;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap3 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(mapArray0);
      mapArray0[4] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap3;
      Map<EmptyMapMutator<String, Object>, Integer>[] mapArray1 = (Map<EmptyMapMutator<String, Object>, Integer>[]) Array.newInstance(Map.class, 8);
      mapArray1[0] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap3;
      mapArray1[1] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap1;
      mapArray1[2] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap0;
      mapArray1[3] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap2;
      mapArray1[4] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap2;
      mapArray1[5] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap2;
      mapArray1[6] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap3;
      mapArray1[7] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap2;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap4 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(mapArray1);
      mapArray0[5] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap4;
      HashMap<EmptyMapMutator<String, Object>, Integer> hashMap1 = new HashMap<EmptyMapMutator<String, Object>, Integer>();
      mapArray0[6] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap1;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap5 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>();
      mapArray0[7] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap5;
      HashMap<EmptyMapMutator<String, Object>, Integer> hashMap2 = new HashMap<EmptyMapMutator<String, Object>, Integer>();
      mapArray0[8] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap2;
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap6 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(mapArray0, emptyMapMutator0);
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap7 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(compositeMap6, mapArray1[4], emptyMapMutator0);
      // Undeclared exception!
      compositeMap7.keySet();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      compositeMap0.equals((Object) null);
      compositeMap0.isEmpty();
      Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray0 = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 5);
      HashMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      EmptyMapMutator<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap1 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0, hashMap0, emptyMapMutator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      compositeMap1.entrySet();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) null, "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(comparable0, abstractMap_SimpleImmutableEntry1);
      mapArray0[0] = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap1;
      Map.Entry.comparingByKey();
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap2 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap3 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      EmptyMapMutator<Integer, Object> emptyMapMutator1 = new EmptyMapMutator<Integer, Object>();
      compositeMap2.getOrDefault(emptyMapMutator1, (AbstractMap.SimpleImmutableEntry<Object, String>) null);
      mapArray0[2] = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap3;
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap4 = null;
      try {
        compositeMap4 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap1, mapArray0[2]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      compositeMap0.equals((Object) null);
      compositeMap0.isEmpty();
      Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray0 = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 5);
      HashMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      EmptyMapMutator<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap1 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0, hashMap0, emptyMapMutator0);
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      compositeMap1.entrySet();
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>((Integer) null, "");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      hashMap0.put(comparable0, abstractMap_SimpleImmutableEntry1);
      mapArray0[0] = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap1;
      Map.Entry.comparingByKey();
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap2 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      mapArray0[1] = (Map<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap2;
      CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap3 = null;
      try {
        compositeMap3 = new CompositeMap<Comparable<Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map<HashMap<String, String>, Object>[] mapArray0 = (Map<HashMap<String, String>, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<HashMap<String, String>, Object> compositeMap0 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      CompositeMap<HashMap<String, String>, Object> compositeMap1 = new CompositeMap<HashMap<String, String>, Object>(compositeMap0, compositeMap0);
      EmptyMapMutator<HashMap<String, String>, Object> emptyMapMutator0 = new EmptyMapMutator<HashMap<String, String>, Object>();
      CompositeMap<HashMap<String, String>, Object> compositeMap2 = new CompositeMap<HashMap<String, String>, Object>(compositeMap1, compositeMap1, emptyMapMutator0);
      mapArray0[0] = (Map<HashMap<String, String>, Object>) compositeMap2;
      CompositeMap<HashMap<String, String>, Object> compositeMap3 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      mapArray0[1] = (Map<HashMap<String, String>, Object>) compositeMap3;
      compositeMap3.mapIterator();
      mapArray0[2] = (Map<HashMap<String, String>, Object>) compositeMap1;
      CompositeMap<HashMap<String, String>, Object> compositeMap4 = new CompositeMap<HashMap<String, String>, Object>();
      mapArray0[3] = (Map<HashMap<String, String>, Object>) compositeMap4;
      compositeMap1.hashCode();
      CompositeMap<HashMap<String, String>, Object> compositeMap5 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap0.put(hashMap1, mapArray0[3]);
      compositeMap5.removeComposited(hashMap0);
      compositeMap5.values();
      compositeMap5.equals(compositeMap0);
      CompositeMap<HashMap<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap6 = new CompositeMap<HashMap<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>();
      compositeMap6.hashCode();
      Map<Integer, HashMap<Object, Object>>[] mapArray1 = null;
      CompositeMap.MapMutator<Integer, HashMap<Object, Object>> compositeMap_MapMutator0 = null;
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>[] mapArray2 = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>[]) Array.newInstance(Map.class, 9);
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap7 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(mapArray2);
      EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator1 = new EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap8 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(compositeMap7, compositeMap7, emptyMapMutator1);
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap9 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(compositeMap7, compositeMap8);
      mapArray2[0] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap9;
      EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator2 = new EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap10 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(mapArray2, emptyMapMutator2);
      mapArray2[1] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap10;
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap11 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      mapArray2[2] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap11;
      EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> emptyMapMutator3 = new EmptyMapMutator<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap12 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(mapArray2[1], compositeMap9, emptyMapMutator3);
      mapArray2[3] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap12;
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap13 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      mapArray2[4] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap13;
      HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap3 = new HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      mapArray2[5] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) hashMap3;
      HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap4 = new HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      mapArray2[6] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) hashMap4;
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap14 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(mapArray2[4], hashMap3, emptyMapMutator1);
      mapArray2[7] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) compositeMap14;
      HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> hashMap5 = new HashMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>();
      mapArray2[8] = (Map<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>) hashMap5;
      CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap15 = new CompositeMap<EntrySetToMapIteratorAdapter<Object, Object>, AbstractMap.SimpleEntry<Object, String>>(mapArray2);
      EntrySetToMapIteratorAdapter<Object, Object> entrySetToMapIteratorAdapter0 = (EntrySetToMapIteratorAdapter<Object, Object>) mock(EntrySetToMapIteratorAdapter.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, "Key collision adding Map to CompositeMap");
      // Undeclared exception!
      try { 
        compositeMap15.put(entrySetToMapIteratorAdapter0, abstractMap_SimpleEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>[] mapArray0 = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>[]) Array.newInstance(Map.class, 9);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0);
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> emptyMapMutator0 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap0, compositeMap0, emptyMapMutator0);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap1, compositeMap0, emptyMapMutator0);
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap2, compositeMap0, emptyMapMutator0);
      mapArray0[0] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap3;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap4 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0, emptyMapMutator0);
      mapArray0[1] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap4;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0);
      mapArray0[2] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap5;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap6 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0[2], mapArray0[2]);
      mapArray0[3] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap6;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap7 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0[0], mapArray0[0]);
      mapArray0[4] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap7;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap8 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      mapArray0[5] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap8;
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      mapArray0[6] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) hashMap0;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap9 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0[6], compositeMap0);
      mapArray0[7] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap9;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap10 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap11 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(compositeMap10, compositeMap1, emptyMapMutator0);
      mapArray0[8] = (Map<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>) compositeMap11;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> compositeMap12 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(mapArray0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      compositeMap12.remove((Object) abstractMap_SimpleEntry1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Map<Integer, HashMap<Object, String>>[] mapArray0 = (Map<Integer, HashMap<Object, String>>[]) Array.newInstance(Map.class, 5);
      HashMap<Integer, HashMap<Object, String>> hashMap0 = new HashMap<Integer, HashMap<Object, String>>();
      mapArray0[0] = (Map<Integer, HashMap<Object, String>>) hashMap0;
      EmptyMapMutator<Integer, HashMap<Object, String>> emptyMapMutator0 = new EmptyMapMutator<Integer, HashMap<Object, String>>();
      CompositeMap<Integer, HashMap<Object, String>> compositeMap0 = new CompositeMap<Integer, HashMap<Object, String>>(hashMap0, mapArray0[0], emptyMapMutator0);
      mapArray0[1] = (Map<Integer, HashMap<Object, String>>) compositeMap0;
      CompositeMap<Integer, HashMap<Object, String>> compositeMap1 = new CompositeMap<Integer, HashMap<Object, String>>(mapArray0);
      EmptyMapMutator<Integer, HashMap<Object, String>> emptyMapMutator1 = new EmptyMapMutator<Integer, HashMap<Object, String>>();
      CompositeMap<Integer, HashMap<Object, String>> compositeMap2 = new CompositeMap<Integer, HashMap<Object, String>>(compositeMap0, compositeMap1, emptyMapMutator1);
      mapArray0[2] = (Map<Integer, HashMap<Object, String>>) compositeMap2;
      CompositeMap<Integer, HashMap<Object, String>> compositeMap3 = new CompositeMap<Integer, HashMap<Object, String>>();
      mapArray0[3] = (Map<Integer, HashMap<Object, String>>) compositeMap3;
      CompositeMap<Integer, HashMap<Object, String>> compositeMap4 = new CompositeMap<Integer, HashMap<Object, String>>();
      mapArray0[4] = (Map<Integer, HashMap<Object, String>>) compositeMap4;
      compositeMap4.clear();
      Integer integer0 = new Integer(12);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      hashMap0.put(integer0, hashMap1);
      EmptyMapMutator<Integer, HashMap<Object, String>> emptyMapMutator2 = new EmptyMapMutator<Integer, HashMap<Object, String>>();
      CompositeMap<Integer, HashMap<Object, String>> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<Integer, HashMap<Object, String>>(mapArray0, emptyMapMutator2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Object> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, Object>();
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, Object> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, Object>(hashMap0, hashMap0, emptyMapMutator0);
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, Object> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, Object>(compositeMap0, compositeMap0, emptyMapMutator0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
      abstractMap_SimpleEntry0.setValue(emptyMapMutator0);
      compositeMap1.put(abstractMap_SimpleEntry0, "");
      compositeMap1.values();
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry1 = null;
      try {
        abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Object>((Map.Entry<? extends String, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 4);
      mapArray0[0] = (Map<String, Object>) compositeMap0;
      mapArray0[1] = (Map<String, Object>) compositeMap0;
      mapArray0[2] = (Map<String, Object>) compositeMap0;
      mapArray0[3] = (Map<String, Object>) compositeMap0;
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>(mapArray0[2], mapArray0[3]);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(4, mapArray0.length);
      
      compositeMap0.addComposited(compositeMap1);
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertEquals(4, mapArray0.length);
      
      compositeMap0.entrySet();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, HashMap<Object, Integer>> hashMap0 = new HashMap<Integer, HashMap<Object, Integer>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EmptyMapMutator<Integer, HashMap<Object, Integer>> emptyMapMutator0 = new EmptyMapMutator<Integer, HashMap<Object, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      assertNotNull(emptyMapMutator1);
      
      Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>[]) Array.newInstance(Map.class, 7);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      mapArray0[0] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) hashMap1;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      mapArray0[1] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) compositeMap0;
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray0[2] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) hashMap2;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(mapArray0, emptyMapMutator1);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(7, mapArray0.length);
      
      mapArray0[3] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) compositeMap1;
      HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> hashMap3 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(hashMap3.equals((Object)hashMap1));
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertNotNull(hashMap3);
      
      mapArray0[4] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) hashMap3;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap2 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(compositeMap0, hashMap1, emptyMapMutator1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap3));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      mapArray0[5] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) compositeMap2;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap3 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(mapArray0[5], compositeMap2, emptyMapMutator1);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(hashMap1.equals((Object)hashMap3));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(7, mapArray0.length);
      
      mapArray0[6] = (Map<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>) compositeMap3;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap4 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(mapArray0, emptyMapMutator1);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertNotNull(compositeMap4);
      assertEquals(7, mapArray0.length);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> compositeMap5 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>(compositeMap4, compositeMap4);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray0.length);
      
      Object object0 = emptyMapMutator1.put(compositeMap5, mapArray0, (AbstractMap.SimpleImmutableEntry<String, Integer>) null, compositeMap2);
      assertEquals(5, compositeMap4.size());
      assertFalse(compositeMap4.isEmpty());
      assertEquals(10, compositeMap5.size());
      assertFalse(compositeMap5.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertFalse(compositeMap2.isEmpty());
      assertEquals(1, compositeMap2.size());
      assertNotSame(compositeMap4, compositeMap0);
      assertNotSame(compositeMap4, compositeMap3);
      assertNotSame(compositeMap4, compositeMap5);
      assertNotSame(compositeMap4, compositeMap2);
      assertNotSame(compositeMap4, compositeMap1);
      assertNotSame(compositeMap5, compositeMap1);
      assertNotSame(compositeMap5, compositeMap2);
      assertNotSame(compositeMap5, compositeMap4);
      assertNotSame(compositeMap5, compositeMap0);
      assertNotSame(compositeMap5, compositeMap3);
      assertNotSame(hashMap1, hashMap3);
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(compositeMap0, compositeMap5);
      assertNotSame(compositeMap0, compositeMap3);
      assertNotSame(compositeMap0, compositeMap2);
      assertNotSame(compositeMap0, compositeMap4);
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap2, compositeMap4);
      assertNotSame(compositeMap2, compositeMap0);
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap5);
      assertFalse(hashMap1.equals((Object)hashMap3));
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertNull(object0);
      assertEquals(7, mapArray0.length);
      
      Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray1 = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 8);
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap6 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertNotNull(compositeMap6);
      
      mapArray1[0] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap6;
      HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap4 = new HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, hashMap4.size());
      assertTrue(hashMap4.isEmpty());
      assertNotNull(hashMap4);
      
      mapArray1[1] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap4;
      HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap5 = new HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, hashMap5.size());
      assertTrue(hashMap5.isEmpty());
      assertTrue(hashMap5.equals((Object)hashMap4));
      assertNotNull(hashMap5);
      
      mapArray1[2] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap5;
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap7 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertNotNull(compositeMap7);
      
      mapArray1[3] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap7;
      HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap6 = new HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, hashMap6.size());
      assertTrue(hashMap6.isEmpty());
      assertTrue(hashMap6.equals((Object)hashMap5));
      assertTrue(hashMap6.equals((Object)hashMap4));
      assertNotNull(hashMap6);
      
      mapArray1[4] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap6;
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap8 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertNotNull(compositeMap8);
      
      mapArray1[5] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap8;
      EmptyMapMutator<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator2 = new EmptyMapMutator<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(emptyMapMutator2);
      
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap9 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray1, emptyMapMutator2);
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap6));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertNotNull(compositeMap9);
      assertEquals(8, mapArray1.length);
      
      mapArray1[6] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap9;
      HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap7 = new HashMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, hashMap7.size());
      assertTrue(hashMap7.isEmpty());
      assertTrue(hashMap7.equals((Object)hashMap5));
      assertTrue(hashMap7.equals((Object)hashMap4));
      assertTrue(hashMap7.equals((Object)hashMap6));
      assertNotNull(hashMap7);
      
      mapArray1[7] = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap7;
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap10 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray1);
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.isEmpty());
      assertTrue(compositeMap10.equals((Object)compositeMap7));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap6));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertNotNull(compositeMap10);
      assertEquals(8, mapArray1.length);
      
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap11 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap10, hashMap5, emptyMapMutator2);
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.isEmpty());
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertEquals(0, hashMap5.size());
      assertTrue(hashMap5.isEmpty());
      assertTrue(compositeMap10.equals((Object)compositeMap7));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap6));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap6));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap7));
      assertTrue(hashMap5.equals((Object)hashMap7));
      assertTrue(hashMap5.equals((Object)hashMap6));
      assertTrue(hashMap5.equals((Object)hashMap4));
      assertNotNull(compositeMap11);
      assertEquals(8, mapArray1.length);
      
      compositeMap11.putAll(mapArray1[4]);
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.isEmpty());
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertEquals(0, hashMap5.size());
      assertTrue(hashMap5.isEmpty());
      assertNotSame(compositeMap10, compositeMap8);
      assertNotSame(compositeMap10, compositeMap6);
      assertNotSame(compositeMap10, compositeMap7);
      assertNotSame(compositeMap10, compositeMap11);
      assertNotSame(compositeMap10, compositeMap9);
      assertNotSame(compositeMap11, compositeMap7);
      assertNotSame(compositeMap11, compositeMap6);
      assertNotSame(compositeMap11, compositeMap8);
      assertNotSame(compositeMap11, compositeMap9);
      assertNotSame(compositeMap11, compositeMap10);
      assertNotSame(hashMap5, hashMap4);
      assertNotSame(hashMap5, hashMap6);
      assertNotSame(hashMap5, hashMap7);
      assertTrue(compositeMap10.equals((Object)compositeMap11));
      assertTrue(compositeMap10.equals((Object)compositeMap7));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap6));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap6));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap7));
      assertTrue(hashMap5.equals((Object)hashMap7));
      assertTrue(hashMap5.equals((Object)hashMap6));
      assertTrue(hashMap5.equals((Object)hashMap4));
      assertEquals(8, mapArray1.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<EmptyMapMutator<String, Object>, Integer> hashMap0 = new HashMap<EmptyMapMutator<String, Object>, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap0 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      EmptyMapMutator<EmptyMapMutator<String, Object>, Integer> emptyMapMutator0 = new EmptyMapMutator<EmptyMapMutator<String, Object>, Integer>();
      assertNotNull(emptyMapMutator0);
      
      Map<EmptyMapMutator<String, Object>, Integer>[] mapArray0 = (Map<EmptyMapMutator<String, Object>, Integer>[]) Array.newInstance(Map.class, 9);
      mapArray0[0] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      mapArray0[1] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap0;
      Integer integer0 = new Integer((-1104));
      assertEquals((-1104), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put((EmptyMapMutator<String, Object>) null, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      mapArray0[2] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      mapArray0[3] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      mapArray0[4] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      mapArray0[5] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      mapArray0[6] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap0;
      mapArray0[7] = (Map<EmptyMapMutator<String, Object>, Integer>) compositeMap0;
      mapArray0[8] = (Map<EmptyMapMutator<String, Object>, Integer>) hashMap0;
      emptyMapMutator0.putAll(compositeMap0, mapArray0, mapArray0[0]);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(compositeMap0.isEmpty());
      assertEquals(2, compositeMap0.size());
      assertEquals(9, mapArray0.length);
      
      CompositeMap<EmptyMapMutator<String, Object>, Integer> compositeMap1 = null;
      try {
        compositeMap1 = new CompositeMap<EmptyMapMutator<String, Object>, Integer>(compositeMap0, compositeMap0, emptyMapMutator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 8);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<Object, String>) hashMap0;
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>(hashMap0, mapArray0[0]);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(8, mapArray0.length);
      
      mapArray0[1] = (Map<Object, String>) compositeMap0;
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(mapArray0[1], mapArray0[1], emptyMapMutator0);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(8, mapArray0.length);
      
      mapArray0[2] = (Map<Object, String>) compositeMap1;
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(hashMap0, mapArray0[1]);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      assertEquals(8, mapArray0.length);
      
      mapArray0[3] = (Map<Object, String>) compositeMap2;
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>(compositeMap2, compositeMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(8, mapArray0.length);
      
      mapArray0[4] = (Map<Object, String>) compositeMap3;
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[5] = (Map<Object, String>) hashMap1;
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray0[6] = (Map<Object, String>) hashMap2;
      CompositeMap<Object, String> compositeMap4 = new CompositeMap<Object, String>(mapArray0[5], mapArray0[0], emptyMapMutator0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      assertEquals(8, mapArray0.length);
      
      mapArray0[7] = (Map<Object, String>) compositeMap4;
      CompositeMap<Object, String> compositeMap5 = new CompositeMap<Object, String>(mapArray0);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(8, mapArray0.length);
      
      CompositeMap<Object, String> compositeMap6 = new CompositeMap<Object, String>(compositeMap5, mapArray0[0]);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertNotNull(compositeMap6);
      assertEquals(8, mapArray0.length);
      
      EmptyMapMutator<Object, String> emptyMapMutator1 = new EmptyMapMutator<Object, String>();
      assertFalse(emptyMapMutator1.equals((Object)emptyMapMutator0));
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<Object, String> compositeMap7 = new CompositeMap<Object, String>(compositeMap6, compositeMap4, emptyMapMutator1);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap6));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap5));
      assertTrue(compositeMap5.equals((Object)compositeMap6));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertFalse(emptyMapMutator1.equals((Object)emptyMapMutator0));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap0));
      assertTrue(compositeMap7.equals((Object)compositeMap1));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertFalse(emptyMapMutator0.equals((Object)emptyMapMutator1));
      assertNotNull(compositeMap7);
      assertEquals(8, mapArray0.length);
      
      EmptyMapMutator<String, Object> emptyMapMutator2 = new EmptyMapMutator<String, Object>();
      assertNotNull(emptyMapMutator2);
      
      String string0 = compositeMap7.put(emptyMapMutator2, "");
      assertFalse(compositeMap4.isEmpty());
      assertEquals(1, compositeMap4.size());
      assertEquals(16, compositeMap5.size());
      assertFalse(compositeMap5.isEmpty());
      assertEquals(17, compositeMap6.size());
      assertFalse(compositeMap6.isEmpty());
      assertFalse(compositeMap7.isEmpty());
      assertEquals(18, compositeMap7.size());
      assertNotSame(compositeMap4, compositeMap7);
      assertNotSame(compositeMap4, compositeMap1);
      assertNotSame(compositeMap4, compositeMap3);
      assertNotSame(compositeMap4, compositeMap5);
      assertNotSame(compositeMap4, compositeMap2);
      assertNotSame(compositeMap4, compositeMap6);
      assertNotSame(compositeMap4, compositeMap0);
      assertNotSame(compositeMap5, compositeMap1);
      assertNotSame(compositeMap5, compositeMap7);
      assertNotSame(compositeMap5, compositeMap0);
      assertNotSame(compositeMap5, compositeMap6);
      assertNotSame(compositeMap5, compositeMap2);
      assertNotSame(compositeMap5, compositeMap4);
      assertNotSame(compositeMap5, compositeMap3);
      assertNotSame(compositeMap6, compositeMap2);
      assertNotSame(compositeMap6, compositeMap5);
      assertNotSame(compositeMap6, compositeMap4);
      assertNotSame(compositeMap6, compositeMap3);
      assertNotSame(compositeMap6, compositeMap0);
      assertNotSame(compositeMap6, compositeMap7);
      assertNotSame(compositeMap6, compositeMap1);
      assertNotSame(emptyMapMutator1, emptyMapMutator0);
      assertNotSame(compositeMap7, compositeMap2);
      assertNotSame(compositeMap7, compositeMap3);
      assertNotSame(compositeMap7, compositeMap5);
      assertNotSame(compositeMap7, compositeMap4);
      assertNotSame(compositeMap7, compositeMap0);
      assertNotSame(compositeMap7, compositeMap1);
      assertNotSame(compositeMap7, compositeMap6);
      assertNotSame(emptyMapMutator0, emptyMapMutator1);
      assertFalse(emptyMapMutator1.equals((Object)emptyMapMutator0));
      assertFalse(emptyMapMutator0.equals((Object)emptyMapMutator1));
      assertNull(string0);
      assertEquals(8, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyMapMutator<Object, Integer> emptyMapMutator0 = new EmptyMapMutator<Object, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Integer> compositeMap0 = new CompositeMap<Object, Integer>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<Object, Integer> compositeMap1 = new CompositeMap<Object, Integer>(compositeMap0, compositeMap0, emptyMapMutator0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      emptyMapMutator0.resolveCollision(compositeMap1, compositeMap1, compositeMap0, linkedList0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, linkedList0.size());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      
      Map<HashMap<Object, Object>, String>[] mapArray0 = (Map<HashMap<Object, Object>, String>[]) Array.newInstance(Map.class, 6);
      HashMap<HashMap<Object, Object>, String> hashMap0 = new HashMap<HashMap<Object, Object>, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<HashMap<Object, Object>, String>) hashMap0;
      HashMap<HashMap<Object, Object>, String> hashMap1 = new HashMap<HashMap<Object, Object>, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CompositeMap<HashMap<Object, Object>, String> compositeMap2 = new CompositeMap<HashMap<Object, Object>, String>(hashMap1, mapArray0[0]);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(compositeMap2);
      assertEquals(6, mapArray0.length);
      
      mapArray0[1] = (Map<HashMap<Object, Object>, String>) compositeMap2;
      CompositeMap<HashMap<Object, Object>, String> compositeMap3 = new CompositeMap<HashMap<Object, Object>, String>();
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      
      mapArray0[2] = (Map<HashMap<Object, Object>, String>) compositeMap3;
      HashMap<HashMap<Object, Object>, String> hashMap2 = new HashMap<HashMap<Object, Object>, String>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertNotNull(hashMap2);
      
      mapArray0[3] = (Map<HashMap<Object, Object>, String>) hashMap2;
      HashMap<HashMap<Object, Object>, String> hashMap3 = new HashMap<HashMap<Object, Object>, String>();
      assertTrue(hashMap3.isEmpty());
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.equals((Object)hashMap1));
      assertTrue(hashMap3.equals((Object)hashMap0));
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertNotNull(hashMap3);
      
      mapArray0[4] = (Map<HashMap<Object, Object>, String>) hashMap3;
      CompositeMap<HashMap<Object, Object>, String> compositeMap4 = new CompositeMap<HashMap<Object, Object>, String>(mapArray0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(6, mapArray0.length);
      
      HashMap<Object, Object> hashMap4 = new HashMap<Object, Object>();
      assertTrue(hashMap4.isEmpty());
      assertEquals(0, hashMap4.size());
      assertNotNull(hashMap4);
      
      String string0 = hashMap3.put(hashMap4, "Iterator must not be null");
      assertTrue(hashMap4.isEmpty());
      assertEquals(0, hashMap4.size());
      assertEquals(1, hashMap3.size());
      assertFalse(hashMap3.isEmpty());
      assertNotSame(hashMap3, hashMap2);
      assertNotSame(hashMap3, hashMap0);
      assertNotSame(hashMap3, hashMap1);
      assertFalse(hashMap3.equals((Object)hashMap2));
      assertFalse(hashMap3.equals((Object)hashMap0));
      assertFalse(hashMap3.equals((Object)hashMap1));
      assertNull(string0);
      
      mapArray0[5] = (Map<HashMap<Object, Object>, String>) compositeMap4;
      CompositeMap<HashMap<Object, Object>, String> compositeMap5 = null;
      try {
        compositeMap5 = new CompositeMap<HashMap<Object, Object>, String>(mapArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 7);
      EmptyMapMutator<Object, Object> emptyMapMutator0 = new EmptyMapMutator<Object, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(7, mapArray0.length);
      
      mapArray0[0] = (Map<Object, Object>) compositeMap0;
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(mapArray0[0], compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(7, mapArray0.length);
      
      mapArray0[1] = (Map<Object, Object>) compositeMap1;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      mapArray0[2] = (Map<Object, Object>) hashMap0;
      CompositeMap<Object, Object> compositeMap2 = new CompositeMap<Object, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      assertEquals(7, mapArray0.length);
      
      mapArray0[3] = (Map<Object, Object>) compositeMap2;
      CompositeMap<Object, Object> compositeMap3 = new CompositeMap<Object, Object>(mapArray0[3], mapArray0[1]);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(7, mapArray0.length);
      
      mapArray0[4] = (Map<Object, Object>) compositeMap3;
      CompositeMap<Object, Object> compositeMap4 = new CompositeMap<Object, Object>(mapArray0[1], mapArray0[4]);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      assertEquals(7, mapArray0.length);
      
      mapArray0[5] = (Map<Object, Object>) compositeMap4;
      CompositeMap<Object, Object> compositeMap5 = new CompositeMap<Object, Object>(mapArray0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray0.length);
      
      mapArray0[6] = (Map<Object, Object>) compositeMap5;
      CompositeMap<Object, Object> compositeMap6 = new CompositeMap<Object, Object>(mapArray0);
      CompositeMap<Object, Object> compositeMap7 = new CompositeMap<Object, Object>(compositeMap6, mapArray0[4]);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeMap<String, String> compositeMap0 = new CompositeMap<String, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      compositeMap0.forEach(biConsumer0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      
      CompositeMap<String, String> compositeMap1 = new CompositeMap<String, String>(compositeMap0, compositeMap0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      boolean boolean0 = compositeMap1.containsKey(compositeMap0);
      assertFalse(boolean0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      assertNotNull(emptyMapMutator0);
      
      Object object0 = hashMap0.put("X.ewA,BzP#zm1'4", "X.ewA,BzP#zm1'4");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      CompositeMap<String, Object> compositeMap2 = new CompositeMap<String, Object>(hashMap0, hashMap0, emptyMapMutator0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, compositeMap2.size());
      assertFalse(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      
      Integer integer0 = new Integer((-926));
      assertEquals((-926), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-320));
      assertEquals((-320), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = compositeMap2.getOrDefault(integer0, integer1);
      assertEquals((-320), object1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, compositeMap2.size());
      assertFalse(compositeMap2.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(object1.equals((Object)integer0));
      assertNotNull(object1);
      
      int int0 = compositeMap2.size();
      assertEquals(2, int0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, compositeMap2.size());
      assertFalse(compositeMap2.isEmpty());
      
      Collection<String> collection0 = compositeMap1.values();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertFalse(collection0.contains("X.ewA,BzP#zm1'4"));
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(collection0);
      
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>();
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertNotNull(compositeMap3);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      String string0 = compositeMap3.get(object2);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>(hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Set<String> set0 = compositeMap0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 8);
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(mapArray0, (CompositeMap.MapMutator<Object, String>) null);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      assertEquals(8, mapArray0.length);
      
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(compositeMap1, compositeMap1, emptyMapMutator0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(8, mapArray0.length);
      
      mapArray0[0] = (Map<Object, String>) compositeMap2;
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>(compositeMap1, compositeMap1, emptyMapMutator0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(8, mapArray0.length);
      
      mapArray0[1] = (Map<Object, String>) compositeMap3;
      CompositeMap<Object, String> compositeMap4 = new CompositeMap<Object, String>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(8, mapArray0.length);
      
      mapArray0[2] = (Map<Object, String>) compositeMap4;
      CompositeMap<Object, String> compositeMap5 = new CompositeMap<Object, String>(mapArray0, (CompositeMap.MapMutator<Object, String>) null);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertNotNull(compositeMap5);
      assertEquals(8, mapArray0.length);
      
      mapArray0[3] = (Map<Object, String>) compositeMap5;
      CompositeMap<Object, String> compositeMap6 = new CompositeMap<Object, String>(mapArray0);
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertNotNull(compositeMap6);
      assertEquals(8, mapArray0.length);
      
      CompositeMap<Object, String> compositeMap7 = new CompositeMap<Object, String>(mapArray0, emptyMapMutator0);
      mapArray0[5] = (Map<Object, String>) compositeMap7;
      CompositeMap<Object, String> compositeMap8 = new CompositeMap<Object, String>(compositeMap5, mapArray0[1], emptyMapMutator0);
      mapArray0[6] = (Map<Object, String>) compositeMap8;
      CompositeMap<Object, String> compositeMap9 = new CompositeMap<Object, String>();
      mapArray0[7] = (Map<Object, String>) compositeMap9;
      CompositeMap<Object, String> compositeMap10 = new CompositeMap<Object, String>(mapArray0);
      CompositeMap<Object, String> compositeMap11 = new CompositeMap<Object, String>(compositeMap10, compositeMap10, (CompositeMap.MapMutator<Object, String>) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CompositeMap<String, String> compositeMap0 = new CompositeMap<String, String>((Map<String, String>) null, (Map<String, String>) null);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>[]) Array.newInstance(Map.class, 2);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      mapArray0[0] = (Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>) compositeMap1;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> compositeMap2 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>(compositeMap1, compositeMap1);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      mapArray0[1] = (Map<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>) compositeMap2;
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      assertNotNull(emptyMapMutator0);
      
      Integer integer0 = new Integer(2122);
      assertEquals(2122, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2122);
      assertEquals(2122, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Integer>(integer0, integer1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Map<Integer, HashMap<String, String>>[] mapArray1 = (Map<Integer, HashMap<String, String>>[]) Array.newInstance(Map.class, 8);
      HashMap<Integer, HashMap<String, String>> hashMap0 = new HashMap<Integer, HashMap<String, String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray1[0] = (Map<Integer, HashMap<String, String>>) hashMap0;
      CompositeMap<Integer, HashMap<String, String>> compositeMap3 = new CompositeMap<Integer, HashMap<String, String>>(mapArray1);
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertNotNull(compositeMap3);
      assertEquals(8, mapArray1.length);
      
      mapArray1[1] = (Map<Integer, HashMap<String, String>>) compositeMap3;
      HashMap<Integer, HashMap<String, String>> hashMap1 = new HashMap<Integer, HashMap<String, String>>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CompositeMap<Integer, HashMap<String, String>> compositeMap4 = new CompositeMap<Integer, HashMap<String, String>>(hashMap1, compositeMap3);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      assertEquals(8, mapArray1.length);
      
      mapArray1[2] = (Map<Integer, HashMap<String, String>>) compositeMap4;
      CompositeMap<Integer, HashMap<String, String>> compositeMap5 = new CompositeMap<Integer, HashMap<String, String>>();
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertNotNull(compositeMap5);
      
      mapArray1[3] = (Map<Integer, HashMap<String, String>>) compositeMap5;
      CompositeMap<Integer, HashMap<String, String>> compositeMap6 = new CompositeMap<Integer, HashMap<String, String>>();
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertNotNull(compositeMap6);
      
      EmptyMapMutator<Integer, HashMap<String, String>> emptyMapMutator1 = new EmptyMapMutator<Integer, HashMap<String, String>>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<Integer, HashMap<String, String>> compositeMap7 = new CompositeMap<Integer, HashMap<String, String>>(compositeMap6, mapArray1[1], emptyMapMutator1);
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertNotNull(compositeMap7);
      assertEquals(8, mapArray1.length);
      
      mapArray1[4] = (Map<Integer, HashMap<String, String>>) compositeMap7;
      CompositeMap<Integer, HashMap<String, String>> compositeMap8 = new CompositeMap<Integer, HashMap<String, String>>(hashMap0, hashMap0);
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap8.equals((Object)compositeMap4));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap3));
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotNull(compositeMap8);
      
      mapArray1[5] = (Map<Integer, HashMap<String, String>>) compositeMap8;
      CompositeMap<Integer, HashMap<String, String>> compositeMap9 = new CompositeMap<Integer, HashMap<String, String>>(mapArray1, emptyMapMutator1);
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap6));
      assertTrue(compositeMap9.equals((Object)compositeMap3));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap4));
      assertTrue(compositeMap9.equals((Object)compositeMap5));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertNotNull(compositeMap9);
      assertEquals(8, mapArray1.length);
      
      mapArray1[6] = (Map<Integer, HashMap<String, String>>) compositeMap9;
      CompositeMap<Integer, HashMap<String, String>> compositeMap10 = new CompositeMap<Integer, HashMap<String, String>>(mapArray1);
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap4));
      assertTrue(compositeMap10.equals((Object)compositeMap7));
      assertTrue(compositeMap10.equals((Object)compositeMap5));
      assertTrue(compositeMap10.equals((Object)compositeMap3));
      assertNotNull(compositeMap10);
      assertEquals(8, mapArray1.length);
      
      mapArray1[7] = (Map<Integer, HashMap<String, String>>) compositeMap10;
      CompositeMap<Integer, HashMap<String, String>> compositeMap11 = new CompositeMap<Integer, HashMap<String, String>>(mapArray1, emptyMapMutator1);
      // Undeclared exception!
      compositeMap11.get(mapArray1[4]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "C)pxt;jc/");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>(hashMap0, hashMap0, emptyMapMutator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, compositeMap0.size());
      assertFalse(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      // Undeclared exception!
      try { 
        compositeMap0.keySet();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      String string0 = compositeMap0.compute(integer0, biFunction0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNull(string0);
      
      Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray0 = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 6);
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator0 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap1, compositeMap1, emptyMapMutator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      mapArray0[0] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap2;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      
      mapArray0[1] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap3;
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[2] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap1;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap4 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap3, compositeMap2, emptyMapMutator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap3));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      
      compositeMap4.setMutator(emptyMapMutator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(compositeMap1, compositeMap2);
      assertNotSame(compositeMap1, compositeMap4);
      assertNotSame(compositeMap1, compositeMap3);
      assertNotSame(compositeMap2, compositeMap4);
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap4);
      assertNotSame(compositeMap3, compositeMap1);
      assertNotSame(compositeMap4, compositeMap1);
      assertNotSame(compositeMap4, compositeMap2);
      assertNotSame(compositeMap4, compositeMap3);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap4));
      assertTrue(compositeMap1.equals((Object)compositeMap3));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap2.equals((Object)compositeMap4));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      
      mapArray0[3] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap4;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertNotNull(compositeMap5);
      assertEquals(6, mapArray0.length);
      
      mapArray0[4] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap5;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap6 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertNotNull(compositeMap6);
      assertEquals(6, mapArray0.length);
      
      mapArray0[5] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap6;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap7 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertNotNull(compositeMap7);
      assertEquals(6, mapArray0.length);
      
      // Undeclared exception!
      compositeMap7.equals(mapArray0[5]);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Map<HashMap<Object, Integer>, Object>[] mapArray0 = (Map<HashMap<Object, Integer>, Object>[]) Array.newInstance(Map.class, 2);
      HashMap<HashMap<Object, Integer>, Object> hashMap0 = new HashMap<HashMap<Object, Integer>, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Integer integer0 = new Integer(1046);
      assertEquals(1046, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap1.put("", integer0);
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(integer1);
      
      Object object0 = hashMap0.put(hashMap1, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(object0);
      
      mapArray0[0] = (Map<HashMap<Object, Integer>, Object>) hashMap0;
      HashMap hashMap2 = (HashMap)hashMap0.put(hashMap1, (Object) null);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap2.isEmpty());
      assertEquals(1, hashMap2.size());
      assertNotNull(hashMap2);
      
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<HashMap<Object, Integer>, Object>(hashMap0, mapArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Integer> hashMap0 = new HashMap<HashMap<String, Integer>, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(hashMap1, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNull(integer1);
      
      EmptyMapMutator<HashMap<String, Integer>, Integer> emptyMapMutator0 = new EmptyMapMutator<HashMap<String, Integer>, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<HashMap<String, Integer>, Integer> compositeMap0 = new CompositeMap<HashMap<String, Integer>, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2, compositeMap0.size());
      assertFalse(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Map<HashMap<Object, Integer>, Object>[] mapArray0 = (Map<HashMap<Object, Integer>, Object>[]) Array.newInstance(Map.class, 3);
      EmptyMapMutator<HashMap<Object, Integer>, Object> emptyMapMutator1 = new EmptyMapMutator<HashMap<Object, Integer>, Object>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap1 = new CompositeMap<HashMap<Object, Integer>, Object>(mapArray0, emptyMapMutator1);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotNull(compositeMap1);
      assertEquals(3, mapArray0.length);
      
      mapArray0[0] = (Map<HashMap<Object, Integer>, Object>) compositeMap1;
      HashMap<HashMap<Object, Integer>, Object> hashMap2 = new HashMap<HashMap<Object, Integer>, Object>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertNotNull(hashMap2);
      
      HashMap<HashMap<Object, Integer>, Object> hashMap3 = new HashMap<HashMap<Object, Integer>, Object>();
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertNotNull(hashMap3);
      
      mapArray0[2] = (Map<HashMap<Object, Integer>, Object>) hashMap3;
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap2 = new CompositeMap<HashMap<Object, Integer>, Object>(mapArray0);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(3, mapArray0.length);
      
      CompositeMap<Integer, Object> compositeMap3 = new CompositeMap<Integer, Object>();
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertNotNull(compositeMap3);
      
      CompositeMap<Integer, Object> compositeMap4 = new CompositeMap<Integer, Object>(compositeMap3, compositeMap3);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      
      Map<Integer, Object> map0 = compositeMap3.removeComposited(compositeMap4);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertNotSame(compositeMap3, compositeMap4);
      assertNotSame(compositeMap4, compositeMap3);
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>[]) Array.newInstance(Map.class, 2);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) hashMap0;
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) hashMap1;
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      Integer integer0 = new Integer((-2665));
      assertEquals((-2665), (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(hashMap0, integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(abstractMap_SimpleImmutableEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      Integer integer1 = new Integer((-2665));
      assertEquals((-2665), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      AbstractMap.SimpleEntry<Integer, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Integer>(integer1, integer2);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Integer>(abstractMap_SimpleEntry1);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Integer, Integer> abstractMap_SimpleImmutableEntry2 = emptyMapMutator0.put((CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>) null, mapArray0, abstractMap_SimpleEntry0, abstractMap_SimpleImmutableEntry1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNull(abstractMap_SimpleImmutableEntry2);
      assertEquals(2, mapArray0.length);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Integer>>(mapArray0, emptyMapMutator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CompositeMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap0 = new CompositeMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      CompositeMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap1 = new CompositeMap<HashMap<String, Object>, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap0, compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      compositeMap1.addComposited(compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      
      Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<String, Object>, HashMap<String, String>>(mapArray0, emptyMapMutator0);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      assertEquals(0, mapArray0.length);
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, (Object) null);
      assertNotNull(abstractMap_SimpleEntry0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put((String) null, (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        compositeMap2.put(abstractMap_SimpleEntry0, hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Map<Object, Integer>[] mapArray0 = (Map<Object, Integer>[]) Array.newInstance(Map.class, 7);
      CompositeMap<Object, Integer> compositeMap0 = new CompositeMap<Object, Integer>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      mapArray0[0] = (Map<Object, Integer>) compositeMap0;
      CompositeMap<Object, Integer> compositeMap1 = new CompositeMap<Object, Integer>();
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[1] = (Map<Object, Integer>) compositeMap1;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      mapArray0[2] = (Map<Object, Integer>) hashMap0;
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CompositeMap<Object, Integer> compositeMap2 = new CompositeMap<Object, Integer>(hashMap1, compositeMap1);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      
      mapArray0[3] = (Map<Object, Integer>) compositeMap2;
      CompositeMap<Object, Integer> compositeMap3 = new CompositeMap<Object, Integer>((Map<Object, Integer>) null, compositeMap2);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      
      mapArray0[4] = (Map<Object, Integer>) compositeMap3;
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertNotNull(hashMap2);
      
      mapArray0[5] = (Map<Object, Integer>) hashMap2;
      CompositeMap<Object, Integer> compositeMap4 = new CompositeMap<Object, Integer>(mapArray0);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertNotNull(compositeMap4);
      assertEquals(7, mapArray0.length);
      
      mapArray0[6] = (Map<Object, Integer>) compositeMap4;
      EmptyMapMutator<Object, Integer> emptyMapMutator0 = new EmptyMapMutator<Object, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Integer> compositeMap5 = new CompositeMap<Object, Integer>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray0.length);
      
      CompositeMap<Object, Integer> compositeMap6 = new CompositeMap<Object, Integer>(compositeMap5, compositeMap4, emptyMapMutator0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap5));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertNotNull(compositeMap6);
      assertEquals(7, mapArray0.length);
      
      // Undeclared exception!
      try { 
        compositeMap6.putAll(mapArray0[4]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 2);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<String, Object>) hashMap0;
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(2, mapArray0.length);
      
      mapArray0[1] = (Map<String, Object>) compositeMap0;
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(2, mapArray0.length);
      
      boolean boolean0 = compositeMap1.containsValue("");
      assertFalse(boolean0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertEquals(2, mapArray0.length);
      
      Map<Integer, Object>[] mapArray1 = (Map<Integer, Object>[]) Array.newInstance(Map.class, 7);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      mapArray1[0] = (Map<Integer, Object>) hashMap1;
      EmptyMapMutator<Integer, Object> emptyMapMutator1 = new EmptyMapMutator<Integer, Object>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<Integer, Object> compositeMap2 = new CompositeMap<Integer, Object>(mapArray1, emptyMapMutator1);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertNotNull(compositeMap2);
      assertEquals(7, mapArray1.length);
      
      mapArray1[1] = (Map<Integer, Object>) compositeMap2;
      CompositeMap<Integer, Object> compositeMap3 = new CompositeMap<Integer, Object>(compositeMap2, compositeMap2, emptyMapMutator1);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(7, mapArray1.length);
      
      mapArray1[2] = (Map<Integer, Object>) compositeMap3;
      CompositeMap<Integer, Object> compositeMap4 = new CompositeMap<Integer, Object>(mapArray1, emptyMapMutator1);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      assertEquals(7, mapArray1.length);
      
      mapArray1[3] = (Map<Integer, Object>) compositeMap4;
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray1[4] = (Map<Integer, Object>) hashMap2;
      EmptyMapMutator<Integer, Object> emptyMapMutator2 = new EmptyMapMutator<Integer, Object>();
      assertFalse(emptyMapMutator2.equals((Object)emptyMapMutator1));
      assertNotNull(emptyMapMutator2);
      
      CompositeMap<Integer, Object> compositeMap5 = new CompositeMap<Integer, Object>(compositeMap4, mapArray1[1], emptyMapMutator2);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertFalse(emptyMapMutator2.equals((Object)emptyMapMutator1));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertFalse(emptyMapMutator1.equals((Object)emptyMapMutator2));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray1.length);
      
      mapArray1[5] = (Map<Integer, Object>) compositeMap5;
      CompositeMap<Integer, Object> compositeMap6 = new CompositeMap<Integer, Object>(mapArray1);
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertNotNull(compositeMap6);
      assertEquals(7, mapArray1.length);
      
      mapArray1[6] = (Map<Integer, Object>) compositeMap6;
      CompositeMap<Integer, Object> compositeMap7 = new CompositeMap<Integer, Object>(mapArray1);
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.isEmpty());
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertNotNull(compositeMap7);
      assertEquals(7, mapArray1.length);
      
      // Undeclared exception!
      compositeMap7.hashCode();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompositeMap<String, String> compositeMap0 = new CompositeMap<String, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      // Undeclared exception!
      try { 
        compositeMap0.put("org.apache.commons.collections4.map.EmptyMapMutator", "org.apache.commons.collections4.map.EmptyMapMutator");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CompositeMap<Object, Integer> compositeMap0 = new CompositeMap<Object, Integer>((Map<Object, Integer>) null, (Map<Object, Integer>) null);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      // Undeclared exception!
      try { 
        compositeMap1.computeIfAbsent("AOLol,Nc", unaryOperator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 0);
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(0, mapArray0.length);
      
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(compositeMap0, compositeMap0, (CompositeMap.MapMutator<String, Integer>) null);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(0, mapArray0.length);
      
      Map<String, String>[] mapArray1 = (Map<String, String>[]) Array.newInstance(Map.class, 1);
      CompositeMap<String, String> compositeMap2 = new CompositeMap<String, String>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      
      mapArray1[0] = (Map<String, String>) compositeMap2;
      CompositeMap<String, String> compositeMap3 = new CompositeMap<String, String>(mapArray1);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(1, mapArray1.length);
      
      boolean boolean0 = compositeMap3.replace((String) null, "org.apache.commons.collections4.map.CompositeMap", (String) null);
      assertFalse(boolean0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertNotSame(compositeMap3, compositeMap2);
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertEquals(1, mapArray1.length);
      
      CompositeMap<String, String> compositeMap4 = new CompositeMap<String, String>(compositeMap3, compositeMap3);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(1, mapArray1.length);
      
      compositeMap4.addComposited((Map<String, String>) null);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertNotSame(compositeMap3, compositeMap4);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap4, compositeMap3);
      assertNotSame(compositeMap4, compositeMap2);
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertEquals(1, mapArray1.length);
      
      CompositeMap<String, Object> compositeMap5 = new CompositeMap<String, Object>();
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertNotNull(compositeMap5);
      
      Map<String, Object> map0 = compositeMap5.removeComposited((Map<String, Object>) null);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Map<Object, AbstractMap.SimpleEntry<Object, Integer>>[] mapArray0 = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>[]) Array.newInstance(Map.class, 2);
      Map<Object, AbstractMap.SimpleEntry<Object, Integer>>[] mapArray1 = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>[]) Array.newInstance(Map.class, 2);
      assertFalse(mapArray1.equals((Object)mapArray0));
      
      HashMap<Object, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray1[0] = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>) hashMap0;
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>(mapArray1);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertNotNull(compositeMap0);
      assertEquals(2, mapArray1.length);
      
      mapArray1[1] = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>) compositeMap0;
      EmptyMapMutator<Object, AbstractMap.SimpleEntry<Object, Integer>> emptyMapMutator0 = new EmptyMapMutator<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap1 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>(mapArray1, emptyMapMutator0);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(2, mapArray1.length);
      
      mapArray0[0] = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>) compositeMap1;
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>(compositeMap1, mapArray0[0]);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(2, mapArray0.length);
      assertEquals(2, mapArray1.length);
      
      mapArray0[1] = (Map<Object, AbstractMap.SimpleEntry<Object, Integer>>) compositeMap2;
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(2, mapArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = compositeMap3.get(integer0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertNotSame(mapArray0, mapArray1);
      assertNotSame(compositeMap3, compositeMap0);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap1);
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNull(abstractMap_SimpleEntry0);
      assertEquals(2, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Map<Object, Integer>[] mapArray0 = (Map<Object, Integer>[]) Array.newInstance(Map.class, 4);
      CompositeMap<Object, Integer> compositeMap0 = new CompositeMap<Object, Integer>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(4, mapArray0.length);
      
      CompositeMap<Object, Integer> compositeMap1 = new CompositeMap<Object, Integer>(compositeMap0, compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(4, mapArray0.length);
      
      mapArray0[0] = (Map<Object, Integer>) compositeMap1;
      CompositeMap<Object, Integer> compositeMap2 = new CompositeMap<Object, Integer>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      
      mapArray0[1] = (Map<Object, Integer>) compositeMap2;
      CompositeMap<Object, Integer> compositeMap3 = new CompositeMap<Object, Integer>(mapArray0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      assertEquals(4, mapArray0.length);
      
      mapArray0[2] = (Map<Object, Integer>) compositeMap3;
      CompositeMap<Object, Integer> compositeMap4 = new CompositeMap<Object, Integer>(mapArray0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(4, mapArray0.length);
      
      mapArray0[3] = (Map<Object, Integer>) compositeMap4;
      EmptyMapMutator<Object, Integer> emptyMapMutator0 = new EmptyMapMutator<Object, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Integer> compositeMap5 = new CompositeMap<Object, Integer>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(4, mapArray0.length);
      
      compositeMap5.clear();
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertNotSame(compositeMap5, compositeMap3);
      assertNotSame(compositeMap5, compositeMap4);
      assertNotSame(compositeMap5, compositeMap2);
      assertNotSame(compositeMap5, compositeMap1);
      assertNotSame(compositeMap5, compositeMap0);
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertEquals(4, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      compositeMap0.clear();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>[] mapArray0 = (Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>[]) Array.newInstance(Map.class, 3);
      EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<String, Integer>> emptyMapMutator0 = new EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(3, mapArray0.length);
      
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(compositeMap0, compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(3, mapArray0.length);
      
      mapArray0[0] = (Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap1;
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap2 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(3, mapArray0.length);
      
      boolean boolean0 = compositeMap1.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotSame(compositeMap0, compositeMap2);
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertNotSame(compositeMap1, compositeMap2);
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertEquals(3, mapArray0.length);
      
      mapArray0[1] = (Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap2;
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap3 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      
      mapArray0[2] = (Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap3;
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap4 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0, emptyMapMutator0);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(3, mapArray0.length);
      
      Map<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>[] mapArray1 = (Map<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>> compositeMap5 = new CompositeMap<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>();
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertNotNull(compositeMap5);
      
      mapArray1[0] = (Map<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>) compositeMap5;
      CompositeMap<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>> compositeMap6 = new CompositeMap<HashMap<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(mapArray1);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertNotNull(compositeMap6);
      assertEquals(1, mapArray1.length);
      
      boolean boolean1 = compositeMap6.isEmpty();
      assertTrue(boolean1);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertNotSame(compositeMap6, compositeMap5);
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, mapArray1.length);
      
      Map<AbstractMap.SimpleEntry<Object, Object>, Integer>[] mapArray2 = (Map<AbstractMap.SimpleEntry<Object, Object>, Integer>[]) Array.newInstance(Map.class, 1);
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer> compositeMap7 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(mapArray2);
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertNotNull(compositeMap7);
      assertEquals(1, mapArray2.length);
      
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Integer> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer> compositeMap8 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(compositeMap7, compositeMap7, emptyMapMutator1);
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.isEmpty());
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertNotNull(compositeMap8);
      assertEquals(1, mapArray2.length);
      
      mapArray2[0] = (Map<AbstractMap.SimpleEntry<Object, Object>, Integer>) compositeMap8;
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer> compositeMap9 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, Integer>(mapArray2, emptyMapMutator1);
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertNotNull(compositeMap9);
      assertEquals(1, mapArray2.length);
      
      compositeMap9.setMutator(emptyMapMutator1);
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertNotSame(compositeMap9, compositeMap7);
      assertNotSame(compositeMap9, compositeMap8);
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertEquals(1, mapArray2.length);
      
      CompositeMap<HashMap<Object, String>, Integer> compositeMap10 = new CompositeMap<HashMap<Object, String>, Integer>();
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertNotNull(compositeMap10);
      
      Set<HashMap<Object, String>> set0 = compositeMap10.keySet();
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>[]) Array.newInstance(Map.class, 3);
      CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      assertEquals(3, mapArray0.length);
      
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>(compositeMap0, mapArray0[0]);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(3, mapArray0.length);
      
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap1;
      CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0[0], mapArray0[1], (CompositeMap.MapMutator<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) null);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      assertEquals(3, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) compositeMap2;
      CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>(mapArray0, (CompositeMap.MapMutator<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>>) null);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(3, mapArray0.length);
      
      Map<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<String, Integer>> map0 = compositeMap3.removeComposited(compositeMap1);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap0, compositeMap2);
      assertNotSame(compositeMap0, compositeMap3);
      assertNotSame(compositeMap1, compositeMap3);
      assertNotSame(compositeMap1, compositeMap0);
      assertNotSame(compositeMap1, compositeMap2);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap1);
      assertNotSame(compositeMap3, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap3));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap1.equals((Object)compositeMap3));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(map0);
      assertEquals(3, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 1);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<Integer, String>) hashMap0;
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>(mapArray0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      assertEquals(1, mapArray0.length);
      
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      Object object0 = compositeMap1.remove((Object) "@Qj?-P#t");
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Map<Integer, Object>[] mapArray0 = (Map<Integer, Object>[]) Array.newInstance(Map.class, 8);
      CompositeMap<Integer, Object> compositeMap0 = new CompositeMap<Integer, Object>(mapArray0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      assertEquals(8, mapArray0.length);
      
      mapArray0[0] = (Map<Integer, Object>) compositeMap0;
      CompositeMap<Integer, Object> compositeMap1 = new CompositeMap<Integer, Object>(mapArray0[0], mapArray0[0]);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(8, mapArray0.length);
      
      mapArray0[1] = (Map<Integer, Object>) compositeMap1;
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[2] = (Map<Integer, Object>) hashMap0;
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(0);
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[3] = (Map<Integer, Object>) hashMap1;
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray0[4] = (Map<Integer, Object>) hashMap2;
      EmptyMapMutator<Integer, Object> emptyMapMutator0 = new EmptyMapMutator<Integer, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Integer, Object> compositeMap2 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      assertEquals(8, mapArray0.length);
      
      mapArray0[5] = (Map<Integer, Object>) compositeMap2;
      CompositeMap<Integer, Object> compositeMap3 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      assertEquals(8, mapArray0.length);
      
      mapArray0[6] = (Map<Integer, Object>) compositeMap3;
      CompositeMap<Integer, Object> compositeMap4 = new CompositeMap<Integer, Object>(mapArray0[0], mapArray0[6], emptyMapMutator0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertNotNull(compositeMap4);
      assertEquals(8, mapArray0.length);
      
      mapArray0[7] = (Map<Integer, Object>) compositeMap4;
      CompositeMap<Integer, Object> compositeMap5 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      CompositeMap<Integer, Object> compositeMap6 = new CompositeMap<Integer, Object>(compositeMap5, compositeMap5, emptyMapMutator0);
      // Undeclared exception!
      compositeMap6.addComposited(mapArray0[3]);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 3);
      mapArray0[0] = (Map<Object, String>) compositeMap0;
      mapArray0[1] = (Map<Object, String>) compositeMap0;
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(compositeMap0, mapArray0[0]);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(3, mapArray0.length);
      
      mapArray0[2] = (Map<Object, String>) compositeMap1;
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(3, mapArray0.length);
      
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>(compositeMap0, compositeMap2, emptyMapMutator0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(3, mapArray0.length);
      
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)compositeMap3.entrySet();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(compositeMap0, compositeMap3);
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap0, compositeMap2);
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap2, compositeMap0);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap0);
      assertNotSame(compositeMap3, compositeMap1);
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap0.equals((Object)compositeMap3));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(set0);
      assertEquals(3, mapArray0.length);
      
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompositeMap<Object, Integer> compositeMap4 = new CompositeMap<Object, Integer>(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertNotNull(compositeMap4);
      
      boolean boolean0 = compositeMap4.equals(mapArray0[2]);
      assertTrue(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(3, mapArray0.length);
      
      Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>[] mapArray1 = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>[]) Array.newInstance(Map.class, 9);
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap5 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(mapArray1);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertNotNull(compositeMap5);
      assertEquals(9, mapArray1.length);
      
      mapArray1[0] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap5;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap6 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(compositeMap5, compositeMap5);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertNotNull(compositeMap6);
      assertEquals(9, mapArray1.length);
      
      mapArray1[1] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap6;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap7 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertNotNull(compositeMap7);
      
      mapArray1[2] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap7;
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, String> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap8 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(hashMap1, mapArray1[1], emptyMapMutator1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertNotNull(compositeMap8);
      assertEquals(9, mapArray1.length);
      
      mapArray1[3] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap8;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap9 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(compositeMap8, mapArray1[3], emptyMapMutator1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertTrue(compositeMap9.equals((Object)compositeMap6));
      assertTrue(compositeMap9.equals((Object)compositeMap5));
      assertNotNull(compositeMap9);
      assertEquals(9, mapArray1.length);
      
      mapArray1[4] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap9;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap10 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(mapArray1[2], mapArray1[4], emptyMapMutator1);
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.isEmpty());
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap7));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap6));
      assertTrue(compositeMap10.equals((Object)compositeMap5));
      assertNotNull(compositeMap10);
      assertEquals(9, mapArray1.length);
      
      mapArray1[5] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap10;
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray1[6] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) hashMap2;
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap3 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(hashMap3.equals((Object)hashMap2));
      assertTrue(hashMap3.equals((Object)hashMap1));
      assertNotNull(hashMap3);
      
      mapArray1[7] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) hashMap3;
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, String> emptyMapMutator2 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      assertFalse(emptyMapMutator2.equals((Object)emptyMapMutator1));
      assertNotNull(emptyMapMutator2);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap11 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(mapArray1, emptyMapMutator2);
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertFalse(emptyMapMutator2.equals((Object)emptyMapMutator1));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap6));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap5));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertNotNull(compositeMap11);
      assertEquals(9, mapArray1.length);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap12 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(compositeMap11, compositeMap9, emptyMapMutator2);
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertTrue(compositeMap12.isEmpty());
      assertEquals(0, compositeMap12.size());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertFalse(emptyMapMutator2.equals((Object)emptyMapMutator1));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap6));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap5));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertTrue(compositeMap12.equals((Object)compositeMap6));
      assertTrue(compositeMap12.equals((Object)compositeMap10));
      assertTrue(compositeMap12.equals((Object)compositeMap5));
      assertTrue(compositeMap12.equals((Object)compositeMap8));
      assertTrue(compositeMap12.equals((Object)compositeMap7));
      assertTrue(compositeMap12.equals((Object)compositeMap11));
      assertTrue(hashMap1.equals((Object)hashMap3));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertFalse(emptyMapMutator1.equals((Object)emptyMapMutator2));
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap9));
      assertTrue(compositeMap8.equals((Object)compositeMap11));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap10));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertTrue(compositeMap9.equals((Object)compositeMap11));
      assertTrue(compositeMap9.equals((Object)compositeMap10));
      assertTrue(compositeMap9.equals((Object)compositeMap6));
      assertTrue(compositeMap9.equals((Object)compositeMap5));
      assertNotNull(compositeMap12);
      assertEquals(9, mapArray1.length);
      
      mapArray1[8] = (Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) compositeMap12;
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> compositeMap13 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(mapArray1, emptyMapMutator1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>[]) Array.newInstance(Map.class, 4);
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap0;
      HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap1;
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(4, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[3] = (Map<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap1;
      CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(mapArray0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      assertEquals(4, mapArray0.length);
      
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(emptyMapMutator0);
      
      compositeMap2.setMutator(emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap2, compositeMap0);
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertEquals(4, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>();
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>(compositeMap0, compositeMap1);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> compositeMap3 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>(compositeMap2, compositeMap1, emptyMapMutator0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>> compositeMap4 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<String, Object>>(compositeMap3, compositeMap2);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap0.equals((Object)compositeMap3));
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap3));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      
      EmptyMapMutator<Integer, Integer> emptyMapMutator1 = new EmptyMapMutator<Integer, Integer>();
      assertNotNull(emptyMapMutator1);
      
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 5);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<Integer, Integer>) hashMap0;
      CompositeMap<Integer, Integer> compositeMap5 = new CompositeMap<Integer, Integer>(mapArray0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertNotNull(compositeMap5);
      assertEquals(5, mapArray0.length);
      
      mapArray0[1] = (Map<Integer, Integer>) compositeMap5;
      CompositeMap<Integer, Integer> compositeMap6 = new CompositeMap<Integer, Integer>(hashMap0, mapArray0[1], emptyMapMutator1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertNotNull(compositeMap6);
      assertEquals(5, mapArray0.length);
      
      mapArray0[2] = (Map<Integer, Integer>) compositeMap6;
      CompositeMap<Integer, Integer> compositeMap7 = new CompositeMap<Integer, Integer>();
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertNotNull(compositeMap7);
      
      mapArray0[3] = (Map<Integer, Integer>) compositeMap7;
      CompositeMap<Integer, Integer> compositeMap8 = new CompositeMap<Integer, Integer>(mapArray0);
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertNotNull(compositeMap8);
      assertEquals(5, mapArray0.length);
      
      mapArray0[4] = (Map<Integer, Integer>) compositeMap8;
      CompositeMap<Integer, Integer> compositeMap9 = new CompositeMap<Integer, Integer>(mapArray0);
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap6));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap7));
      assertTrue(compositeMap9.equals((Object)compositeMap5));
      assertNotNull(compositeMap9);
      assertEquals(5, mapArray0.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = emptyMapMutator1.put(compositeMap9, mapArray0, integer0, integer1);
      assertEquals(8, compositeMap9.size());
      assertFalse(compositeMap9.isEmpty());
      assertNotSame(compositeMap9, compositeMap7);
      assertNotSame(compositeMap9, compositeMap8);
      assertNotSame(compositeMap9, compositeMap5);
      assertNotSame(compositeMap9, compositeMap6);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertNull(integer2);
      assertEquals(5, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<Integer, Object>[] mapArray0 = (Map<Integer, Object>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Integer, Object> compositeMap0 = new CompositeMap<Integer, Object>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      mapArray0[0] = (Map<Integer, Object>) compositeMap0;
      CompositeMap<Integer, Object> compositeMap1 = new CompositeMap<Integer, Object>(mapArray0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(2, mapArray0.length);
      
      mapArray0[1] = (Map<Integer, Object>) compositeMap1;
      EmptyMapMutator<Integer, Object> emptyMapMutator0 = new EmptyMapMutator<Integer, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Integer, Object> compositeMap2 = new CompositeMap<Integer, Object>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(2, mapArray0.length);
      
      CompositeMap<Integer, Object> compositeMap3 = new CompositeMap<Integer, Object>(compositeMap2, mapArray0[0]);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      assertEquals(2, mapArray0.length);
      
      boolean boolean0 = compositeMap3.containsKey("");
      assertFalse(boolean0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap2, compositeMap0);
      assertNotSame(compositeMap3, compositeMap1);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap0);
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertEquals(2, mapArray0.length);
      
      CompositeMap<Integer, AbstractMap.SimpleEntry<Object, Integer>> compositeMap4 = null;
      try {
        compositeMap4 = new CompositeMap<Integer, AbstractMap.SimpleEntry<Object, Integer>>((Map<Integer, AbstractMap.SimpleEntry<Object, Integer>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>(hashMap0, hashMap1, emptyMapMutator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(compositeMap0);
      
      Set<Map.Entry<Object, String>> set0 = (Set<Map.Entry<Object, String>>)compositeMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertTrue(hashMap0.equals((Object)hashMap1));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      Integer integer0 = new Integer((-3686));
      assertEquals((-3686), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = compositeMap0.get(integer0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNull(object0);
      
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Integer, String> compositeMap1 = new CompositeMap<Integer, String>();
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotNull(compositeMap1);
      
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 5);
      mapArray0[0] = (Map<Integer, String>) compositeMap1;
      mapArray0[1] = (Map<Integer, String>) compositeMap1;
      mapArray0[2] = (Map<Integer, String>) compositeMap1;
      mapArray0[3] = (Map<Integer, String>) compositeMap1;
      mapArray0[4] = (Map<Integer, String>) compositeMap1;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        emptyMapMutator0.put(compositeMap1, mapArray0, integer1, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EmptyMapMutator<AbstractMap.SimpleEntry<String, String>, String> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<String, String>, String>();
      assertNotNull(emptyMapMutator0);
      
      Map<AbstractMap.SimpleEntry<String, String>, String>[] mapArray0 = (Map<AbstractMap.SimpleEntry<String, String>, String>[]) Array.newInstance(Map.class, 8);
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(8, mapArray0.length);
      
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(compositeMap0, compositeMap0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(8, mapArray0.length);
      
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap1;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(8, mapArray0.length);
      
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap2;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0[0], mapArray0[1]);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(8, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap3;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap4 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertNotNull(compositeMap4);
      assertEquals(8, mapArray0.length);
      
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap5 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(compositeMap3, compositeMap4, emptyMapMutator0);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(8, mapArray0.length);
      
      mapArray0[3] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap5;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap6 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0);
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertNotNull(compositeMap6);
      assertEquals(8, mapArray0.length);
      
      mapArray0[4] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap6;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap7 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertTrue(compositeMap7.equals((Object)compositeMap1));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertNotNull(compositeMap7);
      assertEquals(8, mapArray0.length);
      
      mapArray0[5] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap7;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap8 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>();
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertTrue(compositeMap8.equals((Object)compositeMap4));
      assertTrue(compositeMap8.equals((Object)compositeMap6));
      assertTrue(compositeMap8.equals((Object)compositeMap3));
      assertTrue(compositeMap8.equals((Object)compositeMap5));
      assertTrue(compositeMap8.equals((Object)compositeMap7));
      assertTrue(compositeMap8.equals((Object)compositeMap0));
      assertTrue(compositeMap8.equals((Object)compositeMap1));
      assertTrue(compositeMap8.equals((Object)compositeMap2));
      assertNotNull(compositeMap8);
      
      mapArray0[6] = (Map<AbstractMap.SimpleEntry<String, String>, String>) compositeMap8;
      HashMap<AbstractMap.SimpleEntry<String, String>, String> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, String>, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[7] = (Map<AbstractMap.SimpleEntry<String, String>, String>) hashMap0;
      CompositeMap<AbstractMap.SimpleEntry<String, String>, String> compositeMap9 = new CompositeMap<AbstractMap.SimpleEntry<String, String>, String>(mapArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 5);
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(5, mapArray0.length);
      
      mapArray0[0] = (Map<String, Object>) compositeMap0;
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>(mapArray0, (CompositeMap.MapMutator<String, Object>) null);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(5, mapArray0.length);
      
      mapArray0[1] = (Map<String, Object>) compositeMap1;
      CompositeMap<String, Object> compositeMap2 = new CompositeMap<String, Object>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      mapArray0[2] = (Map<String, Object>) compositeMap2;
      Map<String, Object>[] mapArray1 = (Map<String, Object>[]) Array.newInstance(Map.class, 7);
      assertFalse(mapArray1.equals((Object)mapArray0));
      
      mapArray1[0] = (Map<String, Object>) compositeMap0;
      mapArray1[1] = (Map<String, Object>) compositeMap0;
      mapArray1[2] = (Map<String, Object>) compositeMap1;
      mapArray1[3] = (Map<String, Object>) compositeMap1;
      mapArray1[4] = (Map<String, Object>) compositeMap2;
      mapArray1[5] = (Map<String, Object>) compositeMap0;
      mapArray1[6] = (Map<String, Object>) compositeMap1;
      CompositeMap<String, Object> compositeMap3 = new CompositeMap<String, Object>(mapArray1);
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(7, mapArray1.length);
      
      mapArray0[3] = (Map<String, Object>) compositeMap3;
      CompositeMap<String, Object> compositeMap4 = new CompositeMap<String, Object>(mapArray1[5], compositeMap3, (CompositeMap.MapMutator<String, Object>) null);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      assertEquals(7, mapArray1.length);
      
      CompositeMap<String, Object> compositeMap5 = new CompositeMap<String, Object>(mapArray1[6], compositeMap4);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray1.length);
      
      CompositeMap<String, Object> compositeMap6 = new CompositeMap<String, Object>(mapArray0[2], compositeMap5, (CompositeMap.MapMutator<String, Object>) null);
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertTrue(compositeMap4.equals((Object)compositeMap5));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertFalse(mapArray1.equals((Object)mapArray0));
      assertTrue(compositeMap3.equals((Object)compositeMap5));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap6);
      assertEquals(5, mapArray0.length);
      assertEquals(7, mapArray1.length);
      
      mapArray0[4] = (Map<String, Object>) compositeMap6;
      CompositeMap<String, Object> compositeMap7 = new CompositeMap<String, Object>(mapArray0, (CompositeMap.MapMutator<String, Object>) null);
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.isEmpty());
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap1));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertNotNull(compositeMap7);
      assertEquals(5, mapArray0.length);
      
      Set<String> set0 = compositeMap7.keySet();
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(mapArray0, mapArray1);
      assertNotSame(compositeMap7, compositeMap5);
      assertNotSame(compositeMap7, compositeMap3);
      assertNotSame(compositeMap7, compositeMap1);
      assertNotSame(compositeMap7, compositeMap4);
      assertNotSame(compositeMap7, compositeMap2);
      assertNotSame(compositeMap7, compositeMap0);
      assertNotSame(compositeMap7, compositeMap6);
      assertFalse(mapArray0.equals((Object)mapArray1));
      assertTrue(compositeMap7.equals((Object)compositeMap0));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap1));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertNotNull(set0);
      assertEquals(5, mapArray0.length);
      
      Map<Object, Integer>[] mapArray2 = (Map<Object, Integer>[]) Array.newInstance(Map.class, 6);
      CompositeMap<Object, Integer> compositeMap8 = new CompositeMap<Object, Integer>();
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertNotNull(compositeMap8);
      
      CompositeMap<Object, Integer> compositeMap9 = new CompositeMap<Object, Integer>(compositeMap8, compositeMap8, (CompositeMap.MapMutator<Object, Integer>) null);
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertNotNull(compositeMap9);
      
      mapArray2[0] = (Map<Object, Integer>) compositeMap9;
      CompositeMap<Object, Integer> compositeMap10 = new CompositeMap<Object, Integer>();
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertNotNull(compositeMap10);
      
      mapArray2[1] = (Map<Object, Integer>) compositeMap10;
      CompositeMap<Object, Integer> compositeMap11 = new CompositeMap<Object, Integer>(mapArray2[1], compositeMap10, (CompositeMap.MapMutator<Object, Integer>) null);
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertEquals(0, compositeMap11.size());
      assertTrue(compositeMap11.isEmpty());
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertNotNull(compositeMap11);
      assertEquals(6, mapArray2.length);
      
      mapArray2[2] = (Map<Object, Integer>) compositeMap11;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      mapArray2[3] = (Map<Object, Integer>) hashMap0;
      CompositeMap<Object, Integer> compositeMap12 = new CompositeMap<Object, Integer>(mapArray2[1], compositeMap11, (CompositeMap.MapMutator<Object, Integer>) null);
      assertTrue(compositeMap12.isEmpty());
      assertEquals(0, compositeMap12.size());
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertEquals(0, compositeMap11.size());
      assertTrue(compositeMap11.isEmpty());
      assertTrue(compositeMap12.equals((Object)compositeMap9));
      assertTrue(compositeMap12.equals((Object)compositeMap11));
      assertTrue(compositeMap12.equals((Object)compositeMap10));
      assertTrue(compositeMap12.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap10.equals((Object)compositeMap11));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertNotNull(compositeMap12);
      assertEquals(6, mapArray2.length);
      
      mapArray2[4] = (Map<Object, Integer>) compositeMap12;
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray2[5] = (Map<Object, Integer>) hashMap1;
      CompositeMap<Object, Integer> compositeMap13 = new CompositeMap<Object, Integer>(mapArray2, (CompositeMap.MapMutator<Object, Integer>) null);
      assertEquals(0, compositeMap13.size());
      assertTrue(compositeMap13.isEmpty());
      assertTrue(compositeMap13.equals((Object)compositeMap12));
      assertTrue(compositeMap13.equals((Object)compositeMap10));
      assertTrue(compositeMap13.equals((Object)compositeMap11));
      assertTrue(compositeMap13.equals((Object)compositeMap8));
      assertTrue(compositeMap13.equals((Object)compositeMap9));
      assertNotNull(compositeMap13);
      assertEquals(6, mapArray2.length);
      
      EmptyMapMutator<Object, Integer> emptyMapMutator0 = new EmptyMapMutator<Object, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Integer> compositeMap14 = new CompositeMap<Object, Integer>(compositeMap13, mapArray2[2], emptyMapMutator0);
      assertEquals(0, compositeMap13.size());
      assertTrue(compositeMap13.isEmpty());
      assertEquals(0, compositeMap14.size());
      assertTrue(compositeMap14.isEmpty());
      assertTrue(compositeMap13.equals((Object)compositeMap12));
      assertTrue(compositeMap13.equals((Object)compositeMap10));
      assertTrue(compositeMap13.equals((Object)compositeMap11));
      assertTrue(compositeMap13.equals((Object)compositeMap8));
      assertTrue(compositeMap13.equals((Object)compositeMap9));
      assertTrue(compositeMap14.equals((Object)compositeMap13));
      assertTrue(compositeMap14.equals((Object)compositeMap10));
      assertTrue(compositeMap14.equals((Object)compositeMap9));
      assertTrue(compositeMap14.equals((Object)compositeMap8));
      assertTrue(compositeMap14.equals((Object)compositeMap12));
      assertNotNull(compositeMap14);
      assertEquals(6, mapArray2.length);
      
      CompositeMap<Object, Integer> compositeMap15 = new CompositeMap<Object, Integer>(compositeMap14, mapArray2[5]);
      assertEquals(0, compositeMap13.size());
      assertTrue(compositeMap13.isEmpty());
      assertEquals(0, compositeMap14.size());
      assertTrue(compositeMap14.isEmpty());
      assertTrue(compositeMap15.isEmpty());
      assertEquals(0, compositeMap15.size());
      assertTrue(compositeMap13.equals((Object)compositeMap12));
      assertTrue(compositeMap13.equals((Object)compositeMap10));
      assertTrue(compositeMap13.equals((Object)compositeMap11));
      assertTrue(compositeMap13.equals((Object)compositeMap8));
      assertTrue(compositeMap13.equals((Object)compositeMap9));
      assertTrue(compositeMap14.equals((Object)compositeMap13));
      assertTrue(compositeMap14.equals((Object)compositeMap10));
      assertTrue(compositeMap14.equals((Object)compositeMap9));
      assertTrue(compositeMap14.equals((Object)compositeMap8));
      assertTrue(compositeMap14.equals((Object)compositeMap11));
      assertTrue(compositeMap14.equals((Object)compositeMap12));
      assertTrue(compositeMap15.equals((Object)compositeMap13));
      assertTrue(compositeMap15.equals((Object)compositeMap10));
      assertTrue(compositeMap15.equals((Object)compositeMap14));
      assertTrue(compositeMap15.equals((Object)compositeMap8));
      assertTrue(compositeMap15.equals((Object)compositeMap9));
      assertTrue(compositeMap15.equals((Object)compositeMap11));
      assertTrue(compositeMap15.equals((Object)compositeMap12));
      assertNotNull(compositeMap15);
      assertEquals(6, mapArray2.length);
      
      CompositeMap<Integer, Integer> compositeMap16 = new CompositeMap<Integer, Integer>();
      assertEquals(0, compositeMap16.size());
      assertTrue(compositeMap16.isEmpty());
      assertNotNull(compositeMap16);
      
      EmptyMapMutator<Integer, Integer> emptyMapMutator1 = new EmptyMapMutator<Integer, Integer>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<Integer, Integer> compositeMap17 = new CompositeMap<Integer, Integer>(compositeMap16, compositeMap16, emptyMapMutator1);
      assertEquals(0, compositeMap16.size());
      assertTrue(compositeMap16.isEmpty());
      assertEquals(0, compositeMap17.size());
      assertTrue(compositeMap17.isEmpty());
      assertTrue(compositeMap17.equals((Object)compositeMap16));
      assertNotNull(compositeMap17);
      
      // Undeclared exception!
      try { 
        compositeMap15.putAll(compositeMap17);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, Integer> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, Integer> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, Integer> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, Integer>(compositeMap0, compositeMap0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      Collection<Integer> collection0 = compositeMap1.values();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(collection0);
      
      Map<AbstractMap.SimpleEntry<Object, String>, Integer> map0 = compositeMap0.removeComposited(compositeMap1);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNull(map0);
      
      LinkedList<AbstractMap.SimpleEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Object, String>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      emptyMapMutator0.resolveCollision(compositeMap1, compositeMap1, compositeMap1, linkedList0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Object object0 = hashMap0.put("org.apache.commons.collections4.map.CompositeMap", "org.apache.commons.collections4.map.CompositeMap");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(object0);
      
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>(hashMap0, hashMap1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, compositeMap0.size());
      assertFalse(compositeMap0.isEmpty());
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNotNull(compositeMap0);
      
      compositeMap0.hashCode();
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(1, compositeMap0.size());
      assertFalse(compositeMap0.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertFalse(hashMap1.equals((Object)hashMap0));
      
      EmptyMapMutator<Object, Object> emptyMapMutator0 = new EmptyMapMutator<Object, Object>();
      assertNotNull(emptyMapMutator0);
      
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 6);
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertNotNull(hashMap2);
      
      mapArray0[0] = (Map<Object, Object>) hashMap2;
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(mapArray0);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotNull(compositeMap1);
      assertEquals(6, mapArray0.length);
      
      mapArray0[1] = (Map<Object, Object>) compositeMap1;
      CompositeMap<Object, Object> compositeMap2 = new CompositeMap<Object, Object>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      mapArray0[2] = (Map<Object, Object>) compositeMap2;
      CompositeMap<Object, Object> compositeMap3 = new CompositeMap<Object, Object>(mapArray0);
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(6, mapArray0.length);
      
      mapArray0[3] = (Map<Object, Object>) compositeMap3;
      CompositeMap<Object, Object> compositeMap4 = new CompositeMap<Object, Object>();
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertNotNull(compositeMap4);
      
      mapArray0[4] = (Map<Object, Object>) compositeMap4;
      CompositeMap<Object, Object> compositeMap5 = new CompositeMap<Object, Object>(mapArray0);
      assertTrue(compositeMap5.isEmpty());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertNotNull(compositeMap5);
      assertEquals(6, mapArray0.length);
      
      mapArray0[5] = (Map<Object, Object>) compositeMap5;
      CompositeMap<Object, Object> compositeMap6 = new CompositeMap<Object, Object>(mapArray0);
      assertTrue(compositeMap6.isEmpty());
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertNotNull(compositeMap6);
      assertEquals(6, mapArray0.length);
      
      emptyMapMutator0.putAll(compositeMap6, mapArray0, hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(8, compositeMap6.size());
      assertFalse(compositeMap6.isEmpty());
      assertNotSame(hashMap0, hashMap1);
      assertNotSame(compositeMap6, compositeMap5);
      assertNotSame(compositeMap6, compositeMap3);
      assertNotSame(compositeMap6, compositeMap1);
      assertNotSame(compositeMap6, compositeMap4);
      assertNotSame(compositeMap6, compositeMap2);
      assertFalse(hashMap0.equals((Object)hashMap1));
      assertEquals(6, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(2, mapArray0.length);
      
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>(compositeMap0, compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(2, mapArray0.length);
      
      compositeMap0.addComposited(compositeMap1);
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertEquals(2, mapArray0.length);
      
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(compositeMap0, compositeMap0, emptyMapMutator0);
      mapArray0[0] = (Map<Object, String>) compositeMap2;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      mapArray0[1] = (Map<Object, String>) hashMap0;
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>(mapArray0);
      CompositeMap<Object, String> compositeMap4 = new CompositeMap<Object, String>(compositeMap3, mapArray0[0]);
      Map<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, String>>[] mapArray1 = (Map<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, String>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, String>> compositeMap5 = new CompositeMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, String>>(mapArray1);
      compositeMap5.keySet();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EmptyMapMutator<Object, Object> emptyMapMutator0 = new EmptyMapMutator<Object, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Object> compositeMap0 = null;
      try {
        compositeMap0 = new CompositeMap<Object, Object>((Map<Object, Object>[]) null, emptyMapMutator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 5);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      mapArray0[0] = (Map<String, Integer>) compositeMap0;
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(5, mapArray0.length);
      
      mapArray0[1] = (Map<String, Integer>) compositeMap1;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertNotNull(hashMap1);
      
      mapArray0[2] = (Map<String, Integer>) hashMap1;
      Integer integer0 = new Integer(5998);
      assertEquals(5998, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap1.put("org.apache.commons.collections4.map.AbstractIterableMap", integer0);
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(hashMap1, hashMap0);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertNull(integer1);
      
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.isEmpty());
      assertTrue(hashMap2.equals((Object)hashMap0));
      assertFalse(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      emptyMapMutator0.putAll(compositeMap1, mapArray0, hashMap1);
      assertEquals(2, compositeMap1.size());
      assertFalse(compositeMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertFalse(hashMap1.isEmpty());
      assertNotSame(compositeMap1, compositeMap0);
      assertNotSame(hashMap1, hashMap0);
      assertNotSame(hashMap1, hashMap2);
      assertFalse(hashMap1.equals((Object)hashMap2));
      assertTrue(hashMap1.equals((Object)hashMap0));
      assertEquals(5, mapArray0.length);
      
      mapArray0[3] = (Map<String, Integer>) hashMap2;
      CompositeMap<String, Integer> compositeMap2 = new CompositeMap<String, Integer>();
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertNotNull(compositeMap2);
      
      // Undeclared exception!
      try { 
        compositeMap1.removeComposited(compositeMap2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Collision adding composited set with no SetMutator set
         //
         verifyException("org.apache.commons.collections4.set.CompositeSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EmptyMapMutator<Object, String> emptyMapMutator0 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator0);
      
      Map<Object, String>[] mapArray0 = (Map<Object, String>[]) Array.newInstance(Map.class, 2);
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(2, mapArray0.length);
      
      mapArray0[0] = (Map<Object, String>) compositeMap0;
      CompositeMap<Object, String> compositeMap1 = new CompositeMap<Object, String>();
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[1] = (Map<Object, String>) compositeMap1;
      CompositeMap<Object, String> compositeMap2 = new CompositeMap<Object, String>(mapArray0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(2, mapArray0.length);
      
      CompositeMap<Object, String> compositeMap3 = new CompositeMap<Object, String>(compositeMap1, compositeMap2);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      assertEquals(2, mapArray0.length);
      
      // Undeclared exception!
      try { 
        emptyMapMutator0.putAll(compositeMap2, mapArray0, compositeMap3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Integer, String>> emptyMapMutator0 = new EmptyMapMutator<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      assertNotNull(emptyMapMutator0);
      
      HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>(hashMap0, compositeMap0, emptyMapMutator0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>[] mapArray0 = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) compositeMap0;
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> compositeMap2 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> compositeMap3 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>(compositeMap2, compositeMap0, emptyMapMutator0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      
      mapArray0[1] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) compositeMap3;
      mapArray0[2] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) compositeMap1;
      mapArray0[3] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) hashMap0;
      mapArray0[4] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) compositeMap0;
      mapArray0[5] = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>) hashMap0;
      // Undeclared exception!
      try { 
        emptyMapMutator0.putAll(compositeMap1, mapArray0, hashMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Map<String, Integer>[] mapArray0 = (Map<String, Integer>[]) Array.newInstance(Map.class, 2);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[0] = (Map<String, Integer>) hashMap0;
      EmptyMapMutator<String, Integer> emptyMapMutator0 = new EmptyMapMutator<String, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, Integer> compositeMap0 = new CompositeMap<String, Integer>(mapArray0, emptyMapMutator0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      assertEquals(2, mapArray0.length);
      
      mapArray0[1] = (Map<String, Integer>) compositeMap0;
      CompositeMap<String, Integer> compositeMap1 = new CompositeMap<String, Integer>(mapArray0);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(2, mapArray0.length);
      
      boolean boolean0 = compositeMap1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertEquals(2, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      boolean boolean0 = compositeMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      
      EmptyMapMutator<String, String> emptyMapMutator0 = new EmptyMapMutator<String, String>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, String> compositeMap1 = new CompositeMap<String, String>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      CompositeMap<String, String> compositeMap2 = new CompositeMap<String, String>(compositeMap1, compositeMap1);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      
      Collection<String> collection0 = compositeMap0.values();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(collection0);
      
      emptyMapMutator0.resolveCollision(compositeMap2, compositeMap1, compositeMap1, collection0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotSame(compositeMap1, compositeMap2);
      assertNotSame(compositeMap2, compositeMap1);
      assertTrue(compositeMap1.equals((Object)compositeMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[]) Array.newInstance(Map.class, 7);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(7, mapArray0.length);
      
      mapArray0[0] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[1] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap1;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0[0], mapArray0[1], emptyMapMutator0);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
      assertEquals(7, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap2;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertNotNull(compositeMap3);
      
      mapArray0[3] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap3;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap4 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertNotNull(compositeMap4);
      
      mapArray0[4] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap4;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap5 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(compositeMap0, compositeMap4);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(compositeMap0.equals((Object)compositeMap2));
      assertTrue(compositeMap0.equals((Object)compositeMap3));
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap0.equals((Object)compositeMap4));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap0));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(compositeMap5.equals((Object)compositeMap1));
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      assertEquals(7, mapArray0.length);
      
      mapArray0[5] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap5;
      HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[6] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) hashMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap6 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertNotNull(compositeMap6);
      assertEquals(7, mapArray0.length);
      
      boolean boolean0 = compositeMap6.containsValue(compositeMap4);
      assertFalse(boolean0);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap4.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertNotSame(compositeMap6, compositeMap2);
      assertNotSame(compositeMap6, compositeMap1);
      assertNotSame(compositeMap6, compositeMap4);
      assertNotSame(compositeMap6, compositeMap3);
      assertNotSame(compositeMap6, compositeMap5);
      assertNotSame(compositeMap6, compositeMap0);
      assertNotSame(compositeMap4, compositeMap0);
      assertNotSame(compositeMap4, compositeMap3);
      assertNotSame(compositeMap4, compositeMap5);
      assertNotSame(compositeMap4, compositeMap1);
      assertNotSame(compositeMap4, compositeMap2);
      assertNotSame(compositeMap4, compositeMap6);
      assertTrue(compositeMap6.equals((Object)compositeMap0));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap1));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertTrue(compositeMap4.equals((Object)compositeMap6));
      assertTrue(compositeMap4.equals((Object)compositeMap0));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap5));
      assertTrue(compositeMap4.equals((Object)compositeMap1));
      assertEquals(7, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CompositeMap<Object, String> compositeMap0 = new CompositeMap<Object, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      CompositeMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotNull(compositeMap1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "m(.+dIRnz|I`z1lsisf");
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, String>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleEntry1);
      
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      boolean boolean0 = compositeMap1.replace(abstractMap_SimpleEntry1, abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = compositeMap1.containsValue(integer1);
      assertFalse(boolean1);
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      
      CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      
      Set<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Integer>>> set0 = (Set<Map.Entry<Object, AbstractMap.SimpleEntry<Object, Integer>>>)compositeMap2.entrySet();
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Object, Object> compositeMap0 = new CompositeMap<Object, Object>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(0, mapArray0.length);
      
      EmptyMapMutator<Object, Object> emptyMapMutator0 = new EmptyMapMutator<Object, Object>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(compositeMap0, compositeMap0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      assertEquals(0, mapArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Integer, HashMap<String, Integer>> hashMap0 = new HashMap<Integer, HashMap<String, Integer>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      CompositeMap<Integer, HashMap<String, Integer>> compositeMap0 = new CompositeMap<Integer, HashMap<String, Integer>>(hashMap0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      HashMap<String, Integer> hashMap1 = compositeMap0.remove((Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNull(hashMap1);
      
      HashMap<String, Integer> hashMap2 = compositeMap0.remove((Object) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EmptyMapMutator<String, AbstractMap.SimpleEntry<String, String>> emptyMapMutator0 = new EmptyMapMutator<String, AbstractMap.SimpleEntry<String, String>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<String, AbstractMap.SimpleEntry<String, String>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleEntry<String, String>>((Map<String, AbstractMap.SimpleEntry<String, String>>) null, (Map<String, AbstractMap.SimpleEntry<String, String>>) null, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      CompositeMap<String, AbstractMap.SimpleEntry<String, String>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleEntry<String, String>>(compositeMap0, (Map<String, AbstractMap.SimpleEntry<String, String>>) null);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = compositeMap1.get((Object) null);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>(compositeMap0, compositeMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> compositeMap2 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>(compositeMap0, compositeMap1, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertNotNull(compositeMap2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<String, Object>>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Map<String, CompositeSet<Object>>[] mapArray0 = (Map<String, CompositeSet<Object>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<String, CompositeSet<Object>> compositeMap0 = new CompositeMap<String, CompositeSet<Object>>(mapArray0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(0, mapArray0.length);
      
      HashMap<String, CompositeSet<Object>> hashMap0 = new HashMap<String, CompositeSet<Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Map<String, CompositeSet<Object>> map0 = compositeMap0.removeComposited(hashMap0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(map0);
      assertEquals(0, mapArray0.length);
      
      Map<CompositeMap<Integer, String>, Comparable<String>>[] mapArray1 = (Map<CompositeMap<Integer, String>, Comparable<String>>[]) Array.newInstance(Map.class, 1);
      CompositeMap<CompositeMap<Integer, String>, Comparable<String>> compositeMap1 = new CompositeMap<CompositeMap<Integer, String>, Comparable<String>>(mapArray1);
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotNull(compositeMap1);
      assertEquals(1, mapArray1.length);
      
      mapArray1[0] = (Map<CompositeMap<Integer, String>, Comparable<String>>) compositeMap1;
      EmptyMapMutator<CompositeMap<Integer, String>, Comparable<String>> emptyMapMutator0 = new EmptyMapMutator<CompositeMap<Integer, String>, Comparable<String>>();
      assertNotNull(emptyMapMutator0);
      
      Map<Integer, String>[] mapArray2 = (Map<Integer, String>[]) Array.newInstance(Map.class, 0);
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(mapArray2);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      assertEquals(0, mapArray2.length);
      
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>(compositeMap2, compositeMap2);
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      assertEquals(0, mapArray2.length);
      
      Comparable<String> comparable0 = (Comparable<String>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        compositeMap1.merge(compositeMap3, comparable0, biFunction0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>[] mapArray0 = (Map<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> emptyMapMutator0 = new EmptyMapMutator<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> compositeMap0 = new CompositeMap<HashMap<String, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(mapArray0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(0, mapArray0.length);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>(56);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(56);
      assertEquals(56, (int)integer0);
      assertNotNull(integer0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(compositeMap0, integer0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(0, mapArray0.length);
      
      Comparator<Map.Entry<CompositeSet<Object>, String>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      // Undeclared exception!
      try { 
        compositeMap0.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.collections4.map.EmptyMapMutator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>();
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      
      Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>[]) Array.newInstance(Map.class, 3);
      CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>> compositeMap1 = new CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>(compositeMap0, compositeMap0, emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[0] = (Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>) compositeMap1;
      mapArray0[1] = (Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>) compositeMap0;
      Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>> map0 = compositeMap1.removeComposited(mapArray0[0]);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotSame(compositeMap0, compositeMap1);
      assertNotSame(compositeMap1, compositeMap0);
      assertTrue(compositeMap0.equals((Object)compositeMap1));
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(map0);
      assertEquals(3, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleImmutableEntry<String, String>, HashMap<Integer, Object>>) compositeMap0;
      // Undeclared exception!
      try { 
        emptyMapMutator0.putAll(compositeMap0, mapArray0, map0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CompositeMap<Integer, String> compositeMap0 = new CompositeMap<Integer, String>();
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      assertNotNull(compositeMap0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      compositeMap0.forEach(biConsumer0);
      assertEquals(0, compositeMap0.size());
      assertTrue(compositeMap0.isEmpty());
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray0 = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 6);
      HashMap<CompositeSet<String>, HashMap<Object, String>> hashMap0 = new HashMap<CompositeSet<String>, HashMap<Object, String>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      EmptyMapMutator<CompositeSet<String>, HashMap<Object, String>> emptyMapMutator0 = new EmptyMapMutator<CompositeSet<String>, HashMap<Object, String>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<CompositeSet<String>, HashMap<Object, String>> compositeMap1 = new CompositeMap<CompositeSet<String>, HashMap<Object, String>>(hashMap0, hashMap0, emptyMapMutator0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertNotNull(compositeMap1);
      
      Set<Map.Entry<CompositeSet<String>, HashMap<Object, String>>> set0 = (Set<Map.Entry<CompositeSet<String>, HashMap<Object, String>>>)compositeMap1.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap1 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap1, hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertNotNull(compositeMap2);
      
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator1 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(emptyMapMutator1);
      
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap2, compositeMap2, emptyMapMutator1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertNotNull(compositeMap3);
      
      mapArray0[0] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap3;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap4 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap4);
      
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap2 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertTrue(hashMap2.isEmpty());
      assertEquals(0, hashMap2.size());
      assertTrue(hashMap2.equals((Object)hashMap1));
      assertNotNull(hashMap2);
      
      mapArray0[2] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap2;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(compositeMap4, compositeMap3, emptyMapMutator1);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap4));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      assertNotNull(compositeMap5);
      
      compositeMap5.setMutator(emptyMapMutator1);
      assertEquals(0, compositeMap5.size());
      assertTrue(compositeMap5.isEmpty());
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertEquals(0, compositeMap4.size());
      assertTrue(compositeMap4.isEmpty());
      assertNotSame(compositeMap5, compositeMap4);
      assertNotSame(compositeMap5, compositeMap3);
      assertNotSame(compositeMap5, compositeMap2);
      assertNotSame(hashMap1, hashMap2);
      assertNotSame(compositeMap2, compositeMap5);
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap4);
      assertNotSame(compositeMap3, compositeMap4);
      assertNotSame(compositeMap3, compositeMap5);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap4, compositeMap5);
      assertNotSame(compositeMap4, compositeMap3);
      assertNotSame(compositeMap4, compositeMap2);
      assertTrue(compositeMap5.equals((Object)compositeMap3));
      assertTrue(compositeMap5.equals((Object)compositeMap2));
      assertTrue(compositeMap5.equals((Object)compositeMap4));
      assertTrue(hashMap1.equals((Object)hashMap2));
      assertTrue(compositeMap2.equals((Object)compositeMap5));
      assertTrue(compositeMap2.equals((Object)compositeMap4));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap5));
      assertTrue(compositeMap3.equals((Object)compositeMap4));
      assertTrue(compositeMap4.equals((Object)compositeMap3));
      assertTrue(compositeMap4.equals((Object)compositeMap5));
      assertTrue(compositeMap4.equals((Object)compositeMap2));
      
      mapArray0[3] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap5;
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap6 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertNotNull(compositeMap6);
      assertEquals(6, mapArray0.length);
      
      mapArray0[4] = (Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap6;
      Map<Object, AbstractMap.SimpleImmutableEntry<Object, String>> map0 = compositeMap6.removeComposited(mapArray0[1]);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertNotSame(compositeMap6, compositeMap3);
      assertNotSame(compositeMap6, compositeMap5);
      assertNotSame(compositeMap6, compositeMap4);
      assertNotSame(compositeMap6, compositeMap2);
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertNull(map0);
      assertEquals(6, mapArray0.length);
      
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap7 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray0);
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertTrue(compositeMap7.equals((Object)compositeMap6));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertNotNull(compositeMap7);
      assertEquals(6, mapArray0.length);
      
      boolean boolean0 = compositeMap7.equals(map0);
      assertFalse(boolean0);
      assertEquals(0, compositeMap6.size());
      assertTrue(compositeMap6.isEmpty());
      assertTrue(compositeMap7.isEmpty());
      assertEquals(0, compositeMap7.size());
      assertNotSame(compositeMap6, compositeMap3);
      assertNotSame(compositeMap6, compositeMap5);
      assertNotSame(compositeMap6, compositeMap4);
      assertNotSame(compositeMap6, compositeMap7);
      assertNotSame(compositeMap6, compositeMap2);
      assertNotSame(compositeMap7, compositeMap3);
      assertNotSame(compositeMap7, compositeMap2);
      assertNotSame(compositeMap7, compositeMap4);
      assertNotSame(compositeMap7, compositeMap5);
      assertNotSame(compositeMap7, compositeMap6);
      assertTrue(compositeMap6.equals((Object)compositeMap5));
      assertTrue(compositeMap6.equals((Object)compositeMap7));
      assertTrue(compositeMap6.equals((Object)compositeMap2));
      assertTrue(compositeMap6.equals((Object)compositeMap4));
      assertTrue(compositeMap6.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap5));
      assertTrue(compositeMap7.equals((Object)compositeMap3));
      assertTrue(compositeMap7.equals((Object)compositeMap4));
      assertTrue(compositeMap7.equals((Object)compositeMap2));
      assertEquals(6, mapArray0.length);
      
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertNotNull(hashMap3);
      
      EmptyMapMutator<Object, String> emptyMapMutator2 = new EmptyMapMutator<Object, String>();
      assertNotNull(emptyMapMutator2);
      
      CompositeMap<Object, String> compositeMap8 = new CompositeMap<Object, String>(hashMap3, hashMap3, emptyMapMutator2);
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertNotNull(compositeMap8);
      
      CompositeMap<Object, String> compositeMap9 = new CompositeMap<Object, String>(compositeMap8, hashMap3, emptyMapMutator2);
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertNotNull(compositeMap9);
      
      CompositeMap<Object, String> compositeMap10 = new CompositeMap<Object, String>();
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertNotNull(compositeMap10);
      
      CompositeMap<Object, String> compositeMap11 = new CompositeMap<Object, String>(compositeMap9, compositeMap10);
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertTrue(compositeMap8.equals((Object)compositeMap9));
      assertTrue(compositeMap8.equals((Object)compositeMap10));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap10));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      assertNotNull(compositeMap11);
      
      compositeMap11.clear();
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertTrue(compositeMap10.isEmpty());
      assertEquals(0, compositeMap10.size());
      assertTrue(compositeMap11.isEmpty());
      assertEquals(0, compositeMap11.size());
      assertNotSame(compositeMap8, compositeMap9);
      assertNotSame(compositeMap8, compositeMap11);
      assertNotSame(compositeMap8, compositeMap10);
      assertNotSame(compositeMap9, compositeMap10);
      assertNotSame(compositeMap9, compositeMap8);
      assertNotSame(compositeMap9, compositeMap11);
      assertNotSame(compositeMap10, compositeMap9);
      assertNotSame(compositeMap10, compositeMap11);
      assertNotSame(compositeMap10, compositeMap8);
      assertNotSame(compositeMap11, compositeMap9);
      assertNotSame(compositeMap11, compositeMap10);
      assertNotSame(compositeMap11, compositeMap8);
      assertTrue(compositeMap8.equals((Object)compositeMap9));
      assertTrue(compositeMap8.equals((Object)compositeMap10));
      assertTrue(compositeMap8.equals((Object)compositeMap11));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap11));
      assertTrue(compositeMap9.equals((Object)compositeMap10));
      assertTrue(compositeMap10.equals((Object)compositeMap9));
      assertTrue(compositeMap10.equals((Object)compositeMap11));
      assertTrue(compositeMap10.equals((Object)compositeMap8));
      assertTrue(compositeMap11.equals((Object)compositeMap10));
      assertTrue(compositeMap11.equals((Object)compositeMap9));
      assertTrue(compositeMap11.equals((Object)compositeMap8));
      
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<Object, Object>> compositeMap12 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<Object, Object>>();
      assertEquals(0, compositeMap12.size());
      assertTrue(compositeMap12.isEmpty());
      assertNotNull(compositeMap12);
      
      HashMap<Object, Object> hashMap4 = compositeMap12.get(compositeMap9);
      assertEquals(0, compositeMap12.size());
      assertTrue(compositeMap12.isEmpty());
      assertEquals(0, hashMap3.size());
      assertTrue(hashMap3.isEmpty());
      assertTrue(compositeMap8.isEmpty());
      assertEquals(0, compositeMap8.size());
      assertEquals(0, compositeMap9.size());
      assertTrue(compositeMap9.isEmpty());
      assertNotSame(compositeMap8, compositeMap9);
      assertNotSame(compositeMap8, compositeMap11);
      assertNotSame(compositeMap8, compositeMap10);
      assertNotSame(compositeMap9, compositeMap10);
      assertNotSame(compositeMap9, compositeMap8);
      assertNotSame(compositeMap9, compositeMap11);
      assertTrue(compositeMap8.equals((Object)compositeMap9));
      assertTrue(compositeMap8.equals((Object)compositeMap10));
      assertTrue(compositeMap8.equals((Object)compositeMap11));
      assertTrue(compositeMap9.equals((Object)compositeMap8));
      assertTrue(compositeMap9.equals((Object)compositeMap11));
      assertTrue(compositeMap9.equals((Object)compositeMap10));
      assertNull(hashMap4);
      
      Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray1 = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 4);
      CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap13 = new CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray1);
      assertTrue(compositeMap13.isEmpty());
      assertEquals(0, compositeMap13.size());
      assertNotNull(compositeMap13);
      assertEquals(4, mapArray1.length);
      
      mapArray1[0] = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap13;
      CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap14 = new CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray1);
      assertEquals(0, compositeMap14.size());
      assertTrue(compositeMap14.isEmpty());
      assertTrue(compositeMap14.equals((Object)compositeMap13));
      assertNotNull(compositeMap14);
      assertEquals(4, mapArray1.length);
      
      mapArray1[1] = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap14;
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap5 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, hashMap5.size());
      assertTrue(hashMap5.isEmpty());
      assertNotNull(hashMap5);
      
      mapArray1[2] = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap5;
      Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>[] mapArray2 = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>[]) Array.newInstance(Map.class, 0);
      assertFalse(mapArray2.equals((Object)mapArray1));
      
      CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap15 = new CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray2);
      assertEquals(0, compositeMap15.size());
      assertTrue(compositeMap15.isEmpty());
      assertFalse(mapArray2.equals((Object)mapArray1));
      assertTrue(compositeMap15.equals((Object)compositeMap14));
      assertTrue(compositeMap15.equals((Object)compositeMap13));
      assertNotNull(compositeMap15);
      assertEquals(0, mapArray2.length);
      
      mapArray1[3] = (Map<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>) compositeMap15;
      EmptyMapMutator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> emptyMapMutator3 = new EmptyMapMutator<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertNotNull(emptyMapMutator3);
      
      CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> compositeMap16 = new CompositeMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(mapArray1, emptyMapMutator3);
      assertTrue(compositeMap16.isEmpty());
      assertEquals(0, compositeMap16.size());
      assertFalse(mapArray1.equals((Object)mapArray2));
      assertTrue(compositeMap16.equals((Object)compositeMap14));
      assertTrue(compositeMap16.equals((Object)compositeMap13));
      assertTrue(compositeMap16.equals((Object)compositeMap15));
      assertNotNull(compositeMap16);
      assertEquals(4, mapArray1.length);
      
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection0 = compositeMap16.values();
      assertTrue(compositeMap16.isEmpty());
      assertEquals(0, compositeMap16.size());
      assertNotSame(mapArray1, mapArray2);
      assertNotSame(compositeMap16, compositeMap13);
      assertNotSame(compositeMap16, compositeMap14);
      assertNotSame(compositeMap16, compositeMap15);
      assertFalse(mapArray1.equals((Object)mapArray2));
      assertTrue(compositeMap16.equals((Object)compositeMap14));
      assertTrue(compositeMap16.equals((Object)compositeMap13));
      assertTrue(compositeMap16.equals((Object)compositeMap15));
      assertNotNull(collection0);
      assertEquals(4, mapArray1.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[]) Array.newInstance(Map.class, 7);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertNotNull(emptyMapMutator0);
      
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0[0], mapArray0[1], emptyMapMutator0);
      assertTrue(compositeMap0.isEmpty());
      assertEquals(0, compositeMap0.size());
      assertNotNull(compositeMap0);
      assertEquals(7, mapArray0.length);
      
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(compositeMap1.isEmpty());
      assertEquals(0, compositeMap1.size());
      assertTrue(compositeMap1.equals((Object)compositeMap0));
      assertNotNull(compositeMap1);
      
      mapArray0[3] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertNotNull(compositeMap2);
      
      mapArray0[4] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap2;
      HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      mapArray0[6] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) hashMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      assertNotNull(compositeMap3);
      
      boolean boolean0 = compositeMap3.containsValue(compositeMap2);
      assertFalse(boolean0);
      assertTrue(compositeMap2.isEmpty());
      assertEquals(0, compositeMap2.size());
      assertEquals(0, compositeMap3.size());
      assertTrue(compositeMap3.isEmpty());
      assertNotSame(compositeMap2, compositeMap0);
      assertNotSame(compositeMap2, compositeMap3);
      assertNotSame(compositeMap2, compositeMap1);
      assertNotSame(compositeMap3, compositeMap2);
      assertNotSame(compositeMap3, compositeMap1);
      assertNotSame(compositeMap3, compositeMap0);
      assertTrue(compositeMap2.equals((Object)compositeMap1));
      assertTrue(compositeMap2.equals((Object)compositeMap3));
      assertTrue(compositeMap2.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap0));
      assertTrue(compositeMap3.equals((Object)compositeMap2));
      assertTrue(compositeMap3.equals((Object)compositeMap1));
      
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      String string0 = hashMap1.put("EYY", "EYY");
      assertFalse(hashMap1.isEmpty());
      assertEquals(1, hashMap1.size());
      assertNull(string0);
      
      CompositeMap<String, String> compositeMap4 = null;
      try {
        compositeMap4 = new CompositeMap<String, String>(hashMap1, hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[] mapArray0 = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>[]) Array.newInstance(Map.class, 7);
      EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> emptyMapMutator0 = new EmptyMapMutator<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap0 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0[0], mapArray0[1], emptyMapMutator0);
      mapArray0[2] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap1 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      mapArray0[3] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap2 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      mapArray0[4] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) compositeMap2;
      HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>();
      mapArray0[6] = (Map<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>) hashMap0;
      CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>> compositeMap3 = new CompositeMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Integer>>(mapArray0);
      compositeMap3.containsValue(compositeMap2);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("EYY", "EYY");
      CompositeMap<String, String> compositeMap4 = null;
      try {
        compositeMap4 = new CompositeMap<String, String>(hashMap1, hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key collision adding Map to CompositeMap
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CompositeMap<HashMap<Object, Integer>, Object> compositeMap0 = new CompositeMap<HashMap<Object, Integer>, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      Function<Object, Object> function2 = function1.compose((Function<? super Object, ?>) unaryOperator0);
      compositeMap0.computeIfAbsent(hashMap0, function2);
      compositeMap0.entrySet();
      Map<Object, Object>[] mapArray0 = (Map<Object, Object>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Object, Object> emptyMapMutator0 = new EmptyMapMutator<Object, Object>();
      CompositeMap<Object, Object> compositeMap1 = new CompositeMap<Object, Object>(mapArray0, emptyMapMutator0);
      compositeMap1.clear();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EmptyMapMutator<Integer, Integer> emptyMapMutator0 = new EmptyMapMutator<Integer, Integer>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      CompositeMap<Integer, Integer> compositeMap0 = new CompositeMap<Integer, Integer>(hashMap0, hashMap0, emptyMapMutator0);
      Map<Integer, Integer>[] mapArray0 = (Map<Integer, Integer>[]) Array.newInstance(Map.class, 6);
      mapArray0[0] = (Map<Integer, Integer>) hashMap0;
      mapArray0[1] = (Map<Integer, Integer>) hashMap0;
      emptyMapMutator0.putAll(compositeMap0, mapArray0, mapArray0[0]);
      mapArray0[3] = (Map<Integer, Integer>) hashMap0;
      Integer integer0 = new Integer(138);
      hashMap0.put(integer0, integer0);
      mapArray0[3] = (Map<Integer, Integer>) compositeMap0;
      Integer integer1 = new Integer(138);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      compositeMap0.computeIfPresent(integer1, biFunction0);
      mapArray0[4] = (Map<Integer, Integer>) hashMap0;
      mapArray0[5] = (Map<Integer, Integer>) compositeMap0;
      emptyMapMutator0.putAll(compositeMap0, mapArray0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      
      Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>[] mapArray1 = (Map<String, AbstractMap.SimpleImmutableEntry<Integer, String>>[]) Array.newInstance(Map.class, 0);
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<Integer, String>>(mapArray1);
      Integer integer2 = new Integer(138);
      compositeMap1.remove((Object) integer2);
      Map<String, Integer>[] mapArray2 = (Map<String, Integer>[]) Array.newInstance(Map.class, 2);
      CompositeMap<String, Integer> compositeMap2 = new CompositeMap<String, Integer>();
      CompositeMap<String, Integer> compositeMap3 = new CompositeMap<String, Integer>(compositeMap2, compositeMap2);
      compositeMap2.removeComposited(compositeMap3);
      CompositeMap<String, Integer> compositeMap4 = new CompositeMap<String, Integer>((Map<String, Integer>) null, compositeMap2);
      Map<String, Integer> map0 = compositeMap4.removeComposited(compositeMap2);
      mapArray2[0] = map0;
      CompositeMap<String, Integer> compositeMap5 = new CompositeMap<String, Integer>(mapArray2);
      mapArray2[1] = (Map<String, Integer>) compositeMap5;
      EmptyMapMutator<String, Integer> emptyMapMutator1 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap6 = new CompositeMap<String, Integer>(mapArray2, emptyMapMutator1);
      CompositeMap<String, Integer> compositeMap7 = new CompositeMap<String, Integer>(compositeMap6, map0, emptyMapMutator1);
      Object object0 = new Object();
      compositeMap7.get(object0);
      Map<Integer, HashMap<String, Object>>[] mapArray3 = (Map<Integer, HashMap<String, Object>>[]) Array.newInstance(Map.class, 2);
      EmptyMapMutator<Integer, HashMap<String, Object>> emptyMapMutator2 = new EmptyMapMutator<Integer, HashMap<String, Object>>();
      CompositeMap<Integer, HashMap<String, Object>> compositeMap8 = new CompositeMap<Integer, HashMap<String, Object>>(mapArray3, emptyMapMutator2);
      mapArray3[0] = (Map<Integer, HashMap<String, Object>>) compositeMap8;
      CompositeMap<Integer, HashMap<String, Object>> compositeMap9 = new CompositeMap<Integer, HashMap<String, Object>>();
      mapArray3[1] = (Map<Integer, HashMap<String, Object>>) compositeMap9;
      CompositeMap<Integer, HashMap<String, Object>> compositeMap10 = new CompositeMap<Integer, HashMap<String, Object>>(mapArray3);
      HashMap<Integer, HashMap<String, Object>> hashMap1 = new HashMap<Integer, HashMap<String, Object>>();
      compositeMap10.addComposited(hashMap1);
      assertTrue(compositeMap10.equals((Object)compositeMap8));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Map<String, Object>[] mapArray0 = (Map<String, Object>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      CompositeMap<String, Object> compositeMap0 = new CompositeMap<String, Object>(mapArray0, emptyMapMutator0);
      CompositeMap<String, Object> compositeMap1 = new CompositeMap<String, Object>(compositeMap0, compositeMap0, emptyMapMutator0);
      boolean boolean0 = compositeMap1.containsKey("");
      assertFalse(boolean0);
      
      HashMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      EmptyMapMutator<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> emptyMapMutator1 = new EmptyMapMutator<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      CompositeMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap2 = new CompositeMap<HashMap<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0, hashMap0, emptyMapMutator1);
      int int0 = compositeMap2.size();
      Map<Object, Object>[] mapArray1 = (Map<Object, Object>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Object, Object> emptyMapMutator2 = new EmptyMapMutator<Object, Object>();
      CompositeMap<Object, Object> compositeMap3 = new CompositeMap<Object, Object>(mapArray1, emptyMapMutator2);
      CompositeMap<Object, Object> compositeMap4 = new CompositeMap<Object, Object>(compositeMap3, compositeMap3, emptyMapMutator2);
      int int1 = compositeMap4.hashCode();
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> compositeMap0 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> compositeMap1 = new CompositeMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>(compositeMap0, compositeMap0);
      Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, Object>>> set0 = (Set<Map.Entry<String, AbstractMap.SimpleImmutableEntry<String, Object>>>)compositeMap1.entrySet();
      compositeMap1.remove((Object) set0);
      compositeMap1.mapIterator();
      compositeMap0.addComposited(compositeMap1);
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(mapArray0, emptyMapMutator0);
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>(compositeMap2, compositeMap2);
      Integer integer0 = new Integer(0);
      compositeMap3.equals(integer0);
      CompositeMap<String, Integer> compositeMap4 = new CompositeMap<String, Integer>();
      Map<String, Integer>[] mapArray1 = (Map<String, Integer>[]) Array.newInstance(Map.class, 6);
      mapArray1[0] = (Map<String, Integer>) compositeMap4;
      mapArray1[1] = (Map<String, Integer>) compositeMap4;
      mapArray1[2] = (Map<String, Integer>) compositeMap4;
      mapArray1[3] = (Map<String, Integer>) compositeMap4;
      mapArray1[4] = (Map<String, Integer>) compositeMap4;
      mapArray1[5] = (Map<String, Integer>) compositeMap4;
      CompositeMap<String, Integer> compositeMap5 = new CompositeMap<String, Integer>(mapArray1);
      CompositeMap<String, Integer> compositeMap6 = new CompositeMap<String, Integer>(compositeMap4, compositeMap5);
      EmptyMapMutator<String, Integer> emptyMapMutator1 = new EmptyMapMutator<String, Integer>();
      CompositeMap<String, Integer> compositeMap7 = new CompositeMap<String, Integer>(mapArray1, emptyMapMutator1);
      Map<String, Integer> map0 = compositeMap6.removeComposited(compositeMap7);
      CompositeMap<String, Integer> compositeMap8 = new CompositeMap<String, Integer>(map0, mapArray1[5], emptyMapMutator1);
      compositeMap8.isEmpty();
      Map<String, Object>[] mapArray2 = (Map<String, Object>[]) Array.newInstance(Map.class, 1);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      CompositeMap<String, Object> compositeMap9 = new CompositeMap<String, Object>(hashMap0, mapArray2[0]);
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> emptyMapMutator2 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap10 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap1, hashMap1, emptyMapMutator2);
      Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>[] mapArray3 = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>[]) Array.newInstance(Map.class, 8);
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap11 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      mapArray3[0] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap11;
      mapArray3[1] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap1;
      mapArray3[2] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap1;
      mapArray3[3] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap1;
      CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> compositeMap12 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap1, mapArray3[2], emptyMapMutator2);
      mapArray3[4] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap12;
      mapArray3[5] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap10;
      mapArray3[6] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap10;
      mapArray3[7] = (Map<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>) compositeMap10;
      // Undeclared exception!
      try { 
        emptyMapMutator2.putAll(compositeMap10, mapArray3, mapArray3[4]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No mutator specified
         //
         verifyException("org.apache.commons.collections4.map.CompositeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Map<HashMap<String, String>, Object>[] mapArray0 = (Map<HashMap<String, String>, Object>[]) Array.newInstance(Map.class, 4);
      CompositeMap<HashMap<String, String>, Object> compositeMap0 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      CompositeMap<HashMap<String, String>, Object> compositeMap1 = new CompositeMap<HashMap<String, String>, Object>(compositeMap0, compositeMap0);
      EmptyMapMutator<HashMap<String, String>, Object> emptyMapMutator0 = new EmptyMapMutator<HashMap<String, String>, Object>();
      CompositeMap<HashMap<String, String>, Object> compositeMap2 = new CompositeMap<HashMap<String, String>, Object>(compositeMap1, compositeMap1, emptyMapMutator0);
      mapArray0[0] = (Map<HashMap<String, String>, Object>) compositeMap2;
      CompositeMap<HashMap<String, String>, Object> compositeMap3 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      mapArray0[1] = (Map<HashMap<String, String>, Object>) compositeMap3;
      compositeMap3.mapIterator();
      mapArray0[2] = (Map<HashMap<String, String>, Object>) compositeMap1;
      CompositeMap<HashMap<String, String>, Object> compositeMap4 = new CompositeMap<HashMap<String, String>, Object>();
      mapArray0[3] = (Map<HashMap<String, String>, Object>) compositeMap4;
      compositeMap1.hashCode();
      CompositeMap<HashMap<String, String>, Object> compositeMap5 = new CompositeMap<HashMap<String, String>, Object>(mapArray0);
      HashMap<HashMap<String, String>, Object> hashMap0 = new HashMap<HashMap<String, String>, Object>();
      EmptyMapMutator<HashMap<String, String>, Object> emptyMapMutator1 = new EmptyMapMutator<HashMap<String, String>, Object>();
      compositeMap4.setMutator(emptyMapMutator1);
      compositeMap5.removeComposited(hashMap0);
      compositeMap5.values();
      compositeMap5.equals(compositeMap0);
      CompositeMap<HashMap<Integer, Object>, AbstractMap.SimpleEntry<Object, String>> compositeMap6 = new CompositeMap<HashMap<Integer, Object>, AbstractMap.SimpleEntry<Object, String>>();
      compositeMap6.hashCode();
      Map<Integer, HashMap<Object, Object>>[] mapArray1 = null;
      CompositeMap.MapMutator<Integer, HashMap<Object, Object>> compositeMap_MapMutator0 = null;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        compositeMap1.computeIfPresent(hashMap1, (BiFunction<? super HashMap<String, String>, ? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      EmptyMapMutator<String, Object> emptyMapMutator0 = new EmptyMapMutator<String, Object>();
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, String> emptyMapMutator1 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      LinkedList<AbstractMap.SimpleImmutableEntry<String, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<String, String>>();
      emptyMapMutator1.resolveCollision((CompositeMap<AbstractMap.SimpleImmutableEntry<String, String>, String>) null, (Map<AbstractMap.SimpleImmutableEntry<String, String>, String>) null, (Map<AbstractMap.SimpleImmutableEntry<String, String>, String>) null, linkedList0);
      Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>[] mapArray0 = (Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>[]) Array.newInstance(Map.class, 0);
      EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> emptyMapMutator2 = new EmptyMapMutator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> compositeMap0 = new CompositeMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(mapArray0, emptyMapMutator2);
      Set<AbstractMap.SimpleImmutableEntry<Integer, Object>> set0 = compositeMap0.keySet();
      CompositeMap<Integer, HashMap<Object, Object>> compositeMap1 = new CompositeMap<Integer, HashMap<Object, Object>>();
      compositeMap1.remove((Object) set0);
      Map<Object, AbstractMap.SimpleEntry<String, Object>>[] mapArray1 = (Map<Object, AbstractMap.SimpleEntry<String, Object>>[]) Array.newInstance(Map.class, 26);
      EmptyMapMutator<Object, AbstractMap.SimpleEntry<String, Object>> emptyMapMutator3 = new EmptyMapMutator<Object, AbstractMap.SimpleEntry<String, Object>>();
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap2 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray1, emptyMapMutator3);
      mapArray1[5] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap2;
      HashMap<Object, AbstractMap.SimpleEntry<String, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      mapArray1[1] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) hashMap0;
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap3 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray1);
      mapArray1[2] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap3;
      mapArray1[3] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap2;
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap4 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      mapArray1[4] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap4;
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap5 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray1, emptyMapMutator3);
      mapArray1[5] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap5;
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap6 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray1);
      mapArray1[6] = (Map<Object, AbstractMap.SimpleEntry<String, Object>>) compositeMap6;
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap7 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(mapArray1, emptyMapMutator3);
      CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>> compositeMap8 = new CompositeMap<Object, AbstractMap.SimpleEntry<String, Object>>(compositeMap7, compositeMap3);
      compositeMap8.containsKey(emptyMapMutator2);
      EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> emptyMapMutator4 = new EmptyMapMutator<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> compositeMap9 = new CompositeMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>((Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null, (Map<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>) null, emptyMapMutator4);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = compositeMap9.remove((Object) compositeMap1);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CompositeMap<Object, AbstractMap.SimpleEntry<Integer, String>> compositeMap0 = new CompositeMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      Map<Integer, String>[] mapArray0 = (Map<Integer, String>[]) Array.newInstance(Map.class, 4);
      EmptyMapMutator<Integer, String> emptyMapMutator0 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap1 = new CompositeMap<Integer, String>(mapArray0, emptyMapMutator0);
      CompositeMap<Integer, String> compositeMap2 = new CompositeMap<Integer, String>(compositeMap1, compositeMap1);
      mapArray0[0] = (Map<Integer, String>) compositeMap2;
      CompositeMap<Integer, String> compositeMap3 = new CompositeMap<Integer, String>(compositeMap1, compositeMap1);
      mapArray0[1] = (Map<Integer, String>) compositeMap3;
      CompositeMap<Integer, String> compositeMap4 = new CompositeMap<Integer, String>(compositeMap2, compositeMap2, emptyMapMutator0);
      mapArray0[2] = (Map<Integer, String>) compositeMap4;
      CompositeMap<Integer, String> compositeMap5 = new CompositeMap<Integer, String>();
      mapArray0[3] = (Map<Integer, String>) compositeMap5;
      EmptyMapMutator<Integer, String> emptyMapMutator1 = new EmptyMapMutator<Integer, String>();
      CompositeMap<Integer, String> compositeMap6 = new CompositeMap<Integer, String>(mapArray0, emptyMapMutator1);
      compositeMap6.addComposited(compositeMap4);
      assertTrue(compositeMap4.equals((Object)compositeMap3));
  }
}
