/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:52:26 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.PassiveExpiringMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PassiveExpiringMap_ESTest extends PassiveExpiringMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, AbstractMap.SimpleEntry<Object, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, AbstractMap.SimpleEntry<Object, String>>((-1L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Object, Integer>(9223372036854775807L, timeUnit0);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<Object, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Object, Integer>((-1L), timeUnit0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer1 = passiveExpiringMap1.merge(passiveExpiringMap0, integer0, biFunction0);
      assertEquals(0, (int)integer1);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertFalse(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertFalse(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(integer1);
      
      Integer integer2 = passiveExpiringMap1.get(passiveExpiringMap0);
      assertEquals(0, (int)integer2);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertFalse(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertFalse(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(integer2);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object> passiveExpiringMap2 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Object>(0L);
      assertNotNull(passiveExpiringMap2);
      
      boolean boolean0 = passiveExpiringMap2.isEmpty();
      assertTrue(boolean0);
      
      PassiveExpiringMap<Integer, Long> passiveExpiringMap3 = new PassiveExpiringMap<Integer, Long>();
      assertNotNull(passiveExpiringMap3);
      
      MapIterator<Integer, Long> mapIterator0 = passiveExpiringMap3.mapIterator();
      assertNotNull(mapIterator0);
      
      boolean boolean1 = passiveExpiringMap3.containsValue(timeUnit0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PassiveExpiringMap<Object, HashMap<Object, Object>> passiveExpiringMap4 = new PassiveExpiringMap<Object, HashMap<Object, Object>>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap4);
      
      Set<Object> set0 = passiveExpiringMap4.keySet();
      assertFalse(set0.contains((-1L)));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Long long0 = Long.getLong("");
      assertNull(long0);
      
      HashMap<Object, Object> hashMap0 = passiveExpiringMap4.get((Object) null);
      assertNull(hashMap0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, String>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<Long, String> passiveExpiringMap5 = new PassiveExpiringMap<Long, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap5);
      
      int int0 = passiveExpiringMap5.size();
      assertEquals(0, int0);
      
      TimeUnit timeUnit1 = TimeUnit.NANOSECONDS;
      HashMap<Long, Integer> hashMap1 = new HashMap<Long, Integer>();
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(hashMap1);
      
      PassiveExpiringMap<Long, Integer> passiveExpiringMap6 = new PassiveExpiringMap<Long, Integer>(0, timeUnit1, hashMap1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      assertNotNull(passiveExpiringMap6);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, String>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2);
      
      PassiveExpiringMap<String, String> passiveExpiringMap7 = new PassiveExpiringMap<String, String>();
      assertNotNull(passiveExpiringMap7);
      
      PassiveExpiringMap<String, String> passiveExpiringMap8 = new PassiveExpiringMap<String, String>(0, timeUnit1, passiveExpiringMap7);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap8.equals((Object)passiveExpiringMap7));
      assertNotNull(passiveExpiringMap8);
      
      PassiveExpiringMap<String, String> passiveExpiringMap9 = new PassiveExpiringMap<String, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2, passiveExpiringMap8);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap7.equals((Object)passiveExpiringMap8));
      assertTrue(passiveExpiringMap8.equals((Object)passiveExpiringMap7));
      assertTrue(passiveExpiringMap9.equals((Object)passiveExpiringMap7));
      assertTrue(passiveExpiringMap9.equals((Object)passiveExpiringMap8));
      assertNotNull(passiveExpiringMap9);
      
      Set<String> set1 = passiveExpiringMap9.keySet();
      assertNotSame(passiveExpiringMap7, passiveExpiringMap9);
      assertNotSame(passiveExpiringMap7, passiveExpiringMap8);
      assertNotSame(passiveExpiringMap8, passiveExpiringMap7);
      assertNotSame(passiveExpiringMap8, passiveExpiringMap9);
      assertNotSame(passiveExpiringMap9, passiveExpiringMap8);
      assertNotSame(passiveExpiringMap9, passiveExpiringMap7);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap7.equals((Object)passiveExpiringMap9));
      assertTrue(passiveExpiringMap7.equals((Object)passiveExpiringMap8));
      assertTrue(passiveExpiringMap8.equals((Object)passiveExpiringMap7));
      assertTrue(passiveExpiringMap8.equals((Object)passiveExpiringMap9));
      assertTrue(passiveExpiringMap9.equals((Object)passiveExpiringMap7));
      assertTrue(passiveExpiringMap9.equals((Object)passiveExpiringMap8));
      assertFalse(set1.contains(""));
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertNotNull(set1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, Integer>(9223372036854775807L, timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<Long, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Long, Integer>(1L);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<Long, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Long, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      Long long0 = new Long((-1002L));
      assertEquals((-1002L), (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = passiveExpiringMap0.put(long0, integer0);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertNull(integer1);
      
      passiveExpiringMap1.putAll(passiveExpiringMap0);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      
      Set<Long> set0 = passiveExpiringMap1.keySet();
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertFalse(set0.contains(9223372036854775807L));
      assertTrue(set0.contains(long0));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Long>(1L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      Long long1 = new Long(1L);
      assertEquals(1L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      long long2 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1.expirationTime("Policy must not be null.", long1);
      assertEquals((-9223372036854775808L), long2);
      assertFalse(long1.equals((Object)long0));
      
      PassiveExpiringMap<Long, String> passiveExpiringMap2 = new PassiveExpiringMap<Long, String>(1L);
      assertNotNull(passiveExpiringMap2);
      
      String string0 = passiveExpiringMap2.put(long1, "Policy must not be null.");
      assertFalse(long1.equals((Object)long0));
      assertFalse(long1.equals((Object)long2));
      assertNull(string0);
      
      System.setCurrentTimeMillis((-9223372036854775808L));
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Object>((-1002L), timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2);
      
      TimeUnit timeUnit2 = TimeUnit.DAYS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy3 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, String>((-40L), timeUnit2);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy3);
      
      PassiveExpiringMap<Integer, String> passiveExpiringMap3 = new PassiveExpiringMap<Integer, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy3);
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertNotNull(passiveExpiringMap3);
      
      Collection<String> collection0 = passiveExpiringMap3.values();
      assertFalse(timeUnit2.equals((Object)timeUnit0));
      assertFalse(timeUnit2.equals((Object)timeUnit1));
      assertFalse(collection0.contains("Policy must not be null."));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PassiveExpiringMap<Object, Long> passiveExpiringMap0 = new PassiveExpiringMap<Object, Long>(2625L);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<Object, Long> passiveExpiringMap1 = new PassiveExpiringMap<Object, Long>(passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      Collection<Long> collection0 = passiveExpiringMap1.values();
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertFalse(collection0.contains(2625L));
      assertNotNull(collection0);
      
      MapIterator<Object, Long> mapIterator0 = passiveExpiringMap1.mapIterator();
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(mapIterator0);
      
      boolean boolean0 = passiveExpiringMap1.containsKey(passiveExpiringMap0);
      assertFalse(boolean0);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      
      PassiveExpiringMap<Long, Integer> passiveExpiringMap2 = null;
      try {
        passiveExpiringMap2 = new PassiveExpiringMap<Long, Integer>(2625L, (TimeUnit) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Time unit must not be null
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Long long0 = new Long(495L);
      assertEquals(495L, (long)long0);
      assertNotNull(long0);
      
      Integer integer0 = new Integer(1016);
      assertEquals(1016, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = hashMap0.put(long0, integer0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(integer1);
      
      PassiveExpiringMap<Long, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Long, Integer>(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(passiveExpiringMap0);
      
      Integer integer2 = passiveExpiringMap0.replace(long0, (Integer) null);
      assertEquals(1016, (int)integer2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(integer2);
      
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      boolean boolean1 = passiveExpiringMap0.isEmpty();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PassiveExpiringMap<HashMap<String, Object>, String> passiveExpiringMap1 = new PassiveExpiringMap<HashMap<String, Object>, String>(495L, timeUnit0);
      assertNotNull(passiveExpiringMap1);
      
      boolean boolean2 = passiveExpiringMap1.containsKey(hashMap0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<String, Object>, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("\"", timeUnit0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      long long1 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime(abstractMap_SimpleImmutableEntry0, passiveExpiringMap1);
      assertEquals((-1L), long1);
      
      HashMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, Integer>> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, Integer>>();
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(hashMap1);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, Integer>> passiveExpiringMap2 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, Integer>>(hashMap1);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
      assertNotNull(passiveExpiringMap2);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry2 = null;
      try {
        abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, Integer>((Map.Entry<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 338L;
      HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PassiveExpiringMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> passiveExpiringMap0 = new PassiveExpiringMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(passiveExpiringMap0);
      
      String string0 = "";
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>("", hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry1 = passiveExpiringMap0.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(abstractMap_SimpleImmutableEntry1);
      
      PassiveExpiringMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>> passiveExpiringMap1 = new PassiveExpiringMap<Object, AbstractMap.SimpleImmutableEntry<String, Object>>(338L, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(passiveExpiringMap1);
      
      // Undeclared exception!
      try { 
        passiveExpiringMap1.remove((Object) hashMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-1L);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Integer>((-1L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Object, Integer>(1036L);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<Object, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Object, Integer>(350L, timeUnit0, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap<Object, Integer> passiveExpiringMap2 = new PassiveExpiringMap<Object, Integer>(9223372036854775807L, timeUnit0, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNotNull(passiveExpiringMap2);
      
      passiveExpiringMap0.map = (Map<Object, Integer>) passiveExpiringMap1;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap3 = new PassiveExpiringMap<Object, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap2);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap3);
      
      // Undeclared exception!
      try { 
        passiveExpiringMap3.get(passiveExpiringMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap0 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      MapIterator<String, Integer> mapIterator0 = passiveExpiringMap0.mapIterator();
      assertNotNull(mapIterator0);
      
      Collection<Integer> collection0 = passiveExpiringMap0.values();
      assertNotNull(collection0);
      
      Set<Map.Entry<String, Integer>> set0 = (Set<Map.Entry<String, Integer>>)passiveExpiringMap0.entrySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        passiveExpiringMap0.putAll((Map<? extends String, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Integer, Integer>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap0);
      
      boolean boolean0 = passiveExpiringMap0.containsKey(timeUnit0);
      assertFalse(boolean0);
      
      int int0 = (-1307);
      Integer integer0 = new Integer((-1307));
      assertEquals((-1307), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = passiveExpiringMap0.put(integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNull(integer1);
      
      long long0 = (-1248L);
      Map<HashMap<String, Object>, Long> map0 = null;
      PassiveExpiringMap<HashMap<String, Object>, Long> passiveExpiringMap1 = null;
      try {
        passiveExpiringMap1 = new PassiveExpiringMap<HashMap<String, Object>, Long>((-1248L), (Map<HashMap<String, Object>, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> passiveExpiringMap1 = null;
      try {
        passiveExpiringMap1 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>((PassiveExpiringMap.ExpirationPolicy<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>) null, passiveExpiringMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<String, Object>, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<String, Object>, String>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<AbstractMap.SimpleEntry<String, Object>, String> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleEntry<String, Object>, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object>((-991L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      long long0 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime("G(|VioAbN2`%sBC~", "G(|VioAbN2`%sBC~");
      assertEquals((-1L), long0);
      
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Long>(4857L, timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<String, Long> passiveExpiringMap0 = new PassiveExpiringMap<String, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<String, Long> passiveExpiringMap1 = new PassiveExpiringMap<String, Long>(1L, timeUnit0, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      Long long1 = new Long((-1L));
      assertEquals((-1L), (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = passiveExpiringMap1.putIfAbsent("G(|VioAbN2`%sBC~", long1);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(long1.equals((Object)long0));
      assertNull(long2);
      
      PassiveExpiringMap<String, Long> passiveExpiringMap2 = new PassiveExpiringMap<String, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNotNull(passiveExpiringMap2);
      
      Long long3 = new Long(9223372036854775807L);
      assertEquals(9223372036854775807L, (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNotNull(long3);
      
      Long long4 = passiveExpiringMap2.putIfAbsent((String) null, long3);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertNull(long4);
      
      Long long5 = passiveExpiringMap2.remove((Object) "G(|VioAbN2`%sBC~");
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNull(long5);
      
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap3 = new PassiveExpiringMap<Object, Integer>(1L, timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(passiveExpiringMap3);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = passiveExpiringMap3.put(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, integer0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNull(integer1);
      
      Set<Map.Entry<Object, Integer>> set0 = (Set<Map.Entry<Object, Integer>>)passiveExpiringMap3.entrySet();
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertNotNull(set0);
      
      PassiveExpiringMap<Object, Object> passiveExpiringMap4 = new PassiveExpiringMap<Object, Object>();
      assertNotNull(passiveExpiringMap4);
      
      int int0 = passiveExpiringMap4.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Long, String>, HashMap<Integer, Object>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Long, String>, HashMap<Integer, Object>>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<HashMap<Long, String>, HashMap<Integer, Object>> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Long, String>, HashMap<Integer, Object>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Integer, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Integer, String>>(2248L, timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      long long0 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1.expirationTime("", (AbstractMap.SimpleEntry<Integer, String>) null);
      assertEquals(1392544161320L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>((-381L));
      assertNotNull(passiveExpiringMap0);
      
      Object object0 = passiveExpiringMap0.get((Object) null);
      assertNull(object0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<String, Object>, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<String, Object>, String>((-381L), timeUnit1);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<HashMap<String, Object>, String> passiveExpiringMap1 = new PassiveExpiringMap<HashMap<String, Object>, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap<HashMap<String, Object>, String> passiveExpiringMap2 = new PassiveExpiringMap<HashMap<String, Object>, String>((-88L), timeUnit0, passiveExpiringMap1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNotNull(passiveExpiringMap2);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Collection<String> collection0 = passiveExpiringMap1.values();
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = passiveExpiringMap2.containsValue(integer0);
      assertFalse(boolean0);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      
      String string0 = passiveExpiringMap2.put(hashMap0, "");
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertFalse(timeUnit0.equals((Object)timeUnit1));
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(string0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, String>((-88L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<Object, String> passiveExpiringMap3 = new PassiveExpiringMap<Object, String>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap3);
      
      passiveExpiringMap3.putAll(passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertFalse(timeUnit1.equals((Object)timeUnit0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      
      int int0 = passiveExpiringMap3.size();
      assertEquals(1, int0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, HashMap<String, Object>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, HashMap<String, Object>>(0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2);
      
      Long long0 = new Long(1273L);
      assertEquals(1273L, (long)long0);
      assertNotNull(long0);
      
      long long1 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2.expirationTime(long0, hashMap0);
      assertEquals(1392409281320L, long1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>((-1678L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Object, Integer>, AbstractMap.SimpleEntry<Object, Integer>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Long>((-1678L), timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      long long1 = Long.min(7245L, (-203L));
      assertEquals((-203L), long1);
      
      long long2 = passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1.expirationTime(long0, long0);
      assertEquals((-1L), long2);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 140L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<Object, Long>> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<Object, Long>>(0L, timeUnit1, (Map<Long, AbstractMap.SimpleImmutableEntry<Object, Long>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PassiveExpiringMap<String, Object> passiveExpiringMap0 = new PassiveExpiringMap<String, Object>(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(passiveExpiringMap0);
      
      int int0 = passiveExpiringMap0.size();
      assertEquals(0, int0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PassiveExpiringMap<Object, String> passiveExpiringMap1 = null;
      try {
        passiveExpiringMap1 = new PassiveExpiringMap<Object, String>((PassiveExpiringMap.ExpirationPolicy<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, String> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, String>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PassiveExpiringMap.ExpirationPolicy<Long, Integer> passiveExpiringMap_ExpirationPolicy0 = null;
      PassiveExpiringMap<Long, Integer> passiveExpiringMap0 = null;
      try {
        passiveExpiringMap0 = new PassiveExpiringMap<Long, Integer>((PassiveExpiringMap.ExpirationPolicy<Long, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      PassiveExpiringMap<Integer, String> passiveExpiringMap0 = new PassiveExpiringMap<Integer, String>(0L, timeUnit0, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<Integer, String> passiveExpiringMap1 = new PassiveExpiringMap<Integer, String>(3092L, passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer>(3092L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap2 = null;
      try {
        passiveExpiringMap2 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, (Map<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 3517L;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleImmutableEntry<String, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleImmutableEntry<String, String>>(3517L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<String, String>> passiveExpiringMap0 = new PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<String, String>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = passiveExpiringMap0.get(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      boolean boolean0 = passiveExpiringMap0.containsKey(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertFalse(boolean0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, Integer>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<Object, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Object, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap<Object, Integer> passiveExpiringMap2 = new PassiveExpiringMap<Object, Integer>(passiveExpiringMap1);
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNotNull(passiveExpiringMap2);
      
      Collection<Integer> collection0 = passiveExpiringMap2.values();
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertNotNull(collection0);
      
      passiveExpiringMap2.putAll(passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      
      boolean boolean1 = passiveExpiringMap2.containsValue(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertFalse(boolean1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertTrue(boolean1 == boolean0);
      
      Set<Object> set0 = passiveExpiringMap2.keySet();
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertFalse(set0.contains(3517L));
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, AbstractMap.SimpleImmutableEntry<String, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Long, AbstractMap.SimpleImmutableEntry<String, String>>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2);
      
      PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<String, String>> passiveExpiringMap3 = new PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<String, String>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy2);
      assertNotNull(passiveExpiringMap3);
      
      PassiveExpiringMap<Object, Long> passiveExpiringMap4 = null;
      try {
        passiveExpiringMap4 = new PassiveExpiringMap<Object, Long>((Map<Object, Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, String>, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, String>, Object>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      PassiveExpiringMap<HashMap<Object, Object>, String> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Object, Object>, String>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap0);
      
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = passiveExpiringMap0.putIfAbsent(hashMap0, "[;eM(h");
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(string0);
      
      Collection<String> collection0 = passiveExpiringMap0.values();
      assertFalse(collection0.contains("[;eM(h"));
      assertNotNull(collection0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap1 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap1);
      
      Collection<Integer> collection1 = passiveExpiringMap1.values();
      assertNotNull(collection1);
      
      PassiveExpiringMap<Integer, Long> passiveExpiringMap2 = new PassiveExpiringMap<Integer, Long>(0L);
      assertNotNull(passiveExpiringMap2);
      
      boolean boolean0 = passiveExpiringMap2.containsValue(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(0L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      passiveExpiringMap0.clear();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PassiveExpiringMap<String, String> passiveExpiringMap0 = new PassiveExpiringMap<String, String>();
      assertNotNull(passiveExpiringMap0);
      
      Collection<String> collection0 = passiveExpiringMap0.values();
      assertNotNull(collection0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, Integer>, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Object, Integer>, Long>((-560L));
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Long> passiveExpiringMap1 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap1);
      
      boolean boolean0 = passiveExpiringMap1.containsValue("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap<HashMap<Long, String>, String> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Long, String>, String>(0L, timeUnit0);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Object>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<String, Object> passiveExpiringMap1 = new PassiveExpiringMap<String, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, Integer>(0L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap2 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1);
      assertNotNull(passiveExpiringMap2);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap3 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1, passiveExpiringMap2);
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap2));
      assertNotNull(passiveExpiringMap3);
      
      PassiveExpiringMap<String, Integer> passiveExpiringMap4 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1, passiveExpiringMap3);
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap3));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap4.equals((Object)passiveExpiringMap3));
      assertTrue(passiveExpiringMap4.equals((Object)passiveExpiringMap2));
      assertNotNull(passiveExpiringMap4);
      
      passiveExpiringMap1.putAll(passiveExpiringMap4);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap3);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap4);
      assertNotSame(passiveExpiringMap3, passiveExpiringMap4);
      assertNotSame(passiveExpiringMap3, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap4, passiveExpiringMap3);
      assertNotSame(passiveExpiringMap4, passiveExpiringMap2);
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap4));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap3));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap3.equals((Object)passiveExpiringMap4));
      assertTrue(passiveExpiringMap4.equals((Object)passiveExpiringMap3));
      assertTrue(passiveExpiringMap4.equals((Object)passiveExpiringMap2));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap<Long, String> passiveExpiringMap0 = new PassiveExpiringMap<Long, String>((-642L), timeUnit0);
      assertNotNull(passiveExpiringMap0);
      
      Set<Map.Entry<Long, String>> set0 = (Set<Map.Entry<Long, String>>)passiveExpiringMap0.entrySet();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      PassiveExpiringMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>> passiveExpiringMap1 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>>((-642L), timeUnit0);
      assertNotNull(passiveExpiringMap1);
      
      boolean boolean0 = passiveExpiringMap1.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Integer, String>, Long> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Integer, String>, Long>(706L);
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Long> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Long>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer> passiveExpiringMap0 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer>(3052L);
      assertNotNull(passiveExpiringMap0);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer> passiveExpiringMap1 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer>(passiveExpiringMap0);
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap1);
      
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer> passiveExpiringMap2 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<Integer, Long>, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
      assertNotNull(passiveExpiringMap2);
      
      boolean boolean0 = passiveExpiringMap2.containsValue(passiveExpiringMap1);
      assertFalse(boolean0);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap0, passiveExpiringMap1);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap1, passiveExpiringMap2);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap0);
      assertNotSame(passiveExpiringMap2, passiveExpiringMap1);
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap0.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap0));
      assertTrue(passiveExpiringMap1.equals((Object)passiveExpiringMap2));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap1));
      assertTrue(passiveExpiringMap2.equals((Object)passiveExpiringMap0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = (-368L);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Object, Integer>, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<HashMap<Object, Integer>, Object>();
      assertNotNull(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      
      PassiveExpiringMap<HashMap<Object, Integer>, Object> passiveExpiringMap0 = new PassiveExpiringMap<HashMap<Object, Integer>, Object>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0);
      assertNotNull(passiveExpiringMap0);
      
      boolean boolean0 = passiveExpiringMap0.isEmpty();
      assertTrue(boolean0);
      
      PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<Integer, Long>> passiveExpiringMap1 = new PassiveExpiringMap<Long, AbstractMap.SimpleImmutableEntry<Integer, Long>>();
      assertNotNull(passiveExpiringMap1);
      
      long long1 = 0L;
      Long long2 = new Long(0L);
      assertEquals(0L, (long)long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      
      AbstractMap.SimpleImmutableEntry<Integer, Long> abstractMap_SimpleImmutableEntry0 = passiveExpiringMap1.remove((Object) long2);
      assertTrue(long2.equals((Object)long1));
      assertFalse(long2.equals((Object)long0));
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<String, Long> passiveExpiringMap2 = new PassiveExpiringMap<String, Long>(17L, timeUnit0);
      assertNotNull(passiveExpiringMap2);
      
      PassiveExpiringMap<Integer, HashMap<Integer, String>> passiveExpiringMap3 = new PassiveExpiringMap<Integer, HashMap<Integer, String>>(17L);
      assertNotNull(passiveExpiringMap3);
      
      passiveExpiringMap2.clear();
      PassiveExpiringMap.ExpirationPolicy<Object, Integer> passiveExpiringMap_ExpirationPolicy0 = null;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap4 = null;
      try {
        passiveExpiringMap4 = new PassiveExpiringMap<Object, Integer>((PassiveExpiringMap.ExpirationPolicy<Object, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Policy must not be null.
         //
         verifyException("org.apache.commons.collections4.map.PassiveExpiringMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PassiveExpiringMap<Object, Long> passiveExpiringMap0 = new PassiveExpiringMap<Object, Long>(2625L);
      PassiveExpiringMap<Object, Long> passiveExpiringMap1 = new PassiveExpiringMap<Object, Long>(passiveExpiringMap0);
      passiveExpiringMap1.values();
      passiveExpiringMap1.mapIterator();
      passiveExpiringMap1.containsKey(passiveExpiringMap0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap<Long, Integer> passiveExpiringMap2 = new PassiveExpiringMap<Long, Integer>(2625L, timeUnit0);
      passiveExpiringMap2.get(passiveExpiringMap0);
      TimeUnit timeUnit1 = TimeUnit.SECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Long, Integer>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<String, AbstractMap.SimpleEntry<Long, Integer>>();
      HashMap<String, AbstractMap.SimpleEntry<Long, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Long, Integer>>();
      PassiveExpiringMap<String, AbstractMap.SimpleEntry<Long, Integer>> passiveExpiringMap3 = new PassiveExpiringMap<String, AbstractMap.SimpleEntry<Long, Integer>>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0, hashMap0);
      AbstractMap.SimpleEntry<Long, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Long, Integer>((Long) null, (Integer) null);
      hashMap0.put("9]Fd+Kn:%jFL", abstractMap_SimpleEntry0);
      PassiveExpiringMap<String, AbstractMap.SimpleEntry<Long, Integer>> passiveExpiringMap4 = new PassiveExpiringMap<String, AbstractMap.SimpleEntry<Long, Integer>>((-1L), timeUnit1, passiveExpiringMap3);
      passiveExpiringMap4.putAll(passiveExpiringMap3);
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      PassiveExpiringMap<String, Integer> passiveExpiringMap5 = new PassiveExpiringMap<String, Integer>((-1L), timeUnit2);
      PassiveExpiringMap<String, Integer> passiveExpiringMap6 = new PassiveExpiringMap<String, Integer>(passiveExpiringMap5);
      passiveExpiringMap6.get(hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap7 = new PassiveExpiringMap<Integer, Integer>((-3167L), timeUnit2, hashMap1);
      passiveExpiringMap7.containsValue(passiveExpiringMap6);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Integer>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Integer>>((-1L));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>("9]Fd+Kn:%jFL", "V*G2.>[WP.D|[");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap<String, Long> passiveExpiringMap0 = new PassiveExpiringMap<String, Long>(1462L, timeUnit0);
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Object>(1462L);
      Integer integer0 = new Integer(0);
      passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0.expirationTime(integer0, integer0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Integer> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Integer, Integer>(1462L, timeUnit1);
      TimeUnit timeUnit2 = TimeUnit.MICROSECONDS;
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Integer, Integer>(212L, timeUnit2);
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap2 = new PassiveExpiringMap<Integer, Integer>(passiveExpiringMap_ConstantTimeToLiveExpirationPolicy1, passiveExpiringMap1);
      Long long0 = new Long(1462L);
      Integer integer1 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer(0);
      passiveExpiringMap1.putIfAbsent(integer2, integer2);
      passiveExpiringMap2.merge(integer1, integer0, biFunction0);
      passiveExpiringMap1.remove((Object) passiveExpiringMap2, (Object) long0);
      PassiveExpiringMap<Integer, Integer> passiveExpiringMap3 = new PassiveExpiringMap<Integer, Integer>(passiveExpiringMap2);
      passiveExpiringMap3.entrySet();
      passiveExpiringMap0.keySet();
      PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Object>, Long> passiveExpiringMap4 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Object, Object>, Long>();
      Long long1 = new Long(1392409282782L);
      boolean boolean0 = passiveExpiringMap4.containsKey(long1);
      PassiveExpiringMap<Object, Long> passiveExpiringMap5 = new PassiveExpiringMap<Object, Long>(1392409282782L);
      PassiveExpiringMap<Object, Long> passiveExpiringMap6 = new PassiveExpiringMap<Object, Long>(9223372036854775807L, passiveExpiringMap5);
      passiveExpiringMap6.get((Object) null);
      passiveExpiringMap6.clear();
      passiveExpiringMap0.containsKey(timeUnit0);
      PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Object>, String> passiveExpiringMap7 = new PassiveExpiringMap<AbstractMap.SimpleEntry<Integer, Object>, String>();
      passiveExpiringMap7.entrySet();
      PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> passiveExpiringMap8 = new PassiveExpiringMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>(4255L, timeUnit1);
      boolean boolean1 = passiveExpiringMap8.containsKey("y\"i(L'xc");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, AbstractMap.SimpleEntry<Object, String>> passiveExpiringMap_ConstantTimeToLiveExpirationPolicy0 = new PassiveExpiringMap.ConstantTimeToLiveExpirationPolicy<Object, AbstractMap.SimpleEntry<Object, String>>((-1L));
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      PassiveExpiringMap<Object, Integer> passiveExpiringMap0 = new PassiveExpiringMap<Object, Integer>(9223372036854775807L, timeUnit0);
      PassiveExpiringMap<Object, Integer> passiveExpiringMap1 = new PassiveExpiringMap<Object, Integer>(passiveExpiringMap0);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      passiveExpiringMap1.merge(passiveExpiringMap0, integer0, biFunction0);
      // Undeclared exception!
      try { 
        passiveExpiringMap1.get(passiveExpiringMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PassiveExpiringMap<Object, Long> passiveExpiringMap0 = new PassiveExpiringMap<Object, Long>();
      PassiveExpiringMap<String, Integer> passiveExpiringMap1 = new PassiveExpiringMap<String, Integer>((-2502L));
      passiveExpiringMap1.size();
      Set<String> set0 = passiveExpiringMap1.keySet();
      passiveExpiringMap1.size();
      Integer integer0 = new Integer((-896));
      passiveExpiringMap1.put("org.apache.commons.collections4.map.PassiveExpiringMap", integer0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PassiveExpiringMap<String, Long> passiveExpiringMap2 = new PassiveExpiringMap<String, Long>((-2502L));
      PassiveExpiringMap<String, Long> passiveExpiringMap3 = new PassiveExpiringMap<String, Long>(0L, timeUnit0, passiveExpiringMap2);
      passiveExpiringMap3.remove((Object) integer0);
      PassiveExpiringMap<Object, Object> passiveExpiringMap4 = new PassiveExpiringMap<Object, Object>((-613L));
      passiveExpiringMap4.keySet();
      PassiveExpiringMap<Integer, String> passiveExpiringMap5 = new PassiveExpiringMap<Integer, String>(2724L);
      passiveExpiringMap5.replace((Integer) null, "");
      PassiveExpiringMap<Integer, String> passiveExpiringMap6 = new PassiveExpiringMap<Integer, String>(0, passiveExpiringMap5);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      PassiveExpiringMap<Long, Object> passiveExpiringMap7 = new PassiveExpiringMap<Long, Object>(0L, timeUnit0, hashMap0);
      Long long0 = new Long((-613L));
      passiveExpiringMap7.put(long0, passiveExpiringMap1);
      passiveExpiringMap4.put(passiveExpiringMap7, set0);
      passiveExpiringMap4.containsValue(long0);
      PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> passiveExpiringMap8 = new PassiveExpiringMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer1 = new Integer((-2202));
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = passiveExpiringMap8.get(integer1);
      assertNull(abstractMap_SimpleImmutableEntry0);
  }
}
