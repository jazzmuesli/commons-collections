/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:30:03 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractHashedMap_ESTest extends AbstractHashedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AbstractHashedMap<String, Map.Entry<Object, BufferedInputStream>> abstractHashedMap0 = new AbstractHashedMap<String, Map.Entry<Object, BufferedInputStream>>(0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      Iterator<String> iterator0 = abstractHashedMap0.createKeySetIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(iterator0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      int int1 = abstractHashedMap0.hashCode();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(int1 == int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Set<String> set0 = abstractHashedMap0.keySet();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int2 = 2567;
      int int3 = (-3);
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<BufferedInputStream, String>, Comparable<Integer>> abstractHashedMap1 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<BufferedInputStream, String>, Comparable<Integer>>(2567, 2567, (-3));
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      abstractHashedMap1.clear();
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      
      Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<BufferedInputStream, String>, Comparable<Integer>>> iterator1 = (Iterator<Map.Entry<AbstractMap.SimpleImmutableEntry<BufferedInputStream, String>, Comparable<Integer>>>)abstractHashedMap1.createEntrySetIterator();
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(iterator1);
      
      AbstractHashedMap<Comparable<Object>, InputStream> abstractHashedMap2 = new AbstractHashedMap<Comparable<Object>, InputStream>();
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      Set<Map.Entry<Comparable<Object>, InputStream>> set1 = (Set<Map.Entry<Comparable<Object>, InputStream>>)abstractHashedMap2.entrySet();
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotNull(set1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap2.isEqualValue((Object) null, "Qiat(7S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = 0;
      AbstractHashedMap<BufferedInputStream, InputStream> abstractHashedMap1 = new AbstractHashedMap<BufferedInputStream, InputStream>(0);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.HashEntry<BufferedInputStream, InputStream> abstractHashedMap_HashEntry0 = abstractHashedMap1.getEntry((Object) null);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNull(abstractHashedMap_HashEntry0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AbstractHashedMap.HashEntry<String, Integer> abstractHashedMap_HashEntry1 = new AbstractHashedMap.HashEntry<String, Integer>((AbstractHashedMap.HashEntry<String, Integer>) null, 0, (Object) null, integer0);
      assertNotNull(abstractHashedMap_HashEntry1);
      assertTrue(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = abstractHashedMap_HashEntry1.setValue(integer1);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      
      AbstractHashedMap<Integer, String> abstractHashedMap2 = new AbstractHashedMap<Integer, String>();
      assertTrue(abstractHashedMap2.isEmpty());
      assertEquals(0, abstractHashedMap2.size());
      assertNotNull(abstractHashedMap2);
      
      boolean boolean0 = abstractHashedMap_HashEntry1.equals(abstractHashedMap2);
      assertFalse(boolean0);
      assertTrue(abstractHashedMap2.isEmpty());
      assertEquals(0, abstractHashedMap2.size());
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = abstractHashedMap_HashEntry1.getKey();
      assertNull(string0);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)int0));
      
      AbstractHashedMap<String, Object> abstractHashedMap3 = null;
      try {
        abstractHashedMap3 = new AbstractHashedMap<String, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = new AbstractHashedMap<Object, Integer>(0, 0, 0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      Iterator<Integer> iterator0 = abstractHashedMap0.createValuesIterator();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(iterator0);
      
      AbstractHashedMap.Values<Integer> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap_Values0.size());
      assertNotNull(abstractHashedMap_Values0);
      assertFalse(abstractHashedMap_Values0.contains(0));
      
      int int1 = 545;
      AbstractHashedMap<String, AbstractMap.SimpleEntry<Object, Object>> abstractHashedMap1 = new AbstractHashedMap<String, AbstractMap.SimpleEntry<Object, Object>>(545, 0.0F, (-1));
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap<String, String> abstractHashedMap2 = new AbstractHashedMap<String, String>(0);
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      AbstractHashedMap.KeySet<String> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<String>(abstractHashedMap2);
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractHashedMap_KeySet0);
      
      abstractHashedMap1.keySet = abstractHashedMap_KeySet0;
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertEquals(0, abstractHashedMap1.keySet.size());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 545);
      assertNotNull(bufferedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      
      abstractHashedMap1.doWriteObject(objectOutputStream0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      
      abstractHashedMap1.threshold = 3001;
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      
      Set<String> set0 = abstractHashedMap1.keySet();
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      AbstractHashedMap<HashMap<Integer, String>, String> abstractHashedMap3 = null;
      try {
        abstractHashedMap3 = new AbstractHashedMap<HashMap<Integer, String>, String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = new AbstractHashedMap<Object, Integer>(0, 0, 0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Iterator<Integer> iterator0 = abstractHashedMap0.createValuesIterator();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(iterator0);
      
      AbstractHashedMap.Values<Integer> abstractHashedMap_Values0 = new AbstractHashedMap.Values<Integer>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap_Values0.size());
      assertNotNull(abstractHashedMap_Values0);
      assertFalse(abstractHashedMap_Values0.contains(int0));
      
      int int1 = 545;
      AbstractHashedMap<String, AbstractMap.SimpleEntry<Object, Object>> abstractHashedMap1 = new AbstractHashedMap<String, AbstractMap.SimpleEntry<Object, Object>>(545, 0.0F, (-1));
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 545);
      assertNotNull(bufferedOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      
      abstractHashedMap1.doWriteObject(objectOutputStream0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      
      abstractHashedMap1.size = (-2412);
      assertFalse(abstractHashedMap1.isEmpty());
      assertEquals((-2412), abstractHashedMap1.size());
      
      abstractHashedMap1.threshold = 3001;
      assertFalse(abstractHashedMap1.isEmpty());
      assertEquals((-2412), abstractHashedMap1.size());
      
      Set<String> set0 = abstractHashedMap1.keySet();
      assertFalse(abstractHashedMap1.isEmpty());
      assertEquals((-2412), abstractHashedMap1.size());
      assertFalse(set0.isEmpty());
      assertEquals((-2412), set0.size());
      assertNotNull(set0);
      
      AbstractHashedMap<HashMap<Integer, String>, String> abstractHashedMap2 = null;
      try {
        abstractHashedMap2 = new AbstractHashedMap<HashMap<Integer, String>, String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection0 = abstractHashedMap0.values();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(collection0);
      
      Collection<AbstractMap.SimpleImmutableEntry<Object, String>> collection1 = abstractHashedMap0.values();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      
      abstractHashedMap0.loadFactor = (float) 0;
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      
      AbstractHashedMap<Integer, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap1 = new AbstractHashedMap<Integer, AbstractMap.SimpleEntry<Object, String>>(0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      abstractHashedMap1.loadFactor = (float) 0;
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      
      AbstractHashedMap.HashMapIterator<Integer, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<Integer, AbstractMap.SimpleEntry<Object, String>>(abstractHashedMap1);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      MapIterator<Integer, AbstractMap.SimpleEntry<Object, String>> mapIterator0 = abstractHashedMap1.mapIterator();
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertFalse(mapIterator0.hasNext());
      assertNotNull(mapIterator0);
      
      AbstractHashedMap.Values<AbstractMap.SimpleEntry<Object, String>> abstractHashedMap_Values0 = new AbstractHashedMap.Values<AbstractMap.SimpleEntry<Object, String>>(abstractHashedMap1);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, abstractHashedMap_Values0.size());
      assertNotNull(abstractHashedMap_Values0);
      
      boolean boolean0 = abstractHashedMap_Values0.contains(abstractHashedMap1);
      assertFalse(boolean0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, abstractHashedMap_Values0.size());
      
      int int0 = (-1004);
      AbstractHashedMap<String, String> abstractHashedMap2 = null;
      try {
        abstractHashedMap2 = new AbstractHashedMap<String, String>((-1004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 21;
      AbstractHashedMap<Map.Entry<String, InputStream>, String> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<String, InputStream>, String>(21, 21);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Map.Entry<String, InputStream>, String> abstractHashedMap1 = new AbstractHashedMap<Map.Entry<String, InputStream>, String>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      assertTrue(abstractHashedMap1.equals((Object)abstractHashedMap0));
      
      Set<Map.Entry<Map.Entry<String, InputStream>, String>> set0 = (Set<Map.Entry<Map.Entry<String, InputStream>, String>>)abstractHashedMap1.entrySet();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertNotSame(abstractHashedMap0, abstractHashedMap1);
      assertNotSame(abstractHashedMap1, abstractHashedMap0);
      assertTrue(abstractHashedMap0.equals((Object)abstractHashedMap1));
      assertTrue(abstractHashedMap1.equals((Object)abstractHashedMap0));
      
      float float0 = 1.0F;
      AbstractHashedMap<Object, Object> abstractHashedMap2 = new AbstractHashedMap<Object, Object>(21, 1.0F);
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      int int1 = abstractHashedMap2.calculateThreshold(8, (-3319.21F));
      assertEquals((-26553), int1);
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertFalse(int1 == int0);
      
      AbstractHashedMap<Map.Entry<String, InputStream>, BufferedInputStream> abstractHashedMap3 = new AbstractHashedMap<Map.Entry<String, InputStream>, BufferedInputStream>(21);
      assertEquals(0, abstractHashedMap3.size());
      assertTrue(abstractHashedMap3.isEmpty());
      assertNotNull(abstractHashedMap3);
      
      // Undeclared exception!
      try { 
        abstractHashedMap3.clone();
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractHashedMap<BufferedInputStream, InputStream> abstractHashedMap1 = new AbstractHashedMap<BufferedInputStream, InputStream>(0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.HashEntry<BufferedInputStream, InputStream> abstractHashedMap_HashEntry0 = abstractHashedMap1.getEntry((Object) null);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNull(abstractHashedMap_HashEntry0);
      
      Integer integer0 = new Integer((-575));
      assertEquals((-575), (int)integer0);
      assertNotNull(integer0);
      
      AbstractHashedMap.HashEntry<String, Integer> abstractHashedMap_HashEntry1 = new AbstractHashedMap.HashEntry<String, Integer>((AbstractHashedMap.HashEntry<String, Integer>) null, 0, (Object) null, integer0);
      assertNotNull(abstractHashedMap_HashEntry1);
      
      AbstractHashedMap<Integer, String> abstractHashedMap2 = new AbstractHashedMap<Integer, String>();
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      boolean boolean0 = abstractHashedMap_HashEntry1.equals(abstractHashedMap2);
      assertFalse(boolean0);
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      
      String string0 = abstractHashedMap_HashEntry1.getKey();
      assertNull(string0);
      
      AbstractHashedMap<String, Object> abstractHashedMap3 = null;
      try {
        abstractHashedMap3 = new AbstractHashedMap<String, Object>((-575), (-575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractHashedMap<InputStream, HashMap<String, InputStream>> abstractHashedMap0 = new AbstractHashedMap<InputStream, HashMap<String, InputStream>>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 865;
      HashMap<String, InputStream> hashMap0 = new HashMap<String, InputStream>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      AbstractHashedMap.HashEntry<InputStream, HashMap<String, InputStream>> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<InputStream, HashMap<String, InputStream>>((AbstractHashedMap.HashEntry<InputStream, HashMap<String, InputStream>>) null, 865, (Object) null, hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(abstractHashedMap_HashEntry0);
      
      abstractHashedMap_HashEntry0.value = (Object) abstractHashedMap0;
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HashMap<String, InputStream> hashMap1 = abstractHashedMap0.entryValue(abstractHashedMap_HashEntry0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap1);
      assertTrue(hashMap1.equals((Object)hashMap0));
      
      AbstractHashedMap<Map.Entry<Object, BufferedInputStream>, Map.Entry<String, Object>> abstractHashedMap1 = null;
      try {
        abstractHashedMap1 = new AbstractHashedMap<Map.Entry<Object, BufferedInputStream>, Map.Entry<String, Object>>((-2956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 43;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      float float0 = 737.474F;
      AbstractHashedMap<Map.Entry<InputStream, Map.Entry<String, InputStream>>, Comparable<BufferedInputStream>> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<InputStream, Map.Entry<String, InputStream>>, Comparable<BufferedInputStream>>(43, 737.474F);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<Object, InputStream>> abstractHashedMap0 = new AbstractHashedMap<Integer, AbstractMap.SimpleImmutableEntry<Object, InputStream>>(3);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      abstractHashedMap0.clear();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      
      abstractHashedMap0.addEntry((AbstractHashedMap.HashEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, InputStream>>) null, 3);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      
      AbstractHashedMap<Integer, AbstractMap.SimpleEntry<Object, String>> abstractHashedMap1 = new AbstractHashedMap<Integer, AbstractMap.SimpleEntry<Object, String>>(3);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      HashMap<InputStream, BufferedInputStream> hashMap0 = new HashMap<InputStream, BufferedInputStream>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      AbstractHashedMap<Object, InputStream> abstractHashedMap2 = new AbstractHashedMap<Object, InputStream>(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = abstractHashedMap1.remove((Object) abstractHashedMap2);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNull(abstractMap_SimpleEntry0);
      
      int int0 = abstractHashedMap1.hash((Object) null);
      assertEquals((-8130816), int0);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      
      AbstractHashedMap<String, Map.Entry<String, InputStream>> abstractHashedMap3 = new AbstractHashedMap<String, Map.Entry<String, InputStream>>(125, 1896.132F, (-3940));
      assertEquals(0, abstractHashedMap3.size());
      assertTrue(abstractHashedMap3.isEmpty());
      assertNotNull(abstractHashedMap3);
      
      Iterator<Map.Entry<String, InputStream>> iterator0 = abstractHashedMap3.createValuesIterator();
      assertEquals(0, abstractHashedMap3.size());
      assertTrue(abstractHashedMap3.isEmpty());
      assertNotNull(iterator0);
      
      AbstractHashedMap<Map.Entry<Object, BufferedInputStream>, Comparable<InputStream>> abstractHashedMap4 = new AbstractHashedMap<Map.Entry<Object, BufferedInputStream>, Comparable<InputStream>>(14, 1317.12F);
      assertTrue(abstractHashedMap4.isEmpty());
      assertEquals(0, abstractHashedMap4.size());
      assertNotNull(abstractHashedMap4);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 3);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      AbstractMap.SimpleImmutableEntry<Object, BufferedInputStream> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, BufferedInputStream>((Object) null, bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Comparable<InputStream> comparable0 = (Comparable<InputStream>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparable0).toString();
      abstractHashedMap4.addMapping(3, 4489, abstractMap_SimpleImmutableEntry0, comparable0);
      assertEquals(1, abstractHashedMap4.size());
      assertFalse(abstractHashedMap4.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      
      AbstractHashedMap<HashMap<BufferedInputStream, String>, AbstractMap.SimpleEntry<Object, Integer>> abstractHashedMap5 = new AbstractHashedMap<HashMap<BufferedInputStream, String>, AbstractMap.SimpleEntry<Object, Integer>>(4489, 4489, 14);
      assertTrue(abstractHashedMap5.isEmpty());
      assertEquals(0, abstractHashedMap5.size());
      assertNotNull(abstractHashedMap5);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractHashedMap<String, BufferedInputStream> abstractHashedMap0 = new AbstractHashedMap<String, BufferedInputStream>(21);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Integer, Object> abstractHashedMap1 = new AbstractHashedMap<Integer, Object>(21);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = abstractHashedMap0.equals(abstractHashedMap1);
      assertTrue(boolean0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      
      AbstractHashedMap<Object, BufferedInputStream> abstractHashedMap2 = new AbstractHashedMap<Object, BufferedInputStream>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      AbstractHashedMap<InputStream, String> abstractHashedMap3 = new AbstractHashedMap<InputStream, String>(10, 2829.626F, (-2610));
      assertTrue(abstractHashedMap3.isEmpty());
      assertEquals(0, abstractHashedMap3.size());
      assertNotNull(abstractHashedMap3);
      
      AbstractHashedMap<InputStream, String> abstractHashedMap4 = new AbstractHashedMap<InputStream, String>(abstractHashedMap3);
      assertTrue(abstractHashedMap3.isEmpty());
      assertEquals(0, abstractHashedMap3.size());
      assertTrue(abstractHashedMap4.isEmpty());
      assertEquals(0, abstractHashedMap4.size());
      assertNotNull(abstractHashedMap4);
      assertTrue(abstractHashedMap4.equals((Object)abstractHashedMap3));
      
      abstractHashedMap4.checkCapacity();
      assertTrue(abstractHashedMap3.isEmpty());
      assertEquals(0, abstractHashedMap3.size());
      assertTrue(abstractHashedMap4.isEmpty());
      assertEquals(0, abstractHashedMap4.size());
      assertNotSame(abstractHashedMap3, abstractHashedMap4);
      assertNotSame(abstractHashedMap4, abstractHashedMap3);
      assertTrue(abstractHashedMap3.equals((Object)abstractHashedMap4));
      assertTrue(abstractHashedMap4.equals((Object)abstractHashedMap3));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1771;
      AbstractHashedMap<Integer, InputStream> abstractHashedMap0 = new AbstractHashedMap<Integer, InputStream>(1771);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Integer, InputStream> abstractHashedMap1 = new AbstractHashedMap<Integer, InputStream>(abstractHashedMap0);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      assertTrue(abstractHashedMap1.equals((Object)abstractHashedMap0));
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.entryHashCode((AbstractHashedMap.HashEntry<Integer, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte)14, (byte) (-105), (byte) (-33), (byte)91, (byte) (-119), (byte)32, (byte) (-1)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(438, 625.118F, (-2734));
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((byte) (-119));
      assertEquals((-119), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "k;tu|?DaP[Z)");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      Integer integer1 = new Integer((-2734));
      assertEquals((-2734), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = hashMap0.put(integer1, "t2i(S*`see");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      assertFalse(integer1.equals((Object)integer0));
      
      abstractHashedMap0.putAll(hashMap0);
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      Iterator<Integer> iterator0 = abstractHashedMap0.createKeySetIterator();
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, abstractHashedMap0.size());
      assertNotNull(iterator0);
      
      abstractHashedMap0.hashCode();
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, abstractHashedMap0.size());
      
      AbstractHashedMap.KeySetIterator<Integer> abstractHashedMap_KeySetIterator0 = new AbstractHashedMap.KeySetIterator<Integer>(abstractHashedMap0);
      assertTrue(abstractHashedMap_KeySetIterator0.hasNext());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap_KeySetIterator0);
      
      Integer integer2 = abstractHashedMap_KeySetIterator0.next();
      assertEquals((-119), (int)integer2);
      assertTrue(abstractHashedMap_KeySetIterator0.hasNext());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, abstractHashedMap0.size());
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      
      AbstractHashedMap<Object, Object> abstractHashedMap1 = new AbstractHashedMap<Object, Object>(0, 1498.17F);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.EntrySet<Object, Object> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Object, Object>(abstractHashedMap1);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(abstractHashedMap_EntrySet0);
      
      boolean boolean1 = abstractHashedMap_EntrySet0.contains(abstractHashedMap1);
      assertFalse(boolean1);
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(438, 625.118F, (-2734));
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2734));
      assertEquals((-2734), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(438);
      assertEquals(438, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = hashMap0.put(integer1, "");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      assertFalse(integer1.equals((Object)integer0));
      
      String string1 = hashMap0.put(integer0, "t2i(S*`see");
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      assertFalse(integer0.equals((Object)integer1));
      
      abstractHashedMap0.putAll(hashMap0);
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Iterator<Integer> iterator0 = abstractHashedMap0.createKeySetIterator();
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertNotNull(iterator0);
      
      abstractHashedMap0.hashCode();
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      
      AbstractHashedMap.KeySetIterator<Integer> abstractHashedMap_KeySetIterator0 = new AbstractHashedMap.KeySetIterator<Integer>(abstractHashedMap0);
      assertEquals(2, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertTrue(abstractHashedMap_KeySetIterator0.hasNext());
      assertNotNull(abstractHashedMap_KeySetIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_KeySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractHashedMap.HashEntry<String, Integer> abstractHashedMap_HashEntry0 = null;
      int int0 = 0;
      AbstractHashedMap<BufferedInputStream, InputStream> abstractHashedMap1 = new AbstractHashedMap<BufferedInputStream, InputStream>();
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.getEntry((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(this Map)");
      assertFalse(boolean0);
      
      int int0 = 1;
      int int1 = 1024;
      AbstractHashedMap<String, BufferedInputStream> abstractHashedMap0 = new AbstractHashedMap<String, BufferedInputStream>(1, 1, 1024);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap<Comparable<String>, InputStream> abstractHashedMap1 = new AbstractHashedMap<Comparable<String>, InputStream>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap1.size());
      assertNotNull(abstractHashedMap1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap1.destroyEntry((AbstractHashedMap.HashEntry<Comparable<String>, InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AbstractHashedMap<Map.Entry<String, Object>, AbstractMap.SimpleImmutableEntry<InputStream, InputStream>> abstractHashedMap0 = new AbstractHashedMap<Map.Entry<String, Object>, AbstractMap.SimpleImmutableEntry<InputStream, InputStream>>(1658);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      AbstractMap.SimpleImmutableEntry<InputStream, InputStream> abstractMap_SimpleImmutableEntry0 = abstractHashedMap0.get((Object) null);
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNull(abstractMap_SimpleImmutableEntry0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 0;
      AbstractHashedMap<AbstractHashedMap<String, Object>, Object> abstractHashedMap1 = null;
      try {
        abstractHashedMap1 = new AbstractHashedMap<AbstractHashedMap<String, Object>, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(438, 625.118F, (-2734));
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2734));
      assertEquals((-2734), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, "t2i(S*`see");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      abstractHashedMap0.putAll(hashMap0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Iterator<Integer> iterator0 = abstractHashedMap0.createKeySetIterator();
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertNotNull(iterator0);
      
      abstractHashedMap0.hashCode();
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      
      AbstractHashedMap.KeySetIterator<Integer> abstractHashedMap_KeySetIterator0 = new AbstractHashedMap.KeySetIterator<Integer>(abstractHashedMap0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertTrue(abstractHashedMap_KeySetIterator0.hasNext());
      assertNotNull(abstractHashedMap_KeySetIterator0);
      
      Integer integer1 = abstractHashedMap_KeySetIterator0.next();
      assertEquals((-2734), (int)integer1);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertFalse(abstractHashedMap_KeySetIterator0.hasNext());
      assertNotNull(integer1);
      
      AbstractHashedMap<Object, Object> abstractHashedMap1 = new AbstractHashedMap<Object, Object>(0, 1498.17F);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertNotNull(abstractHashedMap1);
      
      AbstractHashedMap.EntrySet<Object, Object> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Object, Object>(abstractHashedMap1);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      assertNotNull(abstractHashedMap_EntrySet0);
      
      boolean boolean0 = abstractHashedMap_EntrySet0.contains(abstractHashedMap1);
      assertFalse(boolean0);
      assertEquals(0, abstractHashedMap1.size());
      assertTrue(abstractHashedMap1.isEmpty());
      assertEquals(0, abstractHashedMap_EntrySet0.size());
      
      AbstractHashedMap<String, AbstractMap.SimpleEntry<InputStream, String>> abstractHashedMap2 = new AbstractHashedMap<String, AbstractMap.SimpleEntry<InputStream, String>>();
      assertEquals(0, abstractHashedMap2.size());
      assertTrue(abstractHashedMap2.isEmpty());
      assertNotNull(abstractHashedMap2);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(438);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      AbstractMap.SimpleEntry<InputStream, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<InputStream, String>(bufferedInputStream0, "");
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractHashedMap.HashEntry<String, AbstractMap.SimpleEntry<InputStream, String>> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<String, AbstractMap.SimpleEntry<InputStream, String>>((AbstractHashedMap.HashEntry<String, AbstractMap.SimpleEntry<InputStream, String>>) null, (-2734), (Object) null, abstractMap_SimpleEntry0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(abstractHashedMap_HashEntry0);
      
      AbstractHashedMap.HashEntry<String, AbstractMap.SimpleEntry<InputStream, String>> abstractHashedMap_HashEntry1 = abstractHashedMap_HashEntry0.next;
      assertNull(abstractHashedMap_HashEntry1);
      
      // Undeclared exception!
      try { 
        abstractHashedMap2.entryKey((AbstractHashedMap.HashEntry<String, AbstractMap.SimpleEntry<InputStream, String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractHashedMap<InputStream, String> abstractHashedMap0 = new AbstractHashedMap<InputStream, String>();
      assertEquals(0, abstractHashedMap0.size());
      assertTrue(abstractHashedMap0.isEmpty());
      assertNotNull(abstractHashedMap0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> abstractHashedMap0 = new AbstractHashedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, String>> abstractHashedMap_KeySet0 = new AbstractHashedMap.KeySet<AbstractMap.SimpleImmutableEntry<Integer, String>>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractHashedMap_KeySet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractHashedMap.HashEntry<Integer, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, String>((AbstractHashedMap.HashEntry<Integer, String>) null, 1794, abstractHashedMap_KeySet0, "XE?e3(0R8lq]lhhH");
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractHashedMap_HashEntry0);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(abstractHashedMap_HashEntry0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Integer, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, String>(abstractMap_SimpleEntry0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertEquals(0, abstractHashedMap_KeySet0.size());
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_KeySet0.add(abstractMap_SimpleImmutableEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      AbstractHashedMap<Integer, String> abstractHashedMap0 = new AbstractHashedMap<Integer, String>(438, 625.118F, (-2734));
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer((-2734));
      assertEquals((-2734), (int)integer0);
      assertNotNull(integer0);
      
      String string0 = abstractHashedMap0.putIfAbsent(integer0, "]vGf*~");
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertNull(string0);
      
      String string1 = hashMap0.put(integer0, "t2i(S*`see");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string1);
      
      abstractHashedMap0.putAll(hashMap0);
      assertEquals(1, abstractHashedMap0.size());
      assertFalse(abstractHashedMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.clone();
        fail("Expecting exception: InternalError");
      
      } catch(InternalError e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractHashedMap<InputStream, AbstractMap.SimpleEntry<InputStream, BufferedInputStream>> abstractHashedMap0 = new AbstractHashedMap<InputStream, AbstractMap.SimpleEntry<InputStream, BufferedInputStream>>(1, 1275.1F);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      AbstractHashedMap.HashMapIterator<InputStream, AbstractMap.SimpleEntry<InputStream, BufferedInputStream>> abstractHashedMap_HashMapIterator0 = new AbstractHashedMap.HashMapIterator<InputStream, AbstractMap.SimpleEntry<InputStream, BufferedInputStream>>(abstractHashedMap0);
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertFalse(abstractHashedMap_HashMapIterator0.hasNext());
      assertNotNull(abstractHashedMap_HashMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap_HashMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$HashMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AbstractHashedMap<InputStream, AbstractMap.SimpleEntry<Integer, Object>> abstractHashedMap0 = new AbstractHashedMap<InputStream, AbstractMap.SimpleEntry<Integer, Object>>();
      assertTrue(abstractHashedMap0.isEmpty());
      assertEquals(0, abstractHashedMap0.size());
      assertNotNull(abstractHashedMap0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        abstractHashedMap0.entryValue((AbstractHashedMap.HashEntry<InputStream, AbstractMap.SimpleEntry<Integer, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
}
