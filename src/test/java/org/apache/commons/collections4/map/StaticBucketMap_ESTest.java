/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:35:48 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.apache.commons.collections4.map.StaticBucketMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class StaticBucketMap_ESTest extends StaticBucketMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StaticBucketMap<String, Object> staticBucketMap0 = new StaticBucketMap<String, Object>();
      StaticBucketMap<AbstractMap.SimpleEntry<String, String>, String> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<String, String>, String>();
      staticBucketMap0.put("h+0[&'k~:anknj`E", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.merge("", "", biFunction0);
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction1).apply(anyString() , any());
      staticBucketMap0.replaceAll(biFunction1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap1.forEach(biConsumer0);
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.forEach(biConsumer1);
      staticBucketMap0.remove((Object) staticBucketMap1);
      StaticBucketMap<HashMap<Integer, String>, String> staticBucketMap2 = new StaticBucketMap<HashMap<Integer, String>, String>();
      Integer integer0 = new Integer(0);
      staticBucketMap2.get(integer0);
      staticBucketMap0.remove((Object) null, (Object) "h+0[&'k~:anknj`E");
      staticBucketMap1.entrySet();
      staticBucketMap1.getOrDefault("", (String) null);
      staticBucketMap1.remove((Object) staticBucketMap0);
      staticBucketMap0.get((Object) null);
      StaticBucketMap<Integer, Object> staticBucketMap3 = new StaticBucketMap<Integer, Object>(0);
      Integer integer1 = new Integer(0);
      BiFunction<Object, Object, Object> biFunction2 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , any());
      staticBucketMap3.compute(integer1, biFunction2);
      staticBucketMap3.values();
      StaticBucketMap<Integer, Integer> staticBucketMap4 = new StaticBucketMap<Integer, Integer>(0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(0);
      hashMap0.put(integer1, integer2);
      hashMap0.put(integer1, integer2);
      staticBucketMap4.putAll(hashMap0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, String>> staticBucketMap0 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      staticBucketMap0.equals("[");
      Integer integer0 = new Integer(1654);
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "org.apache.commons.collections4.map.AbstractIterableMap");
      abstractMap_SimpleEntry0.setValue("org.apache.commons.collections4.map.AbstractIterableMap");
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleImmutableEntry0);
      staticBucketMap0.put("org.apache.commons.collections4.map.AbstractIterableMap", abstractMap_SimpleEntry1);
      StaticBucketMap<String, Object> staticBucketMap1 = new StaticBucketMap<String, Object>(1654);
      staticBucketMap1.size();
      StaticBucketMap<String, HashMap<String, Object>> staticBucketMap2 = new StaticBucketMap<String, HashMap<String, Object>>();
      staticBucketMap2.hashCode();
      StaticBucketMap<Object, Object> staticBucketMap3 = new StaticBucketMap<Object, Object>(0);
      staticBucketMap3.hashCode();
      StaticBucketMap<Integer, Integer> staticBucketMap4 = new StaticBucketMap<Integer, Integer>();
      StaticBucketMap<Integer, Integer> staticBucketMap5 = new StaticBucketMap<Integer, Integer>(11);
      staticBucketMap4.putAll(staticBucketMap5);
      StaticBucketMap<AbstractMap.SimpleEntry<String, String>, Integer> staticBucketMap6 = new StaticBucketMap<AbstractMap.SimpleEntry<String, String>, Integer>(5853);
      staticBucketMap6.values();
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Object> staticBucketMap7 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, String> staticBucketMap8 = new StaticBucketMap<AbstractMap.SimpleEntry<String, Object>, String>(11);
      staticBucketMap8.remove((Object) staticBucketMap4);
      StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Object>> staticBucketMap9 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      staticBucketMap9.get((Object) null);
      StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>> staticBucketMap10 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<String, Object>>(5853);
      Object object0 = null;
      staticBucketMap10.containsKey(object0);
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> staticBucketMap11 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      staticBucketMap11.isEmpty();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StaticBucketMap<Integer, String> staticBucketMap0 = new StaticBucketMap<Integer, String>();
      StaticBucketMap<Integer, Object> staticBucketMap1 = new StaticBucketMap<Integer, Object>(304);
      staticBucketMap1.putAll(staticBucketMap0);
      staticBucketMap1.size();
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, String>> staticBucketMap2 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, String>>((-1));
      staticBucketMap2.equals(staticBucketMap1);
      StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, String>> staticBucketMap3 = new StaticBucketMap<String, AbstractMap.SimpleEntry<Integer, String>>(1);
      staticBucketMap3.size();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StaticBucketMap<Integer, Object> staticBucketMap0 = new StaticBucketMap<Integer, Object>(16);
      Set<Integer> set0 = staticBucketMap0.keySet();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.merge(integer0, object0, biFunction0);
      staticBucketMap0.entrySet();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, AbstractMap.SimpleEntry<Object, Object>>(16);
      staticBucketMap1.containsValue(set0);
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Integer, Object>> staticBucketMap2 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, HashMap<Integer, Object>>(1);
      StaticBucketMap<Object, Object> staticBucketMap3 = new StaticBucketMap<Object, Object>(16);
      staticBucketMap3.putIfAbsent(staticBucketMap2, staticBucketMap0);
      staticBucketMap3.values();
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>> staticBucketMap4 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      staticBucketMap4.isEmpty();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, String> staticBucketMap5 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, String>();
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("kT mHGG\"@ys3", "kT mHGG\"@ys3");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      staticBucketMap5.put(abstractMap_SimpleImmutableEntry1, "kT mHGG\"@ys3");
      StaticBucketMap<Object, String> staticBucketMap6 = new StaticBucketMap<Object, String>();
      staticBucketMap6.keySet();
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, Integer> staticBucketMap7 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, String>, Integer>(0);
      staticBucketMap7.entrySet();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> staticBucketMap8 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(0);
      staticBucketMap8.clear();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<Object, String>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<Object, String>>(1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.values();
      MockThread mockThread0 = new MockThread(threadGroup0, "");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "_S");
      staticBucketMap0.atomic(mockThread1);
      StaticBucketMap<Object, Object> staticBucketMap1 = new StaticBucketMap<Object, Object>(1);
      staticBucketMap1.size();
      mockThread1.run();
      StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap2 = new StaticBucketMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(1);
      staticBucketMap2.put(mockThread0, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      staticBucketMap2.replace((Object) "", (AbstractMap.SimpleImmutableEntry<Object, Object>) null, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      staticBucketMap2.get("_S");
      MockThread.interrupted();
      StaticBucketMap<HashMap<Object, String>, Integer> staticBucketMap3 = new StaticBucketMap<HashMap<Object, String>, Integer>(1);
      staticBucketMap3.atomic(mockThread1);
      staticBucketMap3.keySet();
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>> staticBucketMap4 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>>(1);
      staticBucketMap4.mapIterator();
      staticBucketMap4.containsKey(staticBucketMap2);
      staticBucketMap1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-1833);
      StaticBucketMap<Integer, Integer> staticBucketMap0 = new StaticBucketMap<Integer, Integer>((-1833));
      StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> staticBucketMap1 = new StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      // Undeclared exception!
      try { 
        staticBucketMap0.putAll((Map<? extends Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, String> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, String>(1);
      String string0 = "org.apache.commons.collections4.map.StaticBucketMap$BaseIterator";
      staticBucketMap0.putIfAbsent((AbstractMap.SimpleEntry<Object, String>) null, "org.apache.commons.collections4.map.StaticBucketMap$BaseIterator");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      staticBucketMap0.compute((AbstractMap.SimpleEntry<Object, String>) null, biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        staticBucketMap0.merge((AbstractMap.SimpleEntry<Object, String>) null, (String) null, biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>();
      staticBucketMap0.hashCode();
      StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap1 = new StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      staticBucketMap1.size();
      StaticBucketMap<Integer, String> staticBucketMap2 = new StaticBucketMap<Integer, String>();
      staticBucketMap2.getOrDefault("HF$3>tOY^g`q", "G!{");
      StaticBucketMap<Integer, String> staticBucketMap3 = new StaticBucketMap<Integer, String>();
      Integer integer0 = new Integer(0);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      staticBucketMap3.merge(integer0, "", biFunction0);
      staticBucketMap2.putAll(staticBucketMap3);
      StaticBucketMap<String, String> staticBucketMap4 = new StaticBucketMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("G!{", "");
      staticBucketMap4.putAll(hashMap0);
      StaticBucketMap<String, Integer> staticBucketMap5 = new StaticBucketMap<String, Integer>();
      Integer integer1 = new Integer(0);
      staticBucketMap5.putIfAbsent((String) null, integer1);
      MockThread mockThread0 = new MockThread();
      staticBucketMap5.atomic(mockThread0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(231);
      Integer integer0 = new Integer(231);
      StaticBucketMap<String, Object> staticBucketMap1 = new StaticBucketMap<String, Object>();
      staticBucketMap1.get(staticBucketMap0);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(integer0, (Object) null);
      staticBucketMap0.putIfAbsent(abstractMap_SimpleEntry0, abstractMap_SimpleEntry0);
      staticBucketMap0.isEmpty();
      StaticBucketMap<HashMap<String, Object>, String> staticBucketMap2 = new StaticBucketMap<HashMap<String, Object>, String>(0);
      staticBucketMap2.hashCode();
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>> staticBucketMap3 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(231);
      staticBucketMap3.equals((Object) null);
      staticBucketMap3.size();
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, String>> staticBucketMap4 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      staticBucketMap4.isEmpty();
      StaticBucketMap<Object, HashMap<Integer, String>> staticBucketMap5 = new StaticBucketMap<Object, HashMap<Integer, String>>(251);
      staticBucketMap5.get(staticBucketMap4);
      StaticBucketMap<String, String> staticBucketMap6 = new StaticBucketMap<String, String>();
      staticBucketMap6.values();
      StaticBucketMap<Object, String> staticBucketMap7 = new StaticBucketMap<Object, String>((-1));
      staticBucketMap7.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleEntry<Object, String>, Integer>(1805);
      staticBucketMap0.clear();
      Set<AbstractMap.SimpleEntry<Object, String>> set0 = staticBucketMap0.keySet();
      StaticBucketMap<Integer, Object> staticBucketMap1 = new StaticBucketMap<Integer, Object>();
      staticBucketMap1.getOrDefault("4EMh#z2", set0);
      staticBucketMap1.values();
      StaticBucketMap<String, String> staticBucketMap2 = new StaticBucketMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("org.apache.commons.collections4.map.StaticBucketMap$Values", "org.apache.commons.collections4.map.StaticBucketMap$Values");
      staticBucketMap2.putAll(hashMap0);
      hashMap0.put("", "org.apache.commons.collections4.map.StaticBucketMap$EntryIterator");
      hashMap0.put("org.apache.commons.collections4.map.StaticBucketMap$Values", "'2 I7*_V");
      staticBucketMap2.putAll(hashMap0);
      StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap3 = new StaticBucketMap<Object, AbstractMap.SimpleEntry<Object, Object>>(1805);
      staticBucketMap3.hashCode();
      staticBucketMap1.entrySet();
      StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap4 = new StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, Object>>(1805);
      staticBucketMap4.values();
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> staticBucketMap5 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>(1805);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, String>> staticBucketMap0 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, String>>((-136));
      String string0 = "u";
      AbstractMap.SimpleImmutableEntry<Object, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, String>("Xe+y#yP Of.=E", (String) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Object>) comparator0);
      staticBucketMap0.put("u", abstractMap_SimpleImmutableEntry0);
      staticBucketMap0.getOrDefault("u", (AbstractMap.SimpleImmutableEntry<Object, String>) null);
      // Undeclared exception!
      try { 
        staticBucketMap0.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StaticBucketMap<Object, HashMap<String, Object>> staticBucketMap0 = new StaticBucketMap<Object, HashMap<String, Object>>();
      staticBucketMap0.equals("yS`6KYe,iy0/(\"");
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, String>> staticBucketMap1 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<String, String>>(0);
      staticBucketMap1.values();
      StaticBucketMap<String, String> staticBucketMap2 = new StaticBucketMap<String, String>(1774);
      staticBucketMap2.put("yS`6KYe,iy0/(\"", "org.apache.commons.collections4.map.StaticBucketMap");
      staticBucketMap2.put("yS`6KYe,iy0/(\"", "xD");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      StaticBucketMap<Integer, Object> staticBucketMap0 = new StaticBucketMap<Integer, Object>();
      Integer integer1 = new Integer(0);
      Function<Integer, Integer> function0 = Function.identity();
      staticBucketMap0.computeIfAbsent(integer1, function0);
      staticBucketMap0.size();
      StaticBucketMap<Object, Object> staticBucketMap1 = new StaticBucketMap<Object, Object>(0);
      staticBucketMap1.values();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<String, Object>, Integer>();
      staticBucketMap0.keySet();
      StaticBucketMap<String, Integer> staticBucketMap1 = new StaticBucketMap<String, Integer>(245);
      MockThread mockThread0 = new MockThread("");
      BiConsumer<String, Object> biConsumer0 = (BiConsumer<String, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap1.forEach(biConsumer0);
      MockThread mockThread1 = new MockThread(mockThread0);
      MockThread mockThread2 = new MockThread(mockThread1, "");
      MockThread.reset();
      staticBucketMap1.atomic(mockThread2);
      StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> staticBucketMap2 = new StaticBucketMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      StaticBucketMap<Object, String> staticBucketMap3 = new StaticBucketMap<Object, String>();
      staticBucketMap3.isEmpty();
      StaticBucketMap<String, String> staticBucketMap4 = new StaticBucketMap<String, String>();
      staticBucketMap4.values();
      StaticBucketMap<HashMap<Object, String>, Object> staticBucketMap5 = new StaticBucketMap<HashMap<Object, String>, Object>(245);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>(staticBucketMap4);
      Object object0 = new Object();
      staticBucketMap5.put(hashMap0, object0);
      Thread[] threadArray0 = new Thread[3];
      threadArray0[0] = (Thread) mockThread1;
      threadArray0[1] = (Thread) mockThread2;
      threadArray0[2] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      staticBucketMap5.containsValue(staticBucketMap4);
      StaticBucketMap<Object, HashMap<String, Integer>> staticBucketMap6 = new StaticBucketMap<Object, HashMap<String, Integer>>((-336));
      staticBucketMap6.atomic(mockThread1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StaticBucketMap<Object, String> staticBucketMap0 = new StaticBucketMap<Object, String>(10);
      staticBucketMap0.entrySet();
      Integer integer0 = new Integer(2599);
      staticBucketMap0.put((Object) null, (String) null);
      staticBucketMap0.replace((Object) integer0, "", "");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      staticBucketMap0.replaceAll(biFunction0);
      staticBucketMap0.containsValue((Object) null);
      StaticBucketMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>> staticBucketMap1 = new StaticBucketMap<HashMap<String, Object>, AbstractMap.SimpleEntry<Object, String>>();
      staticBucketMap1.hashCode();
      StaticBucketMap<Integer, Object> staticBucketMap2 = new StaticBucketMap<Integer, Object>(10);
      staticBucketMap2.containsValue(integer0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StaticBucketMap<Integer, AbstractMap.SimpleEntry<String, Object>> staticBucketMap0 = new StaticBucketMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByKey();
      staticBucketMap0.put(integer0, abstractMap_SimpleEntry0);
      staticBucketMap0.hashCode();
      StaticBucketMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, Integer>> staticBucketMap1 = new StaticBucketMap<AbstractMap.SimpleEntry<String, String>, AbstractMap.SimpleImmutableEntry<String, Integer>>((-886));
      Integer integer1 = new Integer(1194);
      staticBucketMap1.containsValue(integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StaticBucketMap<Object, Integer> staticBucketMap0 = new StaticBucketMap<Object, Integer>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      staticBucketMap0.forEach(biConsumer0);
      Integer integer0 = new Integer((-3104));
      staticBucketMap0.put("", integer0);
      StaticBucketMap<HashMap<String, Integer>, Integer> staticBucketMap1 = new StaticBucketMap<HashMap<String, Integer>, Integer>((-3104));
      staticBucketMap1.entrySet();
      staticBucketMap1.size();
      StaticBucketMap<Object, String> staticBucketMap2 = new StaticBucketMap<Object, String>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      staticBucketMap2.values();
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null);
      staticBucketMap2.atomic(mockThread0);
      StaticBucketMap<String, String> staticBucketMap3 = new StaticBucketMap<String, String>((-3104));
      staticBucketMap3.hashCode();
      // Undeclared exception!
      try { 
        staticBucketMap3.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StaticBucketMap<String, Integer> staticBucketMap0 = new StaticBucketMap<String, Integer>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      staticBucketMap0.putAll(hashMap0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, String>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, String>, HashMap<Object, String>>(0);
      staticBucketMap0.isEmpty();
      StaticBucketMap<String, Integer> staticBucketMap1 = new StaticBucketMap<String, Integer>(0);
      staticBucketMap1.put((String) null, (Integer) null);
      Integer integer0 = new Integer(0);
      staticBucketMap1.replace("", integer0);
      staticBucketMap1.keySet();
      // Undeclared exception!
      try { 
        staticBucketMap1.atomic((Runnable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.StaticBucketMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Object>();
      staticBucketMap0.equals("");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StaticBucketMap<String, Integer> staticBucketMap0 = new StaticBucketMap<String, Integer>();
      staticBucketMap0.remove((Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> staticBucketMap0 = new StaticBucketMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>();
      StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, String>> staticBucketMap1 = new StaticBucketMap<Integer, AbstractMap.SimpleEntry<Object, String>>(0);
      StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>> staticBucketMap2 = new StaticBucketMap<Integer, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      Integer integer0 = new Integer(255);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(staticBucketMap2, integer0);
      Integer integer1 = new Integer((-1890));
      // Undeclared exception!
      try { 
        abstractMap_SimpleImmutableEntry0.setValue(integer1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }
}
