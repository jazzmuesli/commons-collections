/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:38:32 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.ref.PhantomReference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractReferenceMap_ESTest extends AbstractReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReferenceMap<Object, PhantomReference<String>> referenceMap0 = new ReferenceMap<Object, PhantomReference<String>>();
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceMapIterator<Object, PhantomReference<String>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<Object, PhantomReference<String>>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceMapIterator0);
      
      abstractReferenceMap_ReferenceMapIterator0.expectedModCount = 252;
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, InputStream> referenceMap0 = new ReferenceMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1, true);
      assertNotNull(referenceMap0);
      
      WeakReference<String> weakReference0 = new WeakReference<String>("");
      assertNotNull(weakReference0);
      assertFalse(weakReference0.isEnqueued());
      
      referenceMap0.purge(weakReference0);
      assertFalse(weakReference0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReferenceIdentityMap<SoftReference<InputStream>, String> referenceIdentityMap0 = new ReferenceIdentityMap<SoftReference<InputStream>, String>();
      assertNotNull(referenceIdentityMap0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      SoftReference<InputStream> softReference0 = new SoftReference<InputStream>(bufferedInputStream0, referenceQueue0);
      assertNotNull(softReference0);
      assertFalse(softReference0.isEnqueued());
      
      String string0 = referenceIdentityMap0.put(softReference0, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntrySet");
      assertNull(string0);
      assertFalse(softReference0.isEnqueued());
      
      AbstractReferenceMap.ReferenceMapIterator<SoftReference<InputStream>, String> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<SoftReference<InputStream>, String>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceMapIterator0);
      
      SoftReference<InputStream> softReference1 = abstractReferenceMap_ReferenceMapIterator0.next();
      assertSame(softReference1, softReference0);
      assertNotNull(softReference1);
      assertFalse(softReference1.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PhantomReference<Object>, Object> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<Object>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      PhantomReference<Object> phantomReference0 = new PhantomReference<Object>(abstractReferenceMap_ReferenceStrength0, referenceQueue0);
      assertNotNull(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
      
      Integer integer0 = new Integer(928);
      assertNotNull(integer0);
      assertEquals(928, (int)integer0);
      
      Object object0 = referenceIdentityMap0.put(phantomReference0, integer0);
      assertNull(object0);
      assertFalse(phantomReference0.isEnqueued());
      
      AbstractReferenceMap.ReferenceKeySetIterator<PhantomReference<Object>> abstractReferenceMap_ReferenceKeySetIterator0 = new AbstractReferenceMap.ReferenceKeySetIterator<PhantomReference<Object>>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceKeySetIterator0);
      
      PhantomReference<Object> phantomReference1 = abstractReferenceMap_ReferenceKeySetIterator0.next();
      assertSame(phantomReference1, phantomReference0);
      assertNotNull(phantomReference1);
      assertFalse(phantomReference1.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<WeakReference<String>, Object> referenceMap0 = new ReferenceMap<WeakReference<String>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 61, 61);
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceEntrySet<WeakReference<String>, Object> abstractReferenceMap_ReferenceEntrySet0 = new AbstractReferenceMap.ReferenceEntrySet<WeakReference<String>, Object>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceEntrySet0);
      
      PhantomReference<String>[] phantomReferenceArray0 = (PhantomReference<String>[]) Array.newInstance(PhantomReference.class, 9);
      PhantomReference<String>[] phantomReferenceArray1 = abstractReferenceMap_ReferenceEntrySet0.toArray(phantomReferenceArray0);
      assertEquals(9, phantomReferenceArray0.length);
      assertEquals(9, phantomReferenceArray1.length);
      assertSame(phantomReferenceArray0, phantomReferenceArray1);
      assertSame(phantomReferenceArray1, phantomReferenceArray0);
      assertNotNull(phantomReferenceArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReferenceMap<Integer, AbstractMap.SimpleEntry<String, Integer>> referenceMap0 = new ReferenceMap<Integer, AbstractMap.SimpleEntry<String, Integer>>();
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceEntrySetIterator<Integer, AbstractMap.SimpleEntry<String, Integer>> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<Integer, AbstractMap.SimpleEntry<String, Integer>>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceEntrySetIterator0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceEntrySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReferenceMap<AbstractMap.SimpleEntry<InputStream, Object>, PhantomReference<BufferedInputStream>> referenceMap0 = new ReferenceMap<AbstractMap.SimpleEntry<InputStream, Object>, PhantomReference<BufferedInputStream>>();
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceEntrySetIterator<AbstractMap.SimpleEntry<InputStream, Object>, PhantomReference<BufferedInputStream>> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<AbstractMap.SimpleEntry<InputStream, Object>, PhantomReference<BufferedInputStream>>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceEntrySetIterator0);
      
      boolean boolean0 = abstractReferenceMap_ReferenceEntrySetIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<PhantomReference<Object>, Integer> referenceMap0 = new ReferenceMap<PhantomReference<Object>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1, true);
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceEntrySetIterator<PhantomReference<Object>, Integer> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<PhantomReference<Object>, Integer>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceEntrySetIterator0);
      
      AbstractReferenceMap.ReferenceEntry<PhantomReference<Object>, Integer> abstractReferenceMap_ReferenceEntry0 = abstractReferenceMap_ReferenceEntrySetIterator0.currentEntry();
      assertNull(abstractReferenceMap_ReferenceEntry0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<InputStream, AbstractMap.SimpleImmutableEntry<Integer, Object>> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, AbstractMap.SimpleImmutableEntry<Integer, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 14, 14, true);
      assertNotNull(referenceIdentityMap0);
      
      referenceIdentityMap0.purgeBeforeWrite();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReferenceMap<Integer, Integer> referenceMap0 = new ReferenceMap<Integer, Integer>();
      assertNotNull(referenceMap0);
      
      referenceMap0.purgeBeforeRead();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleImmutableEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      assertNotNull(referenceIdentityMap0);
      
      referenceIdentityMap0.purge();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<PhantomReference<BufferedInputStream>, BufferedInputStream> referenceMap0 = new ReferenceMap<PhantomReference<BufferedInputStream>, BufferedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      referenceMap0.init();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReferenceIdentityMap<PhantomReference<InputStream>, PhantomReference<String>> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<InputStream>, PhantomReference<String>>();
      assertNotNull(referenceIdentityMap0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      PhantomReference<InputStream> phantomReference0 = new PhantomReference<InputStream>(pushbackInputStream0, (ReferenceQueue<? super InputStream>) null);
      assertNotNull(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
      
      PhantomReference<String> phantomReference1 = (PhantomReference<String>) mock(PhantomReference.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(phantomReference1).toString();
      PhantomReference<String> phantomReference2 = referenceIdentityMap0.put(phantomReference0, phantomReference1);
      assertNull(phantomReference2);
      assertFalse(phantomReference0.isEnqueued());
      
      boolean boolean0 = referenceIdentityMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<InputStream, AbstractMap.SimpleEntry<String, String>> referenceMap0 = new ReferenceMap<InputStream, AbstractMap.SimpleEntry<String, String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      assertNotNull(referenceMap0);
      
      int int0 = referenceMap0.hashEntry("uX@Mp%AOnH#1]E}", abstractReferenceMap_ReferenceStrength0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      AbstractHashedMap.HashEntry<Integer, Integer> abstractHashedMap_HashEntry0 = referenceIdentityMap0.getEntry(abstractReferenceMap_ReferenceStrength0);
      assertNull(abstractHashedMap_HashEntry0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<WeakReference<String>, SoftReference<String>> referenceMap0 = new ReferenceMap<WeakReference<String>, SoftReference<String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2580, 2580);
      assertNotNull(referenceMap0);
      
      Iterator<WeakReference<String>> iterator0 = referenceMap0.createKeySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<Object, String>, String> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<Object, String>, String>();
      assertNotNull(referenceIdentityMap0);
      
      Iterator<Map.Entry<AbstractReferenceMap.ReferenceEntry<Object, String>, String>> iterator0 = (Iterator<Map.Entry<AbstractReferenceMap.ReferenceEntry<Object, String>, String>>)referenceIdentityMap0.createEntrySetIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ReferenceMap<PhantomReference<String>, WeakReference<Object>> referenceMap0 = new ReferenceMap<PhantomReference<String>, WeakReference<Object>>();
      assertNotNull(referenceMap0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      AbstractReferenceMap.WeakRef<Object> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<Object>(0, referenceMap0, referenceQueue0);
      assertNotNull(abstractReferenceMap_WeakRef0);
      assertFalse(abstractReferenceMap_WeakRef0.isEnqueued());
      
      PhantomReference<String> phantomReference0 = new PhantomReference<String>("", referenceQueue0);
      assertNotNull(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
      
      AbstractReferenceMap.ReferenceEntry<PhantomReference<String>, WeakReference<Object>> abstractReferenceMap_ReferenceEntry0 = referenceMap0.createEntry((AbstractHashedMap.HashEntry<PhantomReference<String>, WeakReference<Object>>) null, 0, phantomReference0, abstractReferenceMap_WeakRef0);
      assertNotNull(abstractReferenceMap_ReferenceEntry0);
      assertFalse(abstractReferenceMap_WeakRef0.isEnqueued());
      assertFalse(phantomReference0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<BufferedInputStream, String> referenceMap0 = new ReferenceMap<BufferedInputStream, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2, 2, true);
      assertNotNull(referenceMap0);
      
      // Undeclared exception!
      try { 
        referenceMap0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<Object, String> referenceIdentityMap0 = new ReferenceIdentityMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 2632.2F, false);
      assertNotNull(referenceIdentityMap0);
      
      ReferenceIdentityMap<String, Object> referenceIdentityMap1 = new ReferenceIdentityMap<String, Object>();
      assertNotNull(referenceIdentityMap1);
      
      AbstractReferenceMap.ReferenceEntry<String, Object> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<String, Object>(referenceIdentityMap1, (AbstractHashedMap.HashEntry<String, Object>) null, (-1004), "org.apache.commons.collections4.map.AbstractHashedMap$Values", referenceIdentityMap1);
      assertNotNull(abstractReferenceMap_ReferenceEntry0);
      
      // Undeclared exception!
      try { 
        referenceIdentityMap0.isEqualKey(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceEntry0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceEntry cannot be cast to java.lang.ref.Reference
         //
         verifyException("org.apache.commons.collections4.map.ReferenceIdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<PhantomReference<String>, String> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<String>, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1838, 1838);
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceBaseIterator<PhantomReference<String>, String> abstractReferenceMap_ReferenceBaseIterator0 = new AbstractReferenceMap.ReferenceBaseIterator<PhantomReference<String>, String>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceBaseIterator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<AbstractReferenceMap.ReferenceEntry<String, Integer>, String> referenceMap0 = new ReferenceMap<AbstractReferenceMap.ReferenceEntry<String, Integer>, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      int int0 = referenceMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      AbstractReferenceMap.SoftRef<Integer> abstractReferenceMap_SoftRef0 = new AbstractReferenceMap.SoftRef<Integer>(0, integer0, referenceQueue0);
      assertNotNull(abstractReferenceMap_SoftRef0);
      assertFalse(abstractReferenceMap_SoftRef0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry0 = new AbstractReferenceMap.ReferenceEntry<Integer, Integer>(referenceIdentityMap0, (AbstractHashedMap.HashEntry<Integer, Integer>) null, 0, integer0, integer0);
      assertNotNull(abstractReferenceMap_ReferenceEntry0);
      
      AbstractReferenceMap.ReferenceEntry<Integer, Integer> abstractReferenceMap_ReferenceEntry1 = abstractReferenceMap_ReferenceEntry0.next();
      assertNull(abstractReferenceMap_ReferenceEntry1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<PhantomReference<InputStream>, Integer> referenceMap0 = new ReferenceMap<PhantomReference<InputStream>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      MapIterator<PhantomReference<InputStream>, Integer> mapIterator0 = referenceMap0.mapIterator();
      assertNotNull(mapIterator0);
      assertFalse(mapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<InputStream, String>, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<InputStream, String>, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.isValueType(abstractReferenceMap_ReferenceStrength0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, AbstractReferenceMap.ReferenceEntry<Object, Integer>> referenceMap0 = new ReferenceMap<Object, AbstractReferenceMap.ReferenceEntry<Object, Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, false);
      assertNotNull(referenceMap0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      
      boolean boolean0 = referenceMap0.isValueType(abstractReferenceMap_ReferenceStrength0);
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<String, PhantomReference<Object>> referenceIdentityMap0 = new ReferenceIdentityMap<String, PhantomReference<Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.isKeyType(abstractReferenceMap_ReferenceStrength0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<AbstractMap.SimpleEntry<String, Object>, AbstractReferenceMap.ReferenceEntry<Object, Object>> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractMap.SimpleEntry<String, Object>, AbstractReferenceMap.ReferenceEntry<Object, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1491, 930.99F);
      assertNotNull(referenceIdentityMap0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      referenceIdentityMap0.doWriteObject(objectOutputStream0);
      assertEquals(24, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Dh\uFFFD\\\u0000\u0000\b\u0000p", byteArrayOutputStream0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<InputStream, PhantomReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, PhantomReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceMapIterator<InputStream, PhantomReference<Integer>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<InputStream, PhantomReference<Integer>>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceMapIterator0);
      
      Integer integer0 = new Integer(2027);
      assertNotNull(integer0);
      assertEquals(2027, (int)integer0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      PhantomReference<Integer> phantomReference0 = new PhantomReference<Integer>(integer0, referenceQueue0);
      assertNotNull(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.setValue(phantomReference0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<BufferedInputStream, PhantomReference<Object>> referenceIdentityMap0 = new ReferenceIdentityMap<BufferedInputStream, PhantomReference<Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceMapIterator<BufferedInputStream, PhantomReference<Object>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<BufferedInputStream, PhantomReference<Object>>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<InputStream, AbstractReferenceMap.ReferenceEntry<String, Object>> referenceMap0 = new ReferenceMap<InputStream, AbstractReferenceMap.ReferenceEntry<String, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceMapIterator<InputStream, AbstractReferenceMap.ReferenceEntry<String, Object>> abstractReferenceMap_ReferenceMapIterator0 = new AbstractReferenceMap.ReferenceMapIterator<InputStream, AbstractReferenceMap.ReferenceEntry<String, Object>>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceMapIterator0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceValuesIterator<Object> abstractReferenceMap_ReferenceValuesIterator0 = new AbstractReferenceMap.ReferenceValuesIterator<Object>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceValuesIterator0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceValuesIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<String, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 3, 92.497F, true);
      assertNotNull(referenceIdentityMap0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer integer1 = referenceIdentityMap0.put("", integer0);
      assertNull(integer1);
      
      AbstractReferenceMap.ReferenceValuesIterator<Integer> abstractReferenceMap_ReferenceValuesIterator0 = new AbstractReferenceMap.ReferenceValuesIterator<Integer>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceValuesIterator0);
      
      Integer integer2 = abstractReferenceMap_ReferenceValuesIterator0.next();
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<String, Object>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<AbstractReferenceMap.ReferenceEntry<String, Object>, WeakReference<Integer>>();
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceEntrySetIterator<AbstractReferenceMap.ReferenceEntry<String, Object>, WeakReference<Integer>> abstractReferenceMap_ReferenceEntrySetIterator0 = new AbstractReferenceMap.ReferenceEntrySetIterator<AbstractReferenceMap.ReferenceEntry<String, Object>, WeakReference<Integer>>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceEntrySetIterator0);
      
      abstractReferenceMap_ReferenceEntrySetIterator0.expectedModCount = (-709);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceEntrySetIterator0.nextEntry();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>();
      assertNotNull(referenceMap0);
      
      AbstractReferenceMap.ReferenceValues<Object> abstractReferenceMap_ReferenceValues0 = new AbstractReferenceMap.ReferenceValues<Object>(referenceMap0);
      assertNotNull(abstractReferenceMap_ReferenceValues0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceValues0.toArray((PhantomReference<Integer>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, String> referenceIdentityMap0 = new ReferenceIdentityMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      assertNotNull(referenceMap0);
      
      boolean boolean0 = referenceMap0.isEqualKey(referenceIdentityMap0, referenceIdentityMap0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<InputStream, String> referenceMap0 = new ReferenceMap<InputStream, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 2411, 1634.6305F);
      assertNotNull(referenceMap0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(176);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 25);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = referenceMap0.isEqualKey(bufferedInputStream0, pipedInputStream0);
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, PhantomReference<Integer>> referenceMap0 = new ReferenceMap<String, PhantomReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceMap0);
      
      Integer integer0 = new Integer((-677));
      assertNotNull(integer0);
      assertEquals((-677), (int)integer0);
      
      // Undeclared exception!
      try { 
        referenceMap0.isEqualKey(integer0, abstractReferenceMap_ReferenceStrength0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength cannot be cast to java.lang.ref.Reference
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ReferenceMap<String, AbstractMap.SimpleEntry<Integer, String>> referenceMap0 = new ReferenceMap<String, AbstractMap.SimpleEntry<Integer, String>>();
      assertNotNull(referenceMap0);
      
      Integer integer0 = new Integer(1585);
      assertNotNull(integer0);
      assertEquals(1585, (int)integer0);
      
      int int0 = referenceMap0.hashEntry(integer0, integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ReferenceIdentityMap<InputStream, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, Integer>();
      assertNotNull(referenceIdentityMap0);
      
      Integer integer0 = referenceIdentityMap0.get((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<InputStream, String> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      Integer integer0 = new Integer(16);
      assertNotNull(integer0);
      assertEquals(16, (int)integer0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      PhantomReference<Object> phantomReference0 = new PhantomReference<Object>(integer0, referenceQueue0);
      assertNotNull(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
      
      referenceIdentityMap0.purge(phantomReference0);
      assertFalse(phantomReference0.isEnqueued());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, true);
      assertNotNull(referenceIdentityMap0);
      
      Set<Integer> set0 = referenceIdentityMap0.keySet();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<AbstractReferenceMap.ReferenceEntry<Object, Object>, PhantomReference<String>> referenceMap0 = new ReferenceMap<AbstractReferenceMap.ReferenceEntry<Object, Object>, PhantomReference<String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 483, 483);
      assertNotNull(referenceMap0);
      
      Set<Map.Entry<AbstractReferenceMap.ReferenceEntry<Object, Object>, PhantomReference<String>>> set0 = (Set<Map.Entry<AbstractReferenceMap.ReferenceEntry<Object, Object>, PhantomReference<String>>>)referenceMap0.entrySet();
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ReferenceIdentityMap<Object, AbstractMap.SimpleEntry<InputStream, Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<Object, AbstractMap.SimpleEntry<InputStream, Integer>>();
      assertNotNull(referenceIdentityMap0);
      
      referenceIdentityMap0.clear();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PhantomReference<String>, String> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<String>, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      String string0 = referenceIdentityMap0.remove((Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<BufferedInputStream, Integer> referenceMap0 = new ReferenceMap<BufferedInputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap0);
      
      Integer integer0 = referenceMap0.remove((Object) abstractReferenceMap_ReferenceStrength0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Integer, SoftReference<Object>> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, SoftReference<Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      Integer integer0 = new Integer(44);
      assertNotNull(integer0);
      assertEquals(44, (int)integer0);
      
      // Undeclared exception!
      try { 
        referenceIdentityMap0.put(integer0, (SoftReference<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null values not allowed
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ReferenceIdentityMap<BufferedInputStream, String> referenceIdentityMap0 = new ReferenceIdentityMap<BufferedInputStream, String>();
      assertNotNull(referenceIdentityMap0);
      
      // Undeclared exception!
      try { 
        referenceIdentityMap0.put((BufferedInputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // null keys not allowed
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<SoftReference<Object>, WeakReference<Integer>> referenceIdentityMap0 = new ReferenceIdentityMap<SoftReference<Object>, WeakReference<Integer>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.containsValue((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ReferenceMap<BufferedInputStream, Object> referenceMap0 = new ReferenceMap<BufferedInputStream, Object>();
      assertNotNull(referenceMap0);
      
      Iterator<Object> iterator0 = referenceMap0.createValuesIterator();
      assertNotNull(iterator0);
      
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Integer, BufferedInputStream> referenceMap1 = new ReferenceMap<Integer, BufferedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceMap1);
      
      boolean boolean0 = referenceMap1.containsValue(iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<WeakReference<String>, BufferedInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<WeakReference<String>, BufferedInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1434, 1434, false);
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.containsKey("|' Lz5n3ltT}3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractReferenceMap.ReferenceStrength.resolve(1600);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.resolve(1);
      assertEquals(AbstractReferenceMap.ReferenceStrength.SOFT, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.resolve(0);
      assertEquals(AbstractReferenceMap.ReferenceStrength.HARD, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AbstractReferenceMap.ReferenceValues<PhantomReference<String>> abstractReferenceMap_ReferenceValues0 = new AbstractReferenceMap.ReferenceValues<PhantomReference<String>>((AbstractHashedMap<?, PhantomReference<String>>) null);
      assertNotNull(abstractReferenceMap_ReferenceValues0);
      
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceValues0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap$Values", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<Integer, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      Collection<Integer> collection0 = referenceIdentityMap0.values();
      assertNotNull(collection0);
      
      Collection<Integer> collection1 = referenceIdentityMap0.values();
      assertSame(collection1, collection0);
      assertNotNull(collection1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ReferenceIdentityMap<PhantomReference<InputStream>, PhantomReference<String>> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<InputStream>, PhantomReference<String>>();
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, WeakReference<String>> referenceIdentityMap0 = new ReferenceIdentityMap<String, WeakReference<String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      assertNotNull(referenceQueue0);
      
      AbstractReferenceMap.WeakRef<String> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<String>(978, "|' Lz5n3ltT}3", referenceQueue0);
      assertNotNull(abstractReferenceMap_WeakRef0);
      assertFalse(abstractReferenceMap_WeakRef0.isEnqueued());
      
      WeakReference<String> weakReference0 = referenceIdentityMap0.put("!9R^A1MswP", abstractReferenceMap_WeakRef0);
      assertNull(weakReference0);
      assertFalse(abstractReferenceMap_WeakRef0.isEnqueued());
      
      String string0 = referenceIdentityMap0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, Integer> referenceIdentityMap0 = new ReferenceIdentityMap<String, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceKeySet<String> abstractReferenceMap_ReferenceKeySet0 = new AbstractReferenceMap.ReferenceKeySet<String>(referenceIdentityMap0);
      assertNotNull(abstractReferenceMap_ReferenceKeySet0);
      
      Object[] objectArray0 = abstractReferenceMap_ReferenceKeySet0.toArray();
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.resolve(2);
      ReferenceMap<AbstractReferenceMap.ReferenceEntry<InputStream, String>, Object> referenceMap0 = new ReferenceMap<AbstractReferenceMap.ReferenceEntry<InputStream, String>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 0, 92.497F);
      AbstractReferenceMap.ReferenceKeySetIterator<AbstractReferenceMap.ReferenceEntry<InputStream, String>> abstractReferenceMap_ReferenceKeySetIterator0 = new AbstractReferenceMap.ReferenceKeySetIterator<AbstractReferenceMap.ReferenceEntry<InputStream, String>>(referenceMap0);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceKeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceBaseIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<WeakReference<String>, Object> referenceMap0 = new ReferenceMap<WeakReference<String>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 61, 61);
      AbstractReferenceMap.ReferenceEntrySet<WeakReference<String>, Object> abstractReferenceMap_ReferenceEntrySet0 = new AbstractReferenceMap.ReferenceEntrySet<WeakReference<String>, Object>(referenceMap0);
      PhantomReference<String>[] phantomReferenceArray0 = (PhantomReference<String>[]) Array.newInstance(PhantomReference.class, 9);
      ReferenceQueue<String> referenceQueue0 = new ReferenceQueue<String>();
      PhantomReference<String> phantomReference0 = new PhantomReference<String>("([7<", referenceQueue0);
      phantomReferenceArray0[0] = phantomReference0;
      AbstractReferenceMap.WeakRef<String> abstractReferenceMap_WeakRef0 = new AbstractReferenceMap.WeakRef<String>(61, "org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceValuesIterator", referenceQueue0);
      referenceMap0.put(abstractReferenceMap_WeakRef0, phantomReferenceArray0[0]);
      // Undeclared exception!
      try { 
        abstractReferenceMap_ReferenceEntrySet0.toArray(phantomReferenceArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
