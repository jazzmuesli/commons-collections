/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:41:55 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractLinkedMap;
import org.apache.commons.collections4.map.LRUMap;
import org.apache.commons.collections4.map.LRUMapTest;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLinkedMap_ESTest extends AbstractLinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(961, 961);
      AbstractLinkedMap.LinkMapIterator<String, Integer> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<String, Integer>(linkedMap0);
      Integer integer0 = new Integer(10);
      linkedMap0.put("C[r}|", integer0);
      linkedMap0.getEntry("gVO5OT4fnvR;hdUSonX");
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-1));
      abstractLinkedMap_LinkMapIterator0.hasPrevious();
      int int1 = (-3765);
      boolean boolean0 = true;
      LRUMap<AbstractMap.SimpleEntry<String, Object>, String> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<String, Object>, String>((-3765), 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2275;
      LRUMap<Object, FilterInputStream> lRUMap0 = new LRUMap<Object, FilterInputStream>(2275, 2275);
      String string0 = "pk";
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2275);
      lRUMap0.put("pk", pushbackInputStream0);
      lRUMap0.mapIterator();
      lRUMap0.isFull();
      AbstractLinkedMap.LinkMapIterator<Integer, Integer> abstractLinkedMap_LinkMapIterator0 = null;
      try {
        abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Integer, Integer>((AbstractLinkedMap<Integer, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(1);
      linkedMap0.keySet();
      linkedMap0.clear();
      linkedMap0.put("getValue() can only be called after next() and before remove()", "B");
      LinkedMap<String, String> linkedMap1 = linkedMap0.clone();
      LRUMapTest.MockLRUMapSubclassBlocksRemove<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(11, false);
      LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> linkedMap2 = new LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      linkedMap2.clone();
      AbstractLinkedMap.LinkMapIterator<String, String> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<String, String>(linkedMap1);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 133;
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, Object>, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, Object>, Object>(133);
      lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.clear();
      // Undeclared exception!
      try { 
        lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LRUMap<String, Integer> lRUMap0 = new LRUMap<String, Integer>(44, 2248.0F);
      AbstractLinkedMap.ValuesIterator<Integer> abstractLinkedMap_ValuesIterator0 = new AbstractLinkedMap.ValuesIterator<Integer>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_ValuesIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 613;
      LRUMap<FilterInputStream, AbstractMap.SimpleEntry<FilterInputStream, InputStream>> lRUMap0 = new LRUMap<FilterInputStream, AbstractMap.SimpleEntry<FilterInputStream, InputStream>>(613, 613, 613, true);
      AbstractLinkedMap.LinkMapIterator<FilterInputStream, AbstractMap.SimpleEntry<FilterInputStream, InputStream>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<FilterInputStream, AbstractMap.SimpleEntry<FilterInputStream, InputStream>>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2450;
      LinkedMap<String, AbstractLinkedMap.LinkEntry<Object, Integer>> linkedMap0 = new LinkedMap<String, AbstractLinkedMap.LinkEntry<Object, Integer>>(2450);
      linkedMap0.put("dCD]*!A}rJ?.JTq_", (AbstractLinkedMap.LinkEntry<Object, Integer>) null);
      linkedMap0.values();
      linkedMap0.lastKey();
      LRUMap<AbstractLinkedMap.LinkEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(2450);
      AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Integer, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(lRUMap0);
      LinkedMap<String, AbstractMap.SimpleEntry<Object, Object>> linkedMap1 = new LinkedMap<String, AbstractMap.SimpleEntry<Object, Object>>(26);
      String string0 = "FLR";
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = null;
      try {
        abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>((Map.Entry<?, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      String string0 = "{'bX3*]\"";
      linkedMap0.put("{'bX3*]\"", "{'bX3*]\"");
      linkedMap0.clear();
      int int0 = 1;
      LRUMapTest.MockLRUMapSubclass<Object, Integer> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<Object, Integer>(1);
      lRUMapTest_MockLRUMapSubclass0.getEntry("{'bX3*]\"");
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, String>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractLinkedMap.LinkEntry<Object, String>>(1, 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, String> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, String>(2);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.put(integer0, (String) null);
      Integer integer1 = new Integer(0);
      String string0 = "G4os%";
      lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.addMapping(2, 2, integer1, "G4os%");
      LRUMap<AbstractMap.SimpleEntry<Object, String>, Integer> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, String>, Integer>(2, false);
      int int1 = (-1387);
      Integer integer2 = new Integer((-1387));
      AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, String>, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, String>, Integer>((AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, String>, Integer>) null, 2, integer1, integer2);
      // Undeclared exception!
      try { 
        lRUMap0.removeEntry(abstractHashedMap_HashEntry0, (-1387), (AbstractHashedMap.HashEntry<AbstractMap.SimpleEntry<Object, String>, Integer>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractHashedMap$HashEntry cannot be cast to org.apache.commons.collections4.map.AbstractLinkedMap$LinkEntry
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<Object, Object>, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<Object, Object>, Object>(2);
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, Object> lRUMap0 = lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.clone();
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, Object> lRUMap1 = lRUMap0.clone();
      lRUMap1.init();
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(2);
      AbstractLinkedMap.EntrySetIterator<Object, Object> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<Object, Object>(linkedMap0);
      Integer integer0 = new Integer(210);
      linkedMap0.put(lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0, integer0);
      abstractLinkedMap_EntrySetIterator0.hasNext();
      // Undeclared exception!
      try { 
        abstractLinkedMap_EntrySetIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2;
      LRUMap<Integer, Object> lRUMap0 = new LRUMap<Integer, Object>(2, 1.0F, false);
      lRUMap0.clear();
      AbstractHashedMap.EntrySet<Integer, Object> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<Integer, Object>(lRUMap0);
      lRUMap0.entrySet = abstractHashedMap_EntrySet0;
      lRUMap0.createKeySetIterator();
      int int1 = 1644;
      Integer integer0 = new Integer(1644);
      lRUMap0.put(integer0, integer0);
      LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(2, 2, (-1599.0374F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, String> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Object, String>(1539);
      int int0 = 0;
      // Undeclared exception!
      try { 
        lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0.getEntry(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap1 = linkedMap0.clone();
      linkedMap0.createEntrySetIterator();
      linkedMap1.put("#|GS%;w&c@GFq", (String) null);
      linkedMap0.put((String) null, ";");
      linkedMap1.entrySet();
      linkedMap0.put("/6z.@k)_P", "");
      linkedMap1.putAll(linkedMap0);
      linkedMap1.clone();
      int int0 = 4332;
      LRUMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(927, 4332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap initial size must not be greather than max size
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>(711, true);
      Integer integer0 = new Integer(17);
      AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>((AbstractHashedMap.HashEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>) null, 1, (Object) null, integer0);
      Integer integer1 = new Integer(2);
      Integer integer2 = new Integer(1);
      AbstractLinkedMap.LinkEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>(abstractHashedMap_HashEntry0, (-1), integer1, integer2);
      Integer integer3 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer3, (String) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Integer, Object>(abstractMap_SimpleEntry0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry1);
      lRUMap0.createEntry(abstractLinkedMap_LinkEntry0, 1, abstractMap_SimpleImmutableEntry0, integer0);
      lRUMap0.ensureCapacity(0);
      lRUMap0.mapIterator();
      LRUMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> lRUMap1 = new LRUMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(2492, true);
      AbstractLinkedMap.LinkMapIterator<Integer, Object> abstractLinkedMap_LinkMapIterator0 = null;
      try {
        abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Integer, Object>((AbstractLinkedMap<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 298;
      LRUMapTest.MockLRUMapSubclass<String, Object> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<String, Object>(298);
      lRUMapTest_MockLRUMapSubclass0.put("~", "~");
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      lRUMapTest_MockLRUMapSubclass0.createKeySetIterator();
      LRUMap<Integer, Object> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Integer, Object>(linkedMap0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>(13, 997.0354F);
      LinkedMap<Object, String> linkedMap1 = linkedMap0.clone();
      linkedMap1.indexOf(linkedMap0);
      LRUMap<AbstractMap.SimpleEntry<String, String>, AbstractLinkedMap.LinkEntry<String, String>> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<String, String>, AbstractLinkedMap.LinkEntry<String, String>>(13);
      AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleEntry<String, String>, AbstractLinkedMap.LinkEntry<String, String>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleEntry<String, String>, AbstractLinkedMap.LinkEntry<String, String>>(lRUMap0);
      abstractLinkedMap_LinkMapIterator0.currentEntry();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> lRUMap0 = new LRUMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      lRUMap0.modCount = 1256;
      AbstractLinkedMap.EntrySetIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Object>>(lRUMap0);
      abstractLinkedMap_EntrySetIterator0.expectedModCount = 0;
      abstractLinkedMap_EntrySetIterator0.reset();
      abstractLinkedMap_EntrySetIterator0.toString();
      abstractLinkedMap_EntrySetIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LRUMap<Object, AbstractMap.SimpleEntry<Object, Object>> lRUMap0 = new LRUMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      LRUMapTest.MockLRUMapSubclass<String, String> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<String, String>(16);
      // Undeclared exception!
      try { 
        lRUMapTest_MockLRUMapSubclass0.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      linkedMap0.clear();
      LinkedMap<Integer, String> linkedMap1 = new LinkedMap<Integer, String>(3136);
      LRUMapTest.MockLRUMapSubclass<Integer, String> lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<Integer, String>(1979);
      AbstractLinkedMap.LinkEntry<Integer, String> abstractLinkedMap_LinkEntry0 = lRUMapTest_MockLRUMapSubclass0.entry;
      AbstractHashedMap.HashEntry<Integer, String> abstractHashedMap_HashEntry0 = new AbstractHashedMap.HashEntry<Integer, String>((AbstractHashedMap.HashEntry<Integer, String>) null, 4546, lRUMapTest_MockLRUMapSubclass0, "`DAouousQM");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      LRUMapTest.MockLRUMapSubclassBlocksRemove<Object, AbstractMap.SimpleImmutableEntry<Object, String>> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<Object, AbstractMap.SimpleImmutableEntry<Object, String>>(724, true);
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>();
      lRUMap0.remove((Object) lRUMapTest_MockLRUMapSubclassBlocksRemove0, (Object) "~SC&nId%1-b<KIBW9");
      AbstractLinkedMap.EntrySetIterator<String, Object> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<String, Object>(lRUMap0);
      abstractLinkedMap_EntrySetIterator0.toString();
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(724);
      // Undeclared exception!
      try { 
        linkedMap0.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>();
      AbstractLinkedMap.KeySetIterator<Object> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<Object>(lRUMap0);
      AbstractLinkedMap.LinkEntry<Object, String> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, String>((AbstractHashedMap.HashEntry<Object, String>) null, 57, (Object) null, (String) null);
      AbstractLinkedMap.LinkEntry<Object, String> abstractLinkedMap_LinkEntry1 = abstractLinkedMap_LinkEntry0.before;
      lRUMap0.header = null;
      abstractLinkedMap_KeySetIterator0.previousEntry();
      abstractLinkedMap_KeySetIterator0.nextEntry();
      abstractLinkedMap_KeySetIterator0.next();
      int int0 = 0;
      LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, String> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = null;
      try {
        lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, String>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, FilterInputStream>, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, FilterInputStream>, Object>(3533);
      LinkedMap<Integer, InputStream> linkedMap0 = new LinkedMap<Integer, InputStream>(18, 18);
      linkedMap0.get(lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0);
      int int0 = 2470;
      // Undeclared exception!
      try { 
        linkedMap0.get(2470);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 2470 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 9;
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(9);
      AbstractLinkedMap.KeySetIterator<String> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<String>(linkedMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_KeySetIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> lRUMap0 = new LRUMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(1829, 1829);
      AbstractHashedMap.EntrySet<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> abstractHashedMap_EntrySet0 = new AbstractHashedMap.EntrySet<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(lRUMap0);
      lRUMap0.entrySet = abstractHashedMap_EntrySet0;
      AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(lRUMap0);
      lRUMap0.init();
      abstractLinkedMap_LinkMapIterator0.expectedModCount = 1422;
      abstractLinkedMap_LinkMapIterator0.hasPrevious();
      LRUMap<String, String> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<String, String>((-1793), 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AbstractLinkedMap.ValuesIterator<Object> abstractLinkedMap_ValuesIterator0 = null;
      try {
        abstractLinkedMap_ValuesIterator0 = new AbstractLinkedMap.ValuesIterator<Object>((AbstractLinkedMap<?, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LRUMap<String, Object> lRUMap0 = new LRUMap<String, Object>(3654, 3654, 3654);
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(lRUMap0);
      linkedMap0.remove((Object) "");
      linkedMap0.asList();
      LRUMap<Integer, Integer> lRUMap1 = null;
      try {
        lRUMap1 = new LRUMap<Integer, Integer>(3654, (-197), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(2572, false);
      LRUMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> lRUMap1 = new LRUMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(2572);
      lRUMap1.get((Object) lRUMap0);
      lRUMap0.equals((Object) null);
      lRUMap0.mapIterator();
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Integer, Object>> lRUMap2 = new LRUMap<Object, AbstractLinkedMap.LinkEntry<Integer, Object>>(1836, 1836);
      LRUMap<Object, AbstractLinkedMap.LinkEntry<Integer, Object>> lRUMap3 = lRUMap2.clone();
      lRUMap3.createValuesIterator();
      LinkedMap<AbstractLinkedMap.LinkEntry<Object, Integer>, AbstractLinkedMap.LinkEntry<Object, String>> linkedMap0 = new LinkedMap<AbstractLinkedMap.LinkEntry<Object, Integer>, AbstractLinkedMap.LinkEntry<Object, String>>(10);
      // Undeclared exception!
      try { 
        linkedMap0.remove((-2417));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -2417 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0, 1693.0F);
      AbstractLinkedMap.LinkMapIterator<Object, Integer> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, Integer>(linkedMap0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.setValue(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(2826);
      LinkedMap<String, String> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, String> linkedMap2 = linkedMap1.clone();
      linkedMap2.mapIterator();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(10, true);
      AbstractLinkedMap.EntrySetIterator<Object, Object> abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<Object, Object>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_EntrySetIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> linkedMap0 = new LinkedMap<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(1403, 1424.84F);
      AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<AbstractLinkedMap.LinkEntry<Object, Object>, AbstractMap.SimpleEntry<String, Object>>(linkedMap0);
      abstractLinkedMap_LinkMapIterator0.hasNext();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleEntry<String, String>, Integer> abstractLinkedMap_EntrySetIterator0 = null;
      try {
        abstractLinkedMap_EntrySetIterator0 = new AbstractLinkedMap.EntrySetIterator<AbstractMap.SimpleEntry<String, String>, Integer>((AbstractLinkedMap<AbstractMap.SimpleEntry<String, String>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedMap<Integer, AbstractMap.SimpleEntry<Integer, Object>> linkedMap0 = new LinkedMap<Integer, AbstractMap.SimpleEntry<Integer, Object>>();
      AbstractHashedMap.HashEntry<Integer, AbstractMap.SimpleEntry<Integer, Object>> abstractHashedMap_HashEntry0 = null;
      int int0 = 332;
      Integer integer0 = new Integer(0);
      LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> linkedMap1 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>(0);
      // Undeclared exception!
      try { 
        linkedMap1.get(714);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 714 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>();
      LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>> linkedMap1 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Object, Object>>(0);
      // Undeclared exception!
      try { 
        linkedMap1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 2;
      LRUMap<Object, Object> lRUMap0 = new LRUMap<Object, Object>(2);
      AbstractLinkedMap.LinkMapIterator<Object, Object> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, Object>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, String> lRUMap0 = new LRUMap<AbstractMap.SimpleEntry<Object, Object>, String>(2, 2, 2);
      LRUMap<AbstractMap.SimpleEntry<Object, Object>, String> lRUMap1 = lRUMap0.clone();
      AbstractLinkedMap.KeySetIterator<AbstractMap.SimpleEntry<Object, Object>> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<AbstractMap.SimpleEntry<Object, Object>>(lRUMap1);
      // Undeclared exception!
      try { 
        abstractLinkedMap_KeySetIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No next() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>();
      linkedMap0.put("6i]8Sh0s/7d", "6i]8Sh0s/7d");
      linkedMap0.clone();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Integer, Object> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<Integer, Object>(2);
      AbstractLinkedMap.KeySetIterator<Integer> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<Integer>(lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_KeySetIterator0.previousEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>();
      AbstractLinkedMap.KeySetIterator<Object> abstractLinkedMap_KeySetIterator0 = new AbstractLinkedMap.KeySetIterator<Object>(lRUMap0);
      int int0 = 57;
      String string0 = null;
      AbstractLinkedMap.LinkEntry<Object, String> abstractLinkedMap_LinkEntry0 = new AbstractLinkedMap.LinkEntry<Object, String>((AbstractHashedMap.HashEntry<Object, String>) null, 57, (Object) null, (String) null);
      AbstractLinkedMap.LinkEntry<Object, String> abstractLinkedMap_LinkEntry1 = abstractLinkedMap_LinkEntry0.before;
      lRUMap0.header = null;
      abstractLinkedMap_KeySetIterator0.previousEntry();
      abstractLinkedMap_KeySetIterator0.nextEntry();
      abstractLinkedMap_KeySetIterator0.next();
      int int1 = 0;
      LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, String> lRUMapTest_MockLRUMapSubclassBlocksRemove0 = null;
      try {
        lRUMapTest_MockLRUMapSubclassBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassBlocksRemove<Integer, String>(0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-1100);
      LinkedMap<Object, AbstractMap.SimpleEntry<String, Integer>> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, AbstractMap.SimpleEntry<String, Integer>>((-1100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      String string0 = "entrySet should be same size as HashMap's\nTest: ";
      int int0 = (-2334);
      Integer integer0 = new Integer((-2334));
      linkedMap0.put("entrySet should be same size as HashMap's\nTest: ", integer0);
      int int1 = 0;
      linkedMap0.remove(0);
      int int2 = 1073741824;
      boolean boolean0 = true;
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>(1073741824, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-1);
      LinkedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Object>((-1), 118.6F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedMap<String, AbstractMap.SimpleEntry<String, String>> linkedMap0 = new LinkedMap<String, AbstractMap.SimpleEntry<String, String>>();
      int int0 = (-826);
      Integer integer0 = new Integer((-826));
      linkedMap0.nextKey(integer0);
      int int1 = 18;
      LinkedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> linkedMap1 = new LinkedMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>(18, 1775.431F);
      int int2 = 1;
      Integer integer1 = new Integer(1);
      linkedMap1.containsValue(integer1);
      LRUMap<Integer, AbstractLinkedMap.LinkEntry<Object, String>> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Integer, AbstractLinkedMap.LinkEntry<Object, String>>(1, (-2897.351F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LRUMapTest.MockLRUMapSubclass<Object, Integer> lRUMapTest_MockLRUMapSubclass0 = null;
      try {
        lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<Object, Integer>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Map<Integer, String> map0 = null;
      LRUMap<Object, String> lRUMap0 = null;
      try {
        lRUMap0 = new LRUMap<Object, String>((Map<?, ? extends String>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1330;
      LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, Object>, AbstractLinkedMap.LinkEntry<Object, Object>> lRUMapTest_MockLRUMapSubclassFirstBlocksRemove0 = new LRUMapTest.MockLRUMapSubclassFirstBlocksRemove<AbstractMap.SimpleEntry<String, Object>, AbstractLinkedMap.LinkEntry<Object, Object>>(1330);
      LRUMap<Object, String> lRUMap0 = new LRUMap<Object, String>(1330);
      AbstractLinkedMap.LinkMapIterator<Object, String> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, String>(lRUMap0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.previousEntry();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No previous() entry in the iteration
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      LRUMapTest.MockLRUMapSubclass<AbstractMap.SimpleEntry<Object, Object>, String> lRUMapTest_MockLRUMapSubclass0 = null;
      try {
        lRUMapTest_MockLRUMapSubclass0 = new LRUMapTest.MockLRUMapSubclass<AbstractMap.SimpleEntry<Object, Object>, String>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // LRUMap max size must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.LRUMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1052;
      LRUMap<String, AbstractMap.SimpleEntry<Object, Object>> lRUMap0 = new LRUMap<String, AbstractMap.SimpleEntry<Object, Object>>(1052, true);
      lRUMap0.values();
      lRUMap0.createKeySetIterator();
      lRUMap0.createValuesIterator();
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>();
      linkedMap0.loadFactor = (-1573.0F);
      AbstractLinkedMap.LinkMapIterator<Object, Integer> abstractLinkedMap_LinkMapIterator0 = new AbstractLinkedMap.LinkMapIterator<Object, Integer>(linkedMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      abstractLinkedMap_LinkMapIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        abstractLinkedMap_LinkMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap$LinkMapIterator", e);
      }
  }
}
