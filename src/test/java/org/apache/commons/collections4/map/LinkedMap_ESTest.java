/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:09:57 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.FileDescriptor;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractLinkedMap;
import org.apache.commons.collections4.map.LinkedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class LinkedMap_ESTest extends LinkedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.mark(1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(linkedMap0);
      Set<String> set0 = linkedMap0.keySet();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      linkedMap1.putAll(linkedMap0);
      linkedMap0.values = null;
      linkedMap_LinkedMapList0.spliterator();
      linkedMap0.mapIterator();
      String string0 = AbstractHashedMap.SETVALUE_INVALID;
      LinkedMap<Object, String> linkedMap2 = new LinkedMap<Object, String>(linkedMap0);
      LinkedMap<Integer, Integer> linkedMap3 = new LinkedMap<Integer, Integer>();
      linkedMap3.mapIterator();
      linkedMap3.asList();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Integer>(linkedMap3);
      linkedMap_LinkedMapList1.listIterator();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      linkedMap_LinkedMapList2.subList(0, 0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList3 = new LinkedMap.LinkedMapList<Object>(linkedMap2);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList3.retainAll(set0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1073741824;
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(1073741824, 1.0F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(0);
      AbstractHashedMap<Object, Integer> abstractHashedMap0 = linkedMap0.clone();
      Integer integer0 = new Integer(0);
      abstractHashedMap0.put(linkedMap0, integer0);
      abstractHashedMap0.put(linkedMap0, integer0);
      linkedMap0.entrySet();
      LinkedMap<Object, Integer> linkedMap1 = new LinkedMap<Object, Integer>(abstractHashedMap0);
      linkedMap1.getEntry(0);
      LinkedMap<Object, Integer> linkedMap2 = linkedMap1.clone();
      linkedMap2.clone();
      int int1 = 0;
      LinkedMap<String, Integer> linkedMap3 = null;
      try {
        linkedMap3 = new LinkedMap<String, Integer>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2342;
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(2342);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int1 = 0;
      linkedMap_LinkedMapList0.listIterator(0);
      linkedMap_LinkedMapList0.indexOf(linkedMap0);
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(linkedMap0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      linkedMap_LinkedMapList1.sort((Comparator<? super Object>) null);
      linkedMap_LinkedMapList1.iterator();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.add((Object) linkedMap_LinkedMapList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 232;
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(232);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      linkedMap0.indexOf(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      try {
        linkedMap2 = new LinkedMap<Object, Object>(232, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      int int0 = 0;
      // Undeclared exception!
      try { 
        linkedMap0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 330;
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(330);
      // Undeclared exception!
      try { 
        linkedMap0.remove(330);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 330 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Integer, Object>((Map<? extends Integer, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(44, 44);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.listIterator(16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Size: 0
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.retainAll(linkedMap_LinkedMapList1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1);
      LinkedMap<Object, LinkedMap<String, String>> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, LinkedMap<String, String>>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      Predicate<String> predicate0 = Predicate.isEqual((Object) linkedMap_LinkedMapList0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.removeIf(predicate2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(1, 1);
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(linkedMap0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      linkedMap_LinkedMapList0.size();
      LinkedMap<Integer, Integer> linkedMap2 = new LinkedMap<Integer, Integer>();
      int int1 = 0;
      // Undeclared exception!
      try { 
        linkedMap2.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap_LinkedMapList0.toArray();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      Integer integer0 = new Integer((-1813));
      LinkedMap.LinkedMapList<LinkedMap<String, String>> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<LinkedMap<String, String>>((LinkedMap<LinkedMap<String, String>, ?>) null);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedMap<Integer, LinkedMap<Object, String>> linkedMap0 = new LinkedMap<Integer, LinkedMap<Object, String>>();
      linkedMap0.asList();
      LinkedMap<String, Object> linkedMap1 = new LinkedMap<String, Object>(0);
      LinkedMap<String, Object> linkedMap2 = linkedMap1.clone();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap2);
      linkedMap_LinkedMapList0.listIterator();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>(594, 594);
      LinkedMap<Integer, Object> linkedMap1 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = new LinkedMap<Object, Object>(594);
      Set<Object> set0 = linkedMap2.keySet();
      linkedMap_LinkedMapList0.containsAll(set0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.remove((Object) linkedMap0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      LinkedMap<String, Integer> linkedMap1 = new LinkedMap<String, Integer>(linkedMap0);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 0 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(0, 2321.955F);
      // Undeclared exception!
      try { 
        linkedMap0.remove((-824));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -824 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>();
      LinkedMap<String, Object> linkedMap1 = linkedMap0.clone();
      LinkedMap<String, Object> linkedMap2 = new LinkedMap<String, Object>(linkedMap1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedMap<String, Object> linkedMap0 = new LinkedMap<String, Object>(391, 391);
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<String>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      linkedMap_LinkedMapList0.sort((Comparator<? super String>) null);
      linkedMap0.values();
      int int0 = (-4106);
      // Undeclared exception!
      try { 
        linkedMap0.getValue((-4106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -4106 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = null;
      try {
        linkedMap0 = new LinkedMap<Object, Object>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      linkedMap_LinkedMapList1.iterator();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 232;
      LinkedMap<String, String> linkedMap0 = new LinkedMap<String, String>(232);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>(linkedMap0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedMap0.merge("SJF^W Czlb!C_", "SJF^W Czlb!C_", biFunction0);
      linkedMap0.indexOf(linkedMap1);
      LinkedMap<Object, Object> linkedMap2 = null;
      try {
        linkedMap2 = new LinkedMap<Object, Object>(232, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>();
      LinkedMap<Object, Object> linkedMap1 = linkedMap0.clone();
      int int0 = (-2275);
      // Undeclared exception!
      try { 
        linkedMap1.remove((-2275));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index -2275 is less than zero
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedMap<Object, Integer> linkedMap0 = new LinkedMap<Object, Integer>(2330, 2330);
      List<Object> list0 = linkedMap0.asList();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      linkedMap_LinkedMapList0.contains(list0);
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap<String, String> linkedMap2 = new LinkedMap<String, String>(linkedMap1);
      linkedMap2.put("", "");
      LinkedMap<String, String> linkedMap3 = new LinkedMap<String, String>(linkedMap2);
      linkedMap3.asList();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<String>(linkedMap3);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList1.remove(2330);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedMap<Integer, Object> linkedMap0 = new LinkedMap<Integer, Object>();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      linkedMap_LinkedMapList0.iterator();
      linkedMap_LinkedMapList0.listIterator();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      linkedMap_LinkedMapList1.listIterator();
      LinkedMap<String, String> linkedMap1 = new LinkedMap<String, String>();
      LinkedMap.LinkedMapList<String> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<String>(linkedMap1);
      linkedMap_LinkedMapList2.toArray();
      LinkedMap<LinkedMap<Object, String>, String> linkedMap2 = new LinkedMap<LinkedMap<Object, String>, String>();
      LinkedMap.LinkedMapList<LinkedMap<Object, String>> linkedMap_LinkedMapList3 = new LinkedMap.LinkedMapList<LinkedMap<Object, String>>(linkedMap2);
      linkedMap_LinkedMapList3.containsAll(linkedMap_LinkedMapList2);
      LinkedMap<Integer, String> linkedMap3 = new LinkedMap<Integer, String>();
      LinkedMap<Integer, String> linkedMap4 = linkedMap3.clone();
      assertNotSame(linkedMap4, linkedMap3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedMap<String, Integer> linkedMap0 = new LinkedMap<String, Integer>();
      // Undeclared exception!
      try { 
        linkedMap0.getValue(1441);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index 1441 is invalid for size 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractLinkedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedMap<Object, String> linkedMap0 = new LinkedMap<Object, String>();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "SQqD)~u8SRY%(~}3";
      stringArray0[1] = "L)&n#$T{DZMihQx";
      stringArray0[2] = "yY\" sB8:oQ";
      stringArray0[3] = " is invalid for size ";
      stringArray0[4] = "f&7E-P4s!aMrv%4e";
      linkedMap_LinkedMapList0.toArray(stringArray0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedMap_LinkedMapList1.sort(comparator0);
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList1.removeAll(linkedMap_LinkedMapList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.LinkedMap$LinkedMapList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedMap<Object, Object> linkedMap0 = new LinkedMap<Object, Object>(9);
      linkedMap0.clone();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Object>(linkedMap0);
      int int0 = linkedMap_LinkedMapList1.indexOf(linkedMap0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedMap<Integer, String> linkedMap0 = new LinkedMap<Integer, String>();
      AbstractHashedMap<Integer, String> abstractHashedMap0 = linkedMap0.clone();
      LinkedMap<Object, String> linkedMap1 = new LinkedMap<Object, String>(abstractHashedMap0);
      linkedMap1.asList();
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      Integer integer0 = new Integer(0);
      int int0 = linkedMap_LinkedMapList0.lastIndexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>();
      int int0 = 123;
      LinkedMap<Object, Object> linkedMap1 = new LinkedMap<Object, Object>(123);
      LinkedMap.LinkedMapList<Object> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Object>(linkedMap1);
      LinkedMap<Locale.LanguageRange, String> linkedMap2 = new LinkedMap<Locale.LanguageRange, String>(123);
      LinkedMap.LinkedMapList<Locale.LanguageRange> linkedMap_LinkedMapList1 = new LinkedMap.LinkedMapList<Locale.LanguageRange>(linkedMap2);
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedMap_LinkedMapList1, (Collection<String>) set0, locale_FilteringMode0);
      linkedMap_LinkedMapList0.containsAll(list0);
      linkedMap_LinkedMapList0.indexOf(linkedMap1);
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList2 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList2.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 562;
      LinkedMap<Integer, Integer> linkedMap0 = new LinkedMap<Integer, Integer>(562);
      linkedMap0.values();
      LinkedMap.LinkedMapList<Integer> linkedMap_LinkedMapList0 = new LinkedMap.LinkedMapList<Integer>(linkedMap0);
      int int1 = 2367;
      linkedMap0.clone();
      // Undeclared exception!
      try { 
        linkedMap_LinkedMapList0.subList(2367, (-848));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2367) > toIndex(-848)
         //
         verifyException("java.util.SubList", e);
      }
  }
}
