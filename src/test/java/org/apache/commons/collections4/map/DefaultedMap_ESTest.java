/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:58:22 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InstantiateFactory;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.map.DefaultedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class DefaultedMap_ESTest extends DefaultedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Transformer<Object, String>, Boolean> hashMap0 = new HashMap<Transformer<Object, String>, Boolean>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicateTransformer<HashMap<Object, Object>> predicateTransformer0 = new PredicateTransformer<HashMap<Object, Object>>(predicate0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Boolean boolean0 = predicateTransformer0.transform(hashMap1);
      DefaultedMap.defaultedMap((Map<Transformer<Object, String>, Boolean>) hashMap0, boolean0);
      HashMap<Boolean, Integer> hashMap2 = new HashMap<Boolean, Integer>();
      Boolean boolean1 = predicateTransformer0.transform(hashMap1);
      Integer integer0 = new Integer(1201);
      hashMap2.put(boolean1, integer0);
      Integer integer1 = new Integer(465);
      DefaultedMap.defaultedMap((Map<Boolean, Integer>) hashMap2, integer1);
      HashMap<InstanceofPredicate, Predicate<Object>> hashMap3 = new HashMap<InstanceofPredicate, Predicate<Object>>();
      Transformer<Object, InstanceofPredicate> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, InstanceofPredicate> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer0);
      DefaultedMap<InstanceofPredicate, Predicate<Object>> defaultedMap0 = new DefaultedMap<InstanceofPredicate, Predicate<Object>>(hashMap3, transformer1);
      DefaultedMap.defaultedMap((Map<InstanceofPredicate, Predicate<Object>>) defaultedMap0, predicate0);
      HashMap<String, Integer> hashMap4 = new HashMap<String, Integer>();
      Integer integer2 = new Integer(1201);
      DefaultedMap.defaultedMap((Map<String, Integer>) hashMap4, integer2);
      DefaultedMap<Integer, Predicate<Object>> defaultedMap1 = new DefaultedMap<Integer, Predicate<Object>>(predicate0);
      Factory<InstanceofPredicate> factory0 = ExceptionFactory.exceptionFactory();
      DefaultedMap<Integer, Predicate<Object>> defaultedMap2 = DefaultedMap.defaultedMap((Map<Integer, Predicate<Object>>) defaultedMap1, (Factory<? extends Predicate<Object>>) factory0);
      DefaultedMap<Integer, Predicate<Object>> defaultedMap3 = DefaultedMap.defaultedMap((Map<Integer, Predicate<Object>>) defaultedMap2, predicate0);
      defaultedMap1.map = (Map<Integer, Predicate<Object>>) defaultedMap3;
      DefaultedMap<Integer, Predicate<Object>> defaultedMap4 = DefaultedMap.defaultedMap((Map<Integer, Predicate<Object>>) defaultedMap3, (Factory<? extends Predicate<Object>>) factory0);
      // Undeclared exception!
      try { 
        defaultedMap4.get((Object) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Predicate<Object>, String> hashMap0 = new HashMap<Predicate<Object>, String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      IdentityPredicate.identityPredicate("-35Rx'{NN");
      hashMap0.put(identityPredicate0, "}5VU<+\"3OVa4");
      Map<Predicate<Object>, String> map0 = DefaultedMap.defaultedMap((Map<Predicate<Object>, String>) hashMap0, (Transformer<? super Predicate<Object>, ? extends String>) transformer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("PdmzZ'tR/pQho");
      DefaultedMap<Predicate<Object>, String> defaultedMap0 = new DefaultedMap<Predicate<Object>, String>(map0, constantTransformer0);
      Factory<String> factory0 = ConstantFactory.constantFactory("PdmzZ'tR/pQho");
      DefaultedMap.defaultedMap((Map<Predicate<Object>, String>) defaultedMap0, (Factory<? extends String>) factory0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(2786);
      hashMap1.put(transformer0, integer0);
      Integer integer1 = new Integer(2786);
      DefaultedMap.defaultedMap((Map<Object, Integer>) hashMap1, integer1);
      Transformer<Object, InstanceofPredicate> transformer1 = null;
      DefaultedMap<String, Predicate<Object>> defaultedMap1 = null;
      try {
        defaultedMap1 = new DefaultedMap<String, Predicate<Object>>((Transformer<? super String, ? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer((-839));
      DefaultedMap<Object, Integer> defaultedMap0 = new DefaultedMap<Object, Integer>(integer0);
      Transformer<Object, Integer> transformer0 = null;
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Object, Integer>) defaultedMap0, (Transformer<? super Object, ? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Map<String, Predicate<Object>> map0 = null;
      Factory<InstanceofPredicate> factory0 = null;
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<String, Predicate<Object>>) null, (Factory<? extends Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<InstanceofPredicate, String> hashMap0 = new HashMap<InstanceofPredicate, String>();
      Transformer<Object, String> transformer0 = null;
      DefaultedMap<InstanceofPredicate, String> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<InstanceofPredicate, String>(hashMap0, (Transformer<? super InstanceofPredicate, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<InstanceofPredicate> class0 = InstanceofPredicate.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      DefaultedMap<InstanceofPredicate, Object> defaultedMap0 = new DefaultedMap<InstanceofPredicate, Object>(instanceofPredicate0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<HashMap<Predicate<Object>, Predicate<Object>>, Object>) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("t_s>");
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Transformer<Transformer<Object, String>, Transformer<Object, String>>, String>) null, (Factory<? extends String>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultedMap<Predicate<Object>, Object> defaultedMap0 = new DefaultedMap<Predicate<Object>, Object>("");
      defaultedMap0.mapIterator();
      defaultedMap0.get("");
      int int0 = 1082;
      HashMap<String, Transformer<Object, String>> hashMap0 = new HashMap<String, Transformer<Object, String>>(1082);
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("");
      ConstantFactory<Transformer<Object, String>> constantFactory0 = new ConstantFactory<Transformer<Object, String>>(transformer0);
      ConstantFactory.constantFactory(transformer0);
      DefaultedMap<String, Transformer<Object, String>> defaultedMap1 = DefaultedMap.defaultedMap((Map<String, Transformer<Object, String>>) hashMap0, (Factory<? extends Transformer<Object, String>>) constantFactory0);
      Factory<Transformer<Object, String>> factory0 = ConstantFactory.constantFactory(transformer0);
      DefaultedMap.defaultedMap((Map<String, Transformer<Object, String>>) defaultedMap1, (Factory<? extends Transformer<Object, String>>) factory0);
      DefaultedMap<InstanceofPredicate, String> defaultedMap2 = null;
      try {
        defaultedMap2 = new DefaultedMap<InstanceofPredicate, String>((Map<InstanceofPredicate, String>) null, transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Predicate<Object>, Predicate<Object>> hashMap0 = new HashMap<Predicate<Object>, Predicate<Object>>();
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      hashMap0.put(instanceofPredicate0, predicate0);
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>(instanceofPredicate0);
      DefaultedMap<Predicate<Object>, Predicate<Object>> defaultedMap0 = DefaultedMap.defaultedMap((Map<Predicate<Object>, Predicate<Object>>) hashMap0, (Factory<? extends Predicate<Object>>) constantFactory0);
      DefaultedMap<Predicate<Object>, Predicate<Object>> defaultedMap1 = DefaultedMap.defaultedMap((Map<Predicate<Object>, Predicate<Object>>) defaultedMap0, (Predicate<Object>) instanceofPredicate0);
      DefaultedMap<Predicate<Object>, Predicate<Object>> defaultedMap2 = DefaultedMap.defaultedMap((Map<Predicate<Object>, Predicate<Object>>) defaultedMap1, (Factory<? extends Predicate<Object>>) constantFactory0);
      DefaultedMap.defaultedMap((Map<Predicate<Object>, Predicate<Object>>) defaultedMap2, (Factory<? extends Predicate<Object>>) constantFactory0);
      DefaultedMap<Predicate<Object>, Object> defaultedMap3 = new DefaultedMap<Predicate<Object>, Object>(defaultedMap1);
      Factory<InstanceofPredicate> factory0 = ConstantFactory.constantFactory(instanceofPredicate0);
      Transformer<Object, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      Map<Predicate<Object>, Object> defaultedMap32 = (Map<Predicate<Object>, Object>) defaultedMap3;
	Transformer<Object, ?> transformer02 = (Transformer<Object, ?>) transformer0;
	Map<Predicate<Object>, Object> map0 = DefaultedMap.defaultedMap(defaultedMap32, predicate0);
      DefaultedMap<Predicate<Object>, Object> defaultedMap4 = DefaultedMap.defaultedMap(map0, predicate0);
      DefaultedMap<Predicate<Object>, Object> defaultedMap5 = new DefaultedMap<Predicate<Object>, Object>(defaultedMap4, transformer0);
      DefaultedMap<Closure<Object>, Object> defaultedMap6 = new DefaultedMap<Closure<Object>, Object>(defaultedMap1);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      DefaultedMap defaultedMap7 = (DefaultedMap)defaultedMap6.get(predicate1);
      assertEquals(1, defaultedMap7.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Factory<InstanceofPredicate> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<InstanceofPredicate, InstanceofPredicate> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) factory0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<InstanceofPredicate, InstanceofPredicate>) null, (Transformer<? super InstanceofPredicate, ? extends InstanceofPredicate>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Object, String> transformer0 = null;
      DefaultedMap<InstanceofPredicate, String> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<InstanceofPredicate, String>((Transformer<? super InstanceofPredicate, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "Transformer must not be null";
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("Transformer must not be null");
      DefaultedMap<HashMap<Object, Transformer<Object, String>>, String> defaultedMap0 = new DefaultedMap<HashMap<Object, Transformer<Object, String>>, String>((Transformer<? super HashMap<Object, Transformer<Object, String>>, ? extends String>) constantTransformer0);
      HashMap<Object, Transformer<Object, String>> hashMap0 = new HashMap<Object, Transformer<Object, String>>();
      // Undeclared exception!
      try { 
        defaultedMap0.compute(hashMap0, (BiFunction<? super HashMap<Object, Transformer<Object, String>>, ? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Transformer<Integer, Boolean> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.map.DefaultedMap");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) transformer0, comparator0);
      predicateArray0[0] = predicate0;
      Transformer<Object, InstanceofPredicate>[] transformerArray0 = (Transformer<Object, InstanceofPredicate>[]) Array.newInstance(Transformer.class, 5);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      transformerArray0[0] = (Transformer<Object, InstanceofPredicate>) constantTransformer0;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      InvokerTransformer<Object, InstanceofPredicate> invokerTransformer0 = new InvokerTransformer<Object, InstanceofPredicate>("", classArray0, classArray0);
      transformerArray0[1] = (Transformer<Object, InstanceofPredicate>) invokerTransformer0;
      Transformer<Object, InstanceofPredicate> transformer1 = ExceptionTransformer.exceptionTransformer();
      transformerArray0[2] = transformer1;
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer1 = new ConstantTransformer<Object, InstanceofPredicate>((InstanceofPredicate) null);
      transformerArray0[3] = (Transformer<Object, InstanceofPredicate>) constantTransformer1;
      ConstantFactory<InstanceofPredicate> constantFactory0 = new ConstantFactory<InstanceofPredicate>((InstanceofPredicate) null);
      Transformer<Object, InstanceofPredicate> transformer2 = FactoryTransformer.factoryTransformer((Factory<? extends InstanceofPredicate>) constantFactory0);
      transformerArray0[4] = transformer2;
      SwitchTransformer<Object, InstanceofPredicate> switchTransformer0 = new SwitchTransformer<Object, InstanceofPredicate>(predicateArray0, transformerArray0, transformerArray0[3]);
      // Undeclared exception!
      try { 
        TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) switchTransformer0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-4085));
      DefaultedMap<InstanceofPredicate, Integer> defaultedMap0 = new DefaultedMap<InstanceofPredicate, Integer>(integer0);
      defaultedMap0.getOrDefault(integer0, integer0);
      Factory<Integer> factory0 = null;
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<InstanceofPredicate, Integer>) defaultedMap0, (Factory<? extends Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      DefaultedMap<Transformer<Object, String>, Transformer<Object, String>> defaultedMap0 = new DefaultedMap<Transformer<Object, String>, Transformer<Object, String>>(transformer0);
      BiFunction<Transformer<Object, String>, Object, Transformer<Object, String>> biFunction0 = (BiFunction<Transformer<Object, String>, Object, Transformer<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(nullable(org.apache.commons.collections4.Transformer.class) , any());
      defaultedMap0.compute(transformer0, biFunction0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer(instanceofPredicate0);
      DefaultedMap<Object, InstanceofPredicate> defaultedMap1 = new DefaultedMap<Object, InstanceofPredicate>(transformer1);
      DefaultedMap.defaultedMap((Map<Object, InstanceofPredicate>) defaultedMap1, (Transformer<? super Object, ? extends InstanceofPredicate>) transformer1);
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      InstantiateFactory<InstanceofPredicate> instantiateFactory0 = null;
      try {
        instantiateFactory0 = new InstantiateFactory<InstanceofPredicate>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InstantiateFactory: The constructor must exist and be public 
         //
         verifyException("org.apache.commons.collections4.functors.InstantiateFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      DefaultedMap<Predicate<Object>, Object> defaultedMap0 = new DefaultedMap<Predicate<Object>, Object>(transformer0);
      InstanceofPredicate instanceofPredicate0 = null;
      Transformer<Object, InstanceofPredicate> transformer1 = ConstantTransformer.constantTransformer((InstanceofPredicate) null);
      DefaultedMap<Boolean, Predicate<Object>> defaultedMap1 = null;
      try {
        defaultedMap1 = new DefaultedMap<Boolean, Predicate<Object>>((Map<Boolean, Predicate<Object>>) null, transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.GREATER;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>((Object) null, comparator0, comparatorPredicate_Criterion0);
      DefaultedMap<Integer, Predicate<Object>> defaultedMap0 = new DefaultedMap<Integer, Predicate<Object>>(comparatorPredicate0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Integer, Predicate<Object>>) defaultedMap0, (Factory<? extends Predicate<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Factory<InstanceofPredicate> factory0 = ConstantFactory.constantFactory(instanceofPredicate0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      InstanceofPredicate.instanceOfPredicate(class0);
      FactoryTransformer<Object, InstanceofPredicate> factoryTransformer0 = new FactoryTransformer<Object, InstanceofPredicate>(factory0);
      factoryTransformer0.transform(instanceofPredicate0);
      DefaultedMap<Integer, InstanceofPredicate> defaultedMap0 = new DefaultedMap<Integer, InstanceofPredicate>((Transformer<? super Integer, ? extends InstanceofPredicate>) factoryTransformer0);
      PredicateTransformer<HashMap<Object, Object>> predicateTransformer0 = new PredicateTransformer<HashMap<Object, Object>>(predicate0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Boolean boolean0 = predicateTransformer0.transform(hashMap0);
      ConstantTransformer<Object, Boolean> constantTransformer0 = new ConstantTransformer<Object, Boolean>(boolean0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Boolean, Boolean>) null, (Transformer<? super Boolean, ? extends Boolean>) constantTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultedMap<String, InstanceofPredicate> defaultedMap0 = null;
      try {
        defaultedMap0 = new DefaultedMap<String, InstanceofPredicate>((Transformer<? super String, ? extends InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      InvokerTransformer<String, Integer> invokerTransformer0 = new InvokerTransformer<String, Integer>("", classArray0, classArray0);
      DefaultedMap<String, Integer> defaultedMap0 = new DefaultedMap<String, Integer>((Transformer<? super String, ? extends Integer>) invokerTransformer0);
      Integer integer0 = new Integer((-107));
      HashMap<String, Transformer<Object, String>> hashMap0 = new HashMap<String, Transformer<Object, String>>();
      DefaultedMap<String, Transformer<Object, String>> defaultedMap1 = DefaultedMap.defaultedMap((Map<String, Transformer<Object, String>>) hashMap0, (Transformer<Object, String>) null);
      BiFunction<Object, Object, Transformer<Object, String>> biFunction0 = (BiFunction<Object, Object, Transformer<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      defaultedMap1.computeIfPresent("cUfAAj.c$9Bc,dJ", biFunction0);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      DefaultedMap<Transformer<Object, String>, Integer> defaultedMap2 = new DefaultedMap<Transformer<Object, String>, Integer>(transformer0);
      defaultedMap2.get(defaultedMap0);
      DefaultedMap<Object, Transformer<Object, String>> defaultedMap3 = new DefaultedMap<Object, Transformer<Object, String>>((Transformer<Object, String>) null);
      Factory<Transformer<Object, String>> factory0 = ExceptionFactory.exceptionFactory();
      DefaultedMap<Object, Transformer<Object, String>> defaultedMap4 = DefaultedMap.defaultedMap((Map<Object, Transformer<Object, String>>) defaultedMap3, (Factory<? extends Transformer<Object, String>>) factory0);
      // Undeclared exception!
      try { 
        DefaultedMap.defaultedMap((Map<Object, Transformer<Object, String>>) defaultedMap4, (Transformer<? super Object, ? extends Transformer<Object, String>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.map.DefaultedMap", e);
      }
  }
}
