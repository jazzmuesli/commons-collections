/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:39:22 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.apache.commons.collections4.map.ListOrderedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ListOrderedMap_ESTest extends ListOrderedMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      hashMap0.put((AbstractMap.SimpleImmutableEntry<String, Object>) null, (Object) null);
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      listOrderedMap0.asList();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap1 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, Object>) listOrderedMap1);
      listOrderedMap2.lastKey();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> listOrderedMap3 = null;
      try {
        listOrderedMap3 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap1 = new ListOrderedMap<String, String>(listOrderedMap0);
      ListOrderedMap<String, String> listOrderedMap2 = new ListOrderedMap<String, String>(listOrderedMap1);
      ListOrderedMap<String, String> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<String, String>) listOrderedMap2);
      listOrderedMap0.map = (Map<String, String>) listOrderedMap1;
      listOrderedMap1.nextKey(listOrderedMap0);
      listOrderedMap3.entrySet();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      listOrderedMap2.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        listOrderedMap3.put("{}", "");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap1 = new ListOrderedMap<HashMap<Object, Object>, Object>(listOrderedMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      listOrderedMap1.values();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap2 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap2);
      ListOrderedMap<Object, Integer> listOrderedMap3 = new ListOrderedMap<Object, Integer>();
      ListOrderedMap.EntrySetView<Object, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, Integer>(listOrderedMap3, linkedList0);
      Integer integer0 = new Integer(125);
      ListOrderedMap.ListOrderedMapEntry<Object, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Object, Integer>(listOrderedMap3, integer0);
      listOrderedMap_EntrySetView0.iterator();
      ListOrderedMap.KeySetView<Object> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Object>(listOrderedMap2);
      Integer integer1 = new Integer(74);
      listOrderedMap_KeySetView0.contains(integer1);
      ListOrderedMap<Integer, Object> listOrderedMap4 = new ListOrderedMap<Integer, Object>();
      ListOrderedMap<Integer, Object> listOrderedMap5 = ListOrderedMap.listOrderedMap((Map<Integer, Object>) listOrderedMap4);
      ListOrderedMap.ValuesView<Object> listOrderedMap_ValuesView1 = new ListOrderedMap.ValuesView<Object>(listOrderedMap5);
      assertEquals(0, listOrderedMap_ValuesView1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      Integer integer0 = new Integer(1830);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>((Integer) null, integer0);
      listOrderedMap0.putIfAbsent(abstractMap_SimpleImmutableEntry0, integer0);
      listOrderedMap0.firstKey();
      int int0 = 1342;
      Integer integer1 = new Integer(1342);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(integer1, integer1);
      listOrderedMap0.put(abstractMap_SimpleImmutableEntry1, integer1);
      ListOrderedMap<String, Object> listOrderedMap1 = new ListOrderedMap<String, Object>();
      ListOrderedMap.ListOrderedMapIterator<String, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, Object>(listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      ListOrderedMap<Integer, HashMap<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Object, Object>>(hashMap0);
      listOrderedMap0.clear();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleEntry<String, Object>>) listOrderedMap1);
      ListOrderedMap<Object, String> listOrderedMap3 = new ListOrderedMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap4 = new ListOrderedMap<Object, String>(listOrderedMap3);
      listOrderedMap1.remove((Object) null, (Object) listOrderedMap4);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<String, Object>>(listOrderedMap2, linkedList0);
      listOrderedMap_EntrySetView0.size();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap5 = new ListOrderedMap<String, Object>(hashMap1);
      Integer integer0 = new Integer((-1229));
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap5.merge((String) null, integer0, biFunction0);
      listOrderedMap5.put(0, (String) null, (Object) listOrderedMap_EntrySetView0);
      assertEquals(1, listOrderedMap5.size());
      
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> listOrderedMap6 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>(hashMap2);
      listOrderedMap6.values();
      ListOrderedMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>> listOrderedMap7 = new ListOrderedMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, HashMap<String, String>> hashMap3 = new HashMap<String, HashMap<String, String>>(0);
      ListOrderedMap<String, HashMap<String, String>> listOrderedMap8 = new ListOrderedMap<String, HashMap<String, String>>(hashMap3);
      ListOrderedMap<String, HashMap<String, String>> listOrderedMap9 = new ListOrderedMap<String, HashMap<String, String>>(listOrderedMap8);
      ListOrderedMap.ValuesView<HashMap<String, String>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<HashMap<String, String>>(listOrderedMap9);
      ListOrderedMap.EntrySetView<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>> listOrderedMap_EntrySetView1 = new ListOrderedMap.EntrySetView<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>>(listOrderedMap7, listOrderedMap_ValuesView0);
      ListOrderedMap<HashMap<Object, Integer>, Integer> listOrderedMap10 = new ListOrderedMap<HashMap<Object, Integer>, Integer>();
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap4 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap11 = ListOrderedMap.listOrderedMap((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>) hashMap4);
      Integer integer1 = new Integer(1);
      ListOrderedMap.ListOrderedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(listOrderedMap11, integer1);
      listOrderedMap_ListOrderedMapEntry0.getValue();
      listOrderedMap10.previousKey((Object) null);
      boolean boolean0 = listOrderedMap_EntrySetView1.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, HashMap<Object, Object>> hashMap0 = new HashMap<Integer, HashMap<Object, Object>>();
      ListOrderedMap<Integer, HashMap<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<Object, Object>>(hashMap0);
      listOrderedMap0.clear();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleEntry<String, Object>>) listOrderedMap1);
      ListOrderedMap<Object, String> listOrderedMap3 = new ListOrderedMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap4 = new ListOrderedMap<Object, String>(listOrderedMap3);
      listOrderedMap1.remove((Object) null, (Object) listOrderedMap4);
      List<Object> list0 = listOrderedMap4.asList();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<String, Object>>(listOrderedMap2, list0);
      listOrderedMap_EntrySetView0.size();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap5 = new ListOrderedMap<String, Object>(hashMap1);
      listOrderedMap5.put(0, (String) null, (Object) listOrderedMap_EntrySetView0);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String> listOrderedMap6 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, String>(hashMap2);
      listOrderedMap6.values();
      ListOrderedMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>> listOrderedMap7 = new ListOrderedMap<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>>();
      HashMap<String, HashMap<String, String>> hashMap3 = new HashMap<String, HashMap<String, String>>(1125);
      ListOrderedMap<String, HashMap<String, String>> listOrderedMap8 = new ListOrderedMap<String, HashMap<String, String>>(hashMap3);
      ListOrderedMap<String, HashMap<String, String>> listOrderedMap9 = new ListOrderedMap<String, HashMap<String, String>>(listOrderedMap8);
      ListOrderedMap.ValuesView<HashMap<String, String>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<HashMap<String, String>>(listOrderedMap9);
      ListOrderedMap.EntrySetView<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>> listOrderedMap_EntrySetView1 = new ListOrderedMap.EntrySetView<HashMap<String, String>, AbstractMap.SimpleEntry<String, String>>(listOrderedMap7, listOrderedMap_ValuesView0);
      ListOrderedMap<HashMap<Object, Integer>, Integer> listOrderedMap10 = new ListOrderedMap<HashMap<Object, Integer>, Integer>();
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap4 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap11 = ListOrderedMap.listOrderedMap((Map<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>) hashMap4);
      Integer integer0 = new Integer(1);
      ListOrderedMap.ListOrderedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Integer, Object>>(listOrderedMap11, integer0);
      listOrderedMap_ListOrderedMapEntry0.getValue();
      listOrderedMap10.previousKey((Object) null);
      boolean boolean0 = listOrderedMap_EntrySetView1.remove((Object) null);
      assertFalse(boolean0);
      
      ListOrderedMap<HashMap<String, Object>, Integer> listOrderedMap12 = new ListOrderedMap<HashMap<String, Object>, Integer>();
      listOrderedMap12.put(hashMap1, integer0);
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>> hashMap5 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>> listOrderedMap13 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>>(hashMap5);
      // Undeclared exception!
      try { 
        listOrderedMap13.get(359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 359, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleImmutableEntry<Object, Object>>) hashMap0);
      ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Object, Object>>(listOrderedMap0);
      listOrderedMap_ValuesView0.iterator();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Integer, Object>>(listOrderedMap1, linkedList0);
      boolean boolean0 = listOrderedMap_EntrySetView0.containsAll(listOrderedMap_ValuesView0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      String string0 = "]PU^!z:>a";
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.computeIfPresent("]PU^!z:>a", biFunction0);
      ListOrderedMap<String, String> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, String>) listOrderedMap0);
      listOrderedMap1.put((String) null, (String) null);
      listOrderedMap0.keyList();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((-1), (Map<? extends String, ? extends String>) listOrderedMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>>(hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll((-3085), (Map<? extends AbstractMap.SimpleEntry<Object, Object>, ? extends HashMap<String, Object>>) hashMap0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3085, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, Integer>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, String>>) listOrderedMap1);
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, String>>(listOrderedMap2);
      ListOrderedMap.ListOrderedIterator<AbstractMap.SimpleEntry<Object, String>, Integer> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<AbstractMap.SimpleEntry<Object, String>, Integer>(listOrderedMap0, listOrderedMap_ValuesView0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Integer>, Object>();
      Integer integer0 = new Integer(1732);
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.computeIfPresent(abstractMap_SimpleImmutableEntry0, biFunction0);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) hashMap0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, String>(listOrderedMap1);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, String> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, String>) listOrderedMap2);
      ListOrderedMap.KeySetView<AbstractMap.SimpleImmutableEntry<String, Object>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<AbstractMap.SimpleImmutableEntry<String, Object>>(listOrderedMap3);
      listOrderedMap_KeySetView0.size();
      ListOrderedMap<Object, String> listOrderedMap4 = new ListOrderedMap<Object, String>();
      ListOrderedMap.KeySetView<Object> listOrderedMap_KeySetView1 = new ListOrderedMap.KeySetView<Object>(listOrderedMap4);
      Integer integer1 = new Integer(0);
      listOrderedMap_KeySetView1.contains(integer1);
      ListOrderedMap<Object, Object> listOrderedMap5 = null;
      try {
        listOrderedMap5 = new ListOrderedMap<Object, Object>((Map<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>> hashMap0 = new HashMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>>(3509);
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<String, Object>, AbstractMap.SimpleEntry<Object, Integer>>) hashMap0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", "aqU)aUT]~P#FX");
      Integer integer0 = new Integer((-370));
      AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("aqU)aUT]~P#FX", integer0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      listOrderedMap0.putIfAbsent(abstractMap_SimpleEntry0, abstractMap_SimpleEntry1);
      listOrderedMap0.remove(0);
      assertEquals(0, listOrderedMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>) listOrderedMap0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>) listOrderedMap1);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap3 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(listOrderedMap2);
      int int0 = 0;
      listOrderedMap3.putAll(0, (Map<? extends AbstractMap.SimpleImmutableEntry<Object, String>, ? extends Integer>) listOrderedMap1);
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>(listOrderedMap3);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<HashMap<String, Object>, Integer> hashMap0 = new HashMap<HashMap<String, Object>, Integer>();
      ListOrderedMap<HashMap<String, Object>, Integer> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<String, Object>, Integer>) hashMap0);
      listOrderedMap0.values();
      ListOrderedMap<Integer, String> listOrderedMap1 = new ListOrderedMap<Integer, String>();
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>((ListOrderedMap<?, Integer>) null);
      ListOrderedMap.EntrySetView<Integer, String> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Integer, String>(listOrderedMap1, listOrderedMap_ValuesView0);
      String string0 = listOrderedMap_EntrySetView0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap1 = new ListOrderedMap<Object, String>(listOrderedMap0);
      int int0 = (-3969);
      // Undeclared exception!
      try { 
        listOrderedMap1.get((-3969));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListOrderedMap<String, AbstractMap.SimpleEntry<String, Object>> listOrderedMap0 = new ListOrderedMap<String, AbstractMap.SimpleEntry<String, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<String, Object>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<String, Object>>) listOrderedMap0);
      int int0 = 1433;
      String string0 = "";
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", listOrderedMap0);
      listOrderedMap0.nextKey("");
      listOrderedMap0.put("", abstractMap_SimpleEntry0);
      Map.Entry.comparingByValue();
      // Undeclared exception!
      try { 
        listOrderedMap1.setValue(1433, abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1433, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>(listOrderedMap0);
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleImmutableEntry<Object, Object>>) listOrderedMap1);
      int int0 = 0;
      HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(listOrderedMap2, listOrderedMap2);
      listOrderedMap2.putIfAbsent(hashMap0, abstractMap_SimpleImmutableEntry0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>) hashMap0);
      listOrderedMap3.toString();
      listOrderedMap3.get("");
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Integer> listOrderedMap4 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Integer>();
      // Undeclared exception!
      try { 
        listOrderedMap4.getValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) listOrderedMap1);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap2);
      int int0 = 1;
      Integer integer0 = new Integer(1);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      listOrderedMap2.compute(integer0, biFunction0);
      ListOrderedMap<Integer, String> listOrderedMap3 = new ListOrderedMap<Integer, String>();
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(1, (Map<? extends Integer, ? extends String>) listOrderedMap3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      String string0 = "[Pn";
      listOrderedMap0.remove((Object) "[Pn", (Object) "[Pn");
      ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleEntry<Object, Object>>) listOrderedMap0);
      HashMap<Object, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      int int0 = (-2961);
      // Undeclared exception!
      try { 
        listOrderedMap1.getValue((-2961));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ListOrderedMap<Object, HashMap<String, Object>> listOrderedMap0 = new ListOrderedMap<Object, HashMap<String, Object>>();
      ListOrderedMap<Object, HashMap<String, Object>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Object, HashMap<String, Object>>) listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap0.putAll(125, (Map<?, ? extends HashMap<String, Object>>) listOrderedMap1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 125, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.toString();
      HashMap<AbstractMap.SimpleEntry<Object, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Object> listOrderedMap1 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Object>(hashMap0);
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, Object>, Object>) listOrderedMap1);
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, Object>, Object> listOrderedMap_ListOrderedMapIterator1 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, Object>, Object>(listOrderedMap2);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(listOrderedMap_ListOrderedMapIterator0, hashMap0);
      hashMap0.put(abstractMap_SimpleEntry0, listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator1.toString();
      listOrderedMap_ListOrderedMapIterator1.hasNext();
      ListOrderedMap<String, String> listOrderedMap3 = new ListOrderedMap<String, String>();
      listOrderedMap3.keyList();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap4 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap5 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Integer, Object>>(listOrderedMap4);
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Integer, Object>>(listOrderedMap5);
      listOrderedMap_ValuesView0.contains("Iterator[]");
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap6 = null;
      try {
        listOrderedMap6 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>((Map<Object, AbstractMap.SimpleEntry<Object, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<String, String>) hashMap0);
      ListOrderedMap.KeySetView<String> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<String>(listOrderedMap0);
      listOrderedMap_KeySetView0.clear();
      assertEquals(0, listOrderedMap_KeySetView0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, String> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, String>, String>();
      listOrderedMap0.mapIterator();
      // Undeclared exception!
      try { 
        listOrderedMap0.setValue((-734), "e X1~t");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap1 = new ListOrderedMap<Object, Object>(hashMap0);
      ListOrderedMap<Object, Object> listOrderedMap2 = new ListOrderedMap<Object, Object>(listOrderedMap1);
      List<Object> list0 = listOrderedMap2.keyList();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap0, list0);
      listOrderedMap_EntrySetView0.isEmpty();
      HashMap<Object, HashMap<String, Object>> hashMap1 = new HashMap<Object, HashMap<String, Object>>();
      ListOrderedMap<Object, HashMap<String, Object>> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<Object, HashMap<String, Object>>) hashMap1);
      ListOrderedMap.ListOrderedMapIterator<Object, HashMap<String, Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, HashMap<String, Object>>(listOrderedMap3);
      listOrderedMap_ListOrderedMapIterator0.reset();
      ListOrderedMap<String, Object> listOrderedMap4 = new ListOrderedMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap5 = ListOrderedMap.listOrderedMap((Map<String, Object>) listOrderedMap4);
      // Undeclared exception!
      try { 
        listOrderedMap5.get(1060);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1060, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> hashMap0 = new HashMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ListOrderedMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>) hashMap0);
      ListOrderedMap<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>) listOrderedMap0);
      ListOrderedMap.ListOrderedMapIterator<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<HashMap<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, String>>(listOrderedMap1);
      listOrderedMap_ListOrderedMapIterator0.reset();
      assertFalse(listOrderedMap_ListOrderedMapIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>(hashMap0);
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.set(619, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 619, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ListOrderedMap<String, HashMap<String, Integer>> listOrderedMap0 = new ListOrderedMap<String, HashMap<String, Integer>>();
      ListOrderedMap<String, HashMap<String, Integer>> listOrderedMap1 = new ListOrderedMap<String, HashMap<String, Integer>>(listOrderedMap0);
      ListOrderedMap<String, HashMap<String, Integer>> listOrderedMap2 = new ListOrderedMap<String, HashMap<String, Integer>>(listOrderedMap1);
      ListOrderedMap.ValuesView<HashMap<String, Integer>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<HashMap<String, Integer>>(listOrderedMap2);
      listOrderedMap_ValuesView0.clear();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> listOrderedMap3 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      listOrderedMap3.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap4 = new ListOrderedMap<String, String>(hashMap0);
      ListOrderedMap<String, String> listOrderedMap5 = new ListOrderedMap<String, String>(listOrderedMap4);
      listOrderedMap5.previousKey(listOrderedMap4);
      listOrderedMap5.valueList();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap6 = new ListOrderedMap<String, Object>(hashMap1);
      ListOrderedMap.ListOrderedMapIterator<String, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, Object>(listOrderedMap6);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = new ListOrderedMap<Integer, Object>();
      Integer integer0 = new Integer(3826);
      ListOrderedMap.ListOrderedMapEntry<Integer, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Integer, Object>(listOrderedMap0, integer0);
      listOrderedMap_ListOrderedMapEntry0.setValue(listOrderedMap0);
      ListOrderedMap<AbstractMap.SimpleEntry<String, Integer>, String> listOrderedMap1 = null;
      ListOrderedMap<String, AbstractMap.SimpleEntry<String, Integer>> listOrderedMap2 = null;
      try {
        listOrderedMap2 = new ListOrderedMap<String, AbstractMap.SimpleEntry<String, Integer>>((Map<String, AbstractMap.SimpleEntry<String, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>>(hashMap0);
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap0);
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, String>>) listOrderedMap0);
      hashMap0.values();
      listOrderedMap1.map = (Map<String, AbstractMap.SimpleEntry<Object, String>>) listOrderedMap2;
      ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap1);
      listOrderedMap_ListOrderedMapIterator0.toString();
      ListOrderedMap.ListOrderedMapEntry<Object, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Object, Integer>((ListOrderedMap<Object, Integer>) null, listOrderedMap1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapEntry0.setValue(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap1 = new ListOrderedMap<Object, Object>(listOrderedMap0);
      ListOrderedMap.ListOrderedMapIterator<Object, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, Object>(listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap0 = new ListOrderedMap<HashMap<Object, Object>, Object>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put(listOrderedMap0, listOrderedMap0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap0.merge(hashMap0, hashMap0, biFunction0);
      ListOrderedMap<HashMap<Object, Object>, Object> listOrderedMap1 = new ListOrderedMap<HashMap<Object, Object>, Object>(listOrderedMap0);
      List<Object> list0 = listOrderedMap1.valueList();
      listOrderedMap1.values();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap2 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap2);
      ListOrderedMap<Object, Integer> listOrderedMap3 = new ListOrderedMap<Object, Integer>();
      ListOrderedMap.EntrySetView<Object, Integer> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, Integer>(listOrderedMap3, list0);
      int int0 = 125;
      Integer integer0 = new Integer(125);
      ListOrderedMap.ListOrderedMapEntry<Object, Integer> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<Object, Integer>(listOrderedMap3, integer0);
      // Undeclared exception!
      try { 
        listOrderedMap_EntrySetView0.add(listOrderedMap_ListOrderedMapEntry0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ListOrderedMap.KeySetView<String> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<String>((ListOrderedMap<String, ?>) null);
      // Undeclared exception!
      try { 
        listOrderedMap_KeySetView0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$KeySetView", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-83));
      hashMap0.put(integer0, "Map must not be null.");
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>(hashMap0);
      ListOrderedMap.EntrySetView<Object, String> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, String>(listOrderedMap0, (List<Object>) null);
      listOrderedMap_EntrySetView0.equals(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>(1, 1);
      ListOrderedMap<Integer, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, Object>) hashMap1);
      listOrderedMap1.putIfAbsent(integer0, hashMap0);
      ListOrderedMap<Integer, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Integer, Object>) listOrderedMap1);
      ListOrderedMap.KeySetView<Integer> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Integer>(listOrderedMap2);
      listOrderedMap_KeySetView0.iterator();
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap2 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap3 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>>(hashMap2);
      ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap3);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(hashMap1, "Map must not be null.");
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.setValue(abstractMap_SimpleEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>(hashMap0);
      ListOrderedMap<Object, String> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Object, String>) listOrderedMap0);
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap1);
      int int0 = listOrderedMap_ValuesView0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      listOrderedMap0.values();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put(listOrderedMap0, integer0);
      ListOrderedMap<Object, Integer> listOrderedMap1 = new ListOrderedMap<Object, Integer>(hashMap0);
      listOrderedMap1.toString();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Integer> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Integer>();
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, Integer> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, Object>, Integer>) listOrderedMap2);
      Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Integer>> set0 = (Set<Map.Entry<AbstractMap.SimpleEntry<Object, Object>, Integer>>)listOrderedMap3.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>(hashMap0);
      listOrderedMap0.keySet();
      Object object0 = new Object();
      listOrderedMap0.getOrDefault(hashMap0, "!pxIOmPcJ+@P");
      listOrderedMap0.indexOf(object0);
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap0);
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, String>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, String>>();
      ListOrderedMap<Object, Object> listOrderedMap2 = new ListOrderedMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<Object, Object>) listOrderedMap2);
      ListOrderedMap<Object, Object> listOrderedMap4 = new ListOrderedMap<Object, Object>(listOrderedMap3);
      List<Object> list0 = listOrderedMap4.keyList();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap5 = new ListOrderedMap<Object, Object>(hashMap1);
      listOrderedMap4.map = (Map<Object, Object>) listOrderedMap5;
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Integer, String>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleEntry<Integer, String>>(listOrderedMap1, list0);
      listOrderedMap_EntrySetView0.remove("!pxIOmPcJ+@P");
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, String>, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ListOrderedMap<String, HashMap<String, Object>> listOrderedMap0 = new ListOrderedMap<String, HashMap<String, Object>>();
      ListOrderedMap<String, HashMap<String, Object>> listOrderedMap1 = new ListOrderedMap<String, HashMap<String, Object>>(listOrderedMap0);
      Integer integer0 = new Integer(0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap3 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(listOrderedMap2);
      listOrderedMap3.previousKey((Object) null);
      listOrderedMap1.remove((Object) integer0, (Object) null);
      ListOrderedMap<String, HashMap<String, Object>> listOrderedMap4 = new ListOrderedMap<String, HashMap<String, Object>>(listOrderedMap1);
      ListOrderedMap<String, HashMap<String, Object>> listOrderedMap5 = ListOrderedMap.listOrderedMap((Map<String, HashMap<String, Object>>) listOrderedMap4);
      listOrderedMap5.mapIterator();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>> listOrderedMap6 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>>();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>> listOrderedMap7 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, String>>(listOrderedMap6);
      ListOrderedMap.ListOrderedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, String>> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, String>>(listOrderedMap7, "sI$eGY6h0sM(JJ");
      listOrderedMap_ListOrderedMapEntry0.getValue();
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, String>) listOrderedMap0);
      ListOrderedMap<String, String> listOrderedMap2 = new ListOrderedMap<String, String>(listOrderedMap1);
      ListOrderedMap.ListOrderedMapIterator<String, String> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, String>(listOrderedMap2);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ListOrderedMap<Object, String> listOrderedMap0 = new ListOrderedMap<Object, String>();
      ListOrderedMap.ListOrderedMapIterator<Object, String> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, String>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.hasNext();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, String> listOrderedMap1 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, String>();
      listOrderedMap1.indexOf(listOrderedMap_ListOrderedMapIterator0);
      listOrderedMap1.toString();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>();
      listOrderedMap2.values();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String> listOrderedMap_ListOrderedMapIterator1 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, String>(listOrderedMap2);
      listOrderedMap2.keyList();
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator1.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = new ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.get(334);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 334, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap<String, Integer> listOrderedMap1 = new ListOrderedMap<String, Integer>();
      Integer integer0 = new Integer(1615);
      listOrderedMap1.remove((Object) integer0);
      Integer integer1 = new Integer(3121);
      Map<String, Integer> map0 = null;
      // Undeclared exception!
      try { 
        ListOrderedMap.listOrderedMap((Map<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) listOrderedMap0);
      ListOrderedMap<AbstractMap.SimpleEntry<Integer, Object>, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Integer, Object>, Object>) listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap2.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>();
      LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Integer>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Integer, Integer>>();
      ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Integer, Integer>, Object>(listOrderedMap0, linkedList0);
      listOrderedMap_EntrySetView0.clear();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Integer>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Object, Integer>>();
      ListOrderedMap.ListOrderedMapIterator<Object, AbstractMap.SimpleEntry<Object, Integer>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, AbstractMap.SimpleEntry<Object, Integer>>(listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListOrderedMap<String, HashMap<String, Object>> listOrderedMap0 = new ListOrderedMap<String, HashMap<String, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      listOrderedMap0.put("H", hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, Integer>) hashMap1);
      ListOrderedMap.ListOrderedMapIterator<Integer, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, Integer>(listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ListOrderedMap.KeySetView<AbstractMap.SimpleImmutableEntry<Object, Object>> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<AbstractMap.SimpleImmutableEntry<Object, Object>>((ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, ?>) null);
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      List<String> list0 = listOrderedMap0.keyList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ListOrderedMap<Integer, HashMap<String, String>> listOrderedMap0 = new ListOrderedMap<Integer, HashMap<String, String>>();
      ListOrderedMap.ListOrderedMapIterator<Integer, HashMap<String, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Integer, HashMap<String, String>>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.toString();
      listOrderedMap_ListOrderedMapIterator0.hasNext();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      ListOrderedMap<Integer, String> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Integer, String>) hashMap0);
      listOrderedMap1.nextKey(listOrderedMap0);
      ListOrderedMap<Object, Integer> listOrderedMap2 = new ListOrderedMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap3 = ListOrderedMap.listOrderedMap((Map<Object, Integer>) listOrderedMap2);
      ListOrderedMap<Object, Integer> listOrderedMap4 = new ListOrderedMap<Object, Integer>(listOrderedMap3);
      ListOrderedMap<Object, Integer> listOrderedMap5 = ListOrderedMap.listOrderedMap((Map<Object, Integer>) listOrderedMap4);
      ListOrderedMap<Object, Integer> listOrderedMap6 = new ListOrderedMap<Object, Integer>(listOrderedMap5);
      // Undeclared exception!
      try { 
        listOrderedMap3.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap0.remove(2900);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2900, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ListOrderedMap<String, Object> listOrderedMap0 = new ListOrderedMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, Object>) listOrderedMap0);
      int int0 = 61;
      Integer integer0 = new Integer(61);
      Integer integer1 = new Integer(61);
      // Undeclared exception!
      try { 
        listOrderedMap1.put(61, ">[Jn%GsKJ=5X!Le1", (Object) integer1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 61, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, String>, Object> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, String>, Object>(listOrderedMap0);
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap1 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<String, Object>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<Object, AbstractMap.SimpleEntry<String, Object>>) listOrderedMap1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("org.apache.commons.collections4.keyvalue.AbstractMapEntry", listOrderedMap_ListOrderedMapIterator0);
      // Undeclared exception!
      try { 
        listOrderedMap2.put(21, (Object) listOrderedMap0, abstractMap_SimpleEntry0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 21, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ListOrderedMap<Object, Integer> listOrderedMap0 = new ListOrderedMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap1 = new ListOrderedMap<Object, Integer>(listOrderedMap0);
      ListOrderedMap<Object, Integer> listOrderedMap2 = new ListOrderedMap<Object, Integer>(listOrderedMap1);
      ListOrderedMap<Object, Integer> listOrderedMap3 = new ListOrderedMap<Object, Integer>(listOrderedMap2);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap3);
      AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(listOrderedMap0, listOrderedMap1);
      listOrderedMap2.nextKey(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.add((Integer) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      Integer integer0 = new Integer(61);
      // Undeclared exception!
      try { 
        listOrderedMap0.put((-6699), integer0, "?U2Dp");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6699, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> listOrderedMap0 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(hashMap0);
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleImmutableEntry<String, Integer>>) listOrderedMap0);
      ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<String, Integer>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(listOrderedMap1);
      String string0 = listOrderedMap_ListOrderedMapIterator0.toString();
      assertEquals("Iterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleImmutableEntry<Integer, Object>, Integer>(listOrderedMap0);
      boolean boolean0 = listOrderedMap_ListOrderedMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>();
      ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) hashMap0);
      ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>) listOrderedMap0);
      ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> listOrderedMap2 = new ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(listOrderedMap1);
      ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>> listOrderedMap3 = new ListOrderedMap<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>(listOrderedMap2);
      Set<Map.Entry<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>> set0 = (Set<Map.Entry<HashMap<Object, String>, AbstractMap.SimpleImmutableEntry<Object, String>>>)listOrderedMap3.entrySet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>> listOrderedMap0 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<String, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>> listOrderedMap1 = new ListOrderedMap<String, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ListOrderedMap.listOrderedMap((Map<Object, String>) hashMap0);
      // Undeclared exception!
      try { 
        listOrderedMap1.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ListOrderedMap<Integer, Integer> listOrderedMap0 = new ListOrderedMap<Integer, Integer>();
      ListOrderedMap<Integer, Integer> listOrderedMap1 = new ListOrderedMap<Integer, Integer>(listOrderedMap0);
      ListOrderedMap.listOrderedMap((Map<Integer, Integer>) listOrderedMap1);
      int int0 = (-304);
      // Undeclared exception!
      try { 
        listOrderedMap0.remove((-304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ListOrderedMap<Integer, Object> listOrderedMap0 = null;
      try {
        listOrderedMap0 = new ListOrderedMap<Integer, Object>((Map<Integer, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap1 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(listOrderedMap0);
      listOrderedMap1.map = (Map<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>) listOrderedMap0;
      ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(listOrderedMap1, (List<AbstractMap.SimpleImmutableEntry<Object, Object>>) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      listOrderedMap1.keySet();
      ListOrderedMap<String, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<String, Object>) hashMap0);
      listOrderedMap0.values();
      ListOrderedMap<String, Object> listOrderedMap3 = new ListOrderedMap<String, Object>(listOrderedMap2);
      ListOrderedMap.ListOrderedMapEntry<String, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, Object>(listOrderedMap3, "lpG4(Nm.R<&sigM@fAC");
      listOrderedMap_ListOrderedMapEntry0.getKey();
      listOrderedMap_EntrySetView0.equals("lpG4(Nm.R<&sigM@fAC");
      HashMap<Object, AbstractMap.SimpleEntry<Integer, Object>> hashMap1 = new HashMap<Object, AbstractMap.SimpleEntry<Integer, Object>>();
      ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, Object>> listOrderedMap4 = new ListOrderedMap<Object, AbstractMap.SimpleEntry<Integer, Object>>(hashMap1);
      Integer integer0 = new Integer((-803));
      listOrderedMap4.remove((Object) integer0);
      ListOrderedMap<Object, HashMap<String, String>> listOrderedMap5 = new ListOrderedMap<Object, HashMap<String, String>>();
      ListOrderedMap.ListOrderedMapIterator<Object, HashMap<String, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, HashMap<String, String>>(listOrderedMap5);
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.setValue(hashMap2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>();
      ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap0 = new ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>(hashMap0);
      ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap1 = new ListOrderedMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>(listOrderedMap0);
      ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Integer, String>> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<AbstractMap.SimpleImmutableEntry<Integer, String>>(listOrderedMap1);
      listOrderedMap_ValuesView0.iterator();
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, Object>();
      // Undeclared exception!
      try { 
        listOrderedMap2.firstKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ListOrderedMap<Object, Object> listOrderedMap0 = new ListOrderedMap<Object, Object>();
      ListOrderedMap<Object, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Object, Object>) listOrderedMap0);
      ListOrderedMap.KeySetView<Object> listOrderedMap_KeySetView0 = new ListOrderedMap.KeySetView<Object>(listOrderedMap1);
      listOrderedMap_KeySetView0.size();
      listOrderedMap1.putAll((Map<?, ?>) listOrderedMap0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap2 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap3 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(listOrderedMap2);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap4 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, Object>) listOrderedMap3);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap5 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(listOrderedMap4);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap6 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, Object>) listOrderedMap5);
      // Undeclared exception!
      try { 
        listOrderedMap6.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Object, HashMap<Object, Integer>> hashMap0 = new HashMap<Object, HashMap<Object, Integer>>();
      ListOrderedMap<Object, HashMap<Object, Integer>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, HashMap<Object, Integer>>) hashMap0);
      ListOrderedMap<Object, HashMap<Object, Integer>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<Object, HashMap<Object, Integer>>) listOrderedMap0);
      listOrderedMap1.putAll((Map<?, ? extends HashMap<Object, Integer>>) hashMap0);
      ListOrderedMap.ListOrderedMapIterator<Object, HashMap<Object, Integer>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<Object, HashMap<Object, Integer>>(listOrderedMap1);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap0);
      ListOrderedMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleImmutableEntry<String, Object>, Object>) listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap1.lastKey();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Map is empty
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, HashMap<Integer, Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<String, Object>, HashMap<Integer, Object>>();
      ListOrderedMap<String, Object> listOrderedMap1 = new ListOrderedMap<String, Object>();
      ListOrderedMap.ListOrderedMapEntry<String, Object> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, Object>(listOrderedMap1, "org.apache.commons.collections4.map.ListOrderedMap$KeySetView");
      listOrderedMap_ListOrderedMapEntry0.getValue();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = listOrderedMap0.previousKey((Object) null);
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, Object>>) hashMap0);
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap1 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, Object>>) listOrderedMap0);
      ListOrderedMap.ListOrderedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>> listOrderedMap_ListOrderedMapEntry0 = new ListOrderedMap.ListOrderedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>>(listOrderedMap1, "");
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> listOrderedMap0 = new ListOrderedMap<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>>();
      ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<AbstractMap.SimpleEntry<Object, Object>, HashMap<String, Object>>(listOrderedMap0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ListOrderedMap<String, String> listOrderedMap0 = new ListOrderedMap<String, String>(hashMap0);
      List<String> list0 = listOrderedMap0.valueList();
      ListOrderedMap.ListOrderedIterator<String, String> listOrderedMap_ListOrderedIterator0 = new ListOrderedMap.ListOrderedIterator<String, String>(listOrderedMap0, list0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      HashMap<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>, String>();
      ListOrderedMap.listOrderedMap((Map<AbstractMap.SimpleEntry<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>, String>) hashMap1);
      listOrderedMap_ListOrderedIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      ListOrderedMap<Object, String> listOrderedMap0 = ListOrderedMap.listOrderedMap((Map<Object, String>) hashMap0);
      listOrderedMap0.putAll(0, (Map<?, ? extends String>) hashMap0);
      ListOrderedMap.ValuesView<String> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<String>(listOrderedMap0);
      listOrderedMap0.clear();
      int int0 = 3215;
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.remove(3215);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3215, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, String>> listOrderedMap0 = new ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<Integer, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap0);
      HashMap<ListOrderedMap<Integer, String>, Object> hashMap0 = new HashMap<ListOrderedMap<Integer, String>, Object>();
      ListOrderedMap<ListOrderedMap<Integer, String>, Object> listOrderedMap2 = new ListOrderedMap<ListOrderedMap<Integer, String>, Object>(hashMap0);
      ListOrderedMap<ListOrderedMap<Integer, String>, Object> listOrderedMap3 = new ListOrderedMap<ListOrderedMap<Integer, String>, Object>(listOrderedMap2);
      ListOrderedMap<String, String> listOrderedMap4 = new ListOrderedMap<String, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      ListOrderedMap<Integer, String> listOrderedMap5 = new ListOrderedMap<Integer, String>(hashMap1);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      listOrderedMap3.merge(listOrderedMap5, listOrderedMap4, biFunction0);
      ListOrderedMap<String, String> listOrderedMap6 = new ListOrderedMap<String, String>(listOrderedMap4);
      ListOrderedMap<String, String> listOrderedMap7 = new ListOrderedMap<String, String>(listOrderedMap6);
      ListOrderedMap<Integer, String> listOrderedMap8 = listOrderedMap3.nextKey(listOrderedMap7);
      assertNull(listOrderedMap8);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ListOrderedMap<HashMap<String, String>, Integer> listOrderedMap0 = new ListOrderedMap<HashMap<String, String>, Integer>();
      ListOrderedMap.ListOrderedMapIterator<HashMap<String, String>, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<HashMap<String, String>, Integer>(listOrderedMap0);
      listOrderedMap_ListOrderedMapIterator0.toString();
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap$ListOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> listOrderedMap0 = new ListOrderedMap<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>();
      ListOrderedMap<String, Object> listOrderedMap1 = new ListOrderedMap<String, Object>();
      ListOrderedMap<String, Object> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<String, Object>) listOrderedMap1);
      List<Object> list0 = listOrderedMap2.valueList();
      ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>> listOrderedMap_EntrySetView0 = new ListOrderedMap.EntrySetView<Object, AbstractMap.SimpleImmutableEntry<Object, Integer>>(listOrderedMap0, list0);
      listOrderedMap_EntrySetView0.equals(listOrderedMap2);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(625);
      ListOrderedMap<String, Integer> listOrderedMap3 = new ListOrderedMap<String, Integer>(hashMap0);
      ListOrderedMap.ListOrderedMapIterator<String, Integer> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, Integer>(listOrderedMap3);
      // Undeclared exception!
      try { 
        listOrderedMap_ListOrderedMapIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ListOrderedMap<Integer, String> listOrderedMap0 = new ListOrderedMap<Integer, String>();
      Integer integer0 = new Integer(35);
      // Undeclared exception!
      try { 
        listOrderedMap0.put((-6658), integer0, "?U)Dp");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -6658, Size: 0
         //
         verifyException("org.apache.commons.collections4.map.ListOrderedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ListOrderedMap<Object, HashMap<String, String>> listOrderedMap0 = new ListOrderedMap<Object, HashMap<String, String>>();
      listOrderedMap0.toString();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap1 = new ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>>();
      ListOrderedMap<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap2 = ListOrderedMap.listOrderedMap((Map<String, AbstractMap.SimpleEntry<Object, String>>) listOrderedMap1);
      ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>> listOrderedMap_ListOrderedMapIterator0 = new ListOrderedMap.ListOrderedMapIterator<String, AbstractMap.SimpleEntry<Object, String>>(listOrderedMap2);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      listOrderedMap_ListOrderedMapIterator0.forEachRemaining(consumer0);
      listOrderedMap_ListOrderedMapIterator0.hasNext();
      ListOrderedMap<Integer, String> listOrderedMap3 = new ListOrderedMap<Integer, String>();
      listOrderedMap3.remove((Object) "{}");
      ListOrderedMap<Integer, Object> listOrderedMap4 = new ListOrderedMap<Integer, Object>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      ListOrderedMap<Object, Integer> listOrderedMap5 = ListOrderedMap.listOrderedMap((Map<Object, Integer>) hashMap0);
      ListOrderedMap.ValuesView<Integer> listOrderedMap_ValuesView0 = new ListOrderedMap.ValuesView<Integer>(listOrderedMap5);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        listOrderedMap_ValuesView0.add(integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
}
