/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:18:58 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectOutputStream;
import java.util.Map;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.ReferenceMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ReferenceMap_ESTest extends ReferenceMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      int int0 = 1073741824;
      ReferenceMap<String, Map.Entry<String, String>> referenceMap0 = new ReferenceMap<String, Map.Entry<String, String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, String> referenceMap0 = new ReferenceMap<Object, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1, 1, true);
      referenceMap0.isEqualKey(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      ReferenceMap<String, Integer> referenceMap1 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      int int0 = 1073741824;
      ReferenceMap<String, Integer> referenceMap2 = new ReferenceMap<String, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1073741824, 2079.8345F, true);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = 143;
      ReferenceMap<String, Object> referenceMap0 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 143, 143);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      int int1 = (-447);
      boolean boolean0 = false;
      ReferenceMap<String, String> referenceMap1 = null;
      try {
        referenceMap1 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, (-447), 1.0F, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, String> referenceMap0 = new ReferenceMap<Integer, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      referenceMap0.loadFactor = (-2599.7F);
      referenceMap0.ensureCapacity(1);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Object, Object> referenceMap1 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength2, 16, 16);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, String> referenceMap2 = null;
      try {
        referenceMap2 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength3, 0, (-2512.51F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Integer> referenceMap0 = new ReferenceMap<Object, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, String> referenceMap0 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      ReferenceMap<String, String> referenceMap1 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 362, 362, false);
      assertTrue(referenceMap1.equals((Object)referenceMap0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReferenceMap<String, Integer> referenceMap0 = new ReferenceMap<String, Integer>();
      ReferenceMap<Integer, String> referenceMap1 = new ReferenceMap<Integer, String>();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceMap<Object, Object> referenceMap0 = new ReferenceMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 3329, 3329);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<Map.Entry<Integer, Object>, Map.Entry<Integer, Object>> referenceMap0 = new ReferenceMap<Map.Entry<Integer, Object>, Map.Entry<Integer, Object>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ReferenceMap<Object, Integer> referenceMap0 = new ReferenceMap<Object, Integer>();
      referenceMap0.createKeySetIterator();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<String, Object> referenceMap1 = new ReferenceMap<String, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Object, Integer> referenceMap2 = new ReferenceMap<Object, Integer>(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength2, true);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength4 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceMap<Integer, Object> referenceMap3 = new ReferenceMap<Integer, Object>(abstractReferenceMap_ReferenceStrength3, abstractReferenceMap_ReferenceStrength4, true);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength5 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceMap<String, String> referenceMap4 = new ReferenceMap<String, String>(abstractReferenceMap_ReferenceStrength5, abstractReferenceMap_ReferenceStrength0, 243, 243, false);
      ReferenceMap<String, Object> referenceMap5 = null;
      try {
        referenceMap5 = new ReferenceMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 0, 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }
}
