/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:04:40 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.ref.PhantomReference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.Enumeration;
import java.util.function.BiConsumer;
import org.apache.commons.collections4.map.AbstractHashedMap;
import org.apache.commons.collections4.map.AbstractReferenceMap;
import org.apache.commons.collections4.map.ReferenceIdentityMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ReferenceIdentityMap_ESTest extends ReferenceIdentityMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<String, Object> referenceIdentityMap0 = new ReferenceIdentityMap<String, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, false);
      Object object0 = null;
      referenceIdentityMap0.keySet();
      Object object1 = null;
      // Undeclared exception!
      try { 
        referenceIdentityMap0.isEqualKey((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.ReferenceIdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReferenceIdentityMap<DataInputStream, DataInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<DataInputStream, DataInputStream>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<String, Integer> referenceIdentityMap1 = new ReferenceIdentityMap<String, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      referenceIdentityMap1.hashEntry((Object) null, (Object) null);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Object, String> referenceIdentityMap2 = null;
      try {
        referenceIdentityMap2 = new ReferenceIdentityMap<Object, String>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength3, 861, 0.0F, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<InputStream, PhantomReference<InputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, PhantomReference<InputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, true);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<InputStream, Integer> referenceIdentityMap1 = new ReferenceIdentityMap<InputStream, Integer>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength2, 0, 1099.9F);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<String, SoftReference<Object>> referenceIdentityMap2 = new ReferenceIdentityMap<String, SoftReference<Object>>(abstractReferenceMap_ReferenceStrength3, abstractReferenceMap_ReferenceStrength0, true);
      referenceIdentityMap2.get(abstractReferenceMap_ReferenceStrength2);
      referenceIdentityMap1.hash((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<String, InputStream> referenceIdentityMap0 = new ReferenceIdentityMap<String, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 1073741824, 1073741824);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, DataInputStream> referenceIdentityMap1 = new ReferenceIdentityMap<Integer, DataInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      referenceIdentityMap1.hash(referenceIdentityMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<DataInputStream, Object> referenceIdentityMap0 = new ReferenceIdentityMap<DataInputStream, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, true);
      referenceIdentityMap0.isEqualValue(abstractReferenceMap_ReferenceStrength0, "null keys not allowed");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReferenceIdentityMap<InputStream, Object> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, Object>();
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      int int0 = 72;
      ReferenceIdentityMap<Object, InputStream> referenceIdentityMap1 = null;
      try {
        referenceIdentityMap1 = new ReferenceIdentityMap<Object, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 72, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, String> referenceIdentityMap0 = new ReferenceIdentityMap<String, String>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      Object object0 = AbstractHashedMap.NULL;
      referenceIdentityMap0.hashEntry(object0, "Fhn{@)8<O2_6XUdZ");
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, DataInputStream> referenceIdentityMap1 = null;
      try {
        referenceIdentityMap1 = new ReferenceIdentityMap<String, DataInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, (-909), (-3191.031F), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Initial capacity must be a non negative number
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<Object, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Object, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, false);
      referenceIdentityMap0.hashEntry("", abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PhantomReference<Integer>, SoftReference<String>> referenceIdentityMap0 = new ReferenceIdentityMap<PhantomReference<Integer>, SoftReference<String>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      referenceIdentityMap0.isEqualKey((Object) null, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.HARD;
      int int0 = 0;
      ReferenceIdentityMap<String, Object> referenceIdentityMap1 = null;
      try {
        referenceIdentityMap1 = new ReferenceIdentityMap<String, Object>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength1, 0, 0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<InputStream, Object> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 16, 16);
      referenceIdentityMap0.hashEntry(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<Integer, DataInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, DataInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, 9, 9, false);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<SoftReference<String>, Object> referenceIdentityMap0 = new ReferenceIdentityMap<SoftReference<String>, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ReferenceIdentityMap<InputStream, Object> referenceIdentityMap0 = new ReferenceIdentityMap<InputStream, Object>();
      assertNotNull(referenceIdentityMap0);
      
      boolean boolean0 = referenceIdentityMap0.isEqualValue((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ReferenceIdentityMap<SoftReference<InputStream>, DataInputStream> referenceIdentityMap0 = new ReferenceIdentityMap<SoftReference<InputStream>, DataInputStream>();
      assertNotNull(referenceIdentityMap0);
      
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.SOFT;
      ReferenceIdentityMap<PhantomReference<InputStream>, DataInputStream> referenceIdentityMap1 = new ReferenceIdentityMap<PhantomReference<InputStream>, DataInputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, false);
      assertNotNull(referenceIdentityMap1);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      
      ReferenceIdentityMap<Integer, PhantomReference<String>> referenceIdentityMap2 = new ReferenceIdentityMap<Integer, PhantomReference<String>>();
      assertNotNull(referenceIdentityMap2);
      
      Object object0 = referenceIdentityMap2.remove((Object) referenceIdentityMap1);
      assertNull(object0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      
      // Undeclared exception!
      try { 
        referenceIdentityMap1.isEqualKey((Object) null, abstractReferenceMap_ReferenceStrength1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.map.AbstractReferenceMap$ReferenceStrength cannot be cast to java.lang.ref.Reference
         //
         verifyException("org.apache.commons.collections4.map.ReferenceIdentityMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<String, WeakReference<InputStream>> referenceIdentityMap0 = new ReferenceIdentityMap<String, WeakReference<InputStream>>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1, 1727, 1727);
      assertNotNull(referenceIdentityMap0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      
      boolean boolean0 = referenceIdentityMap0.isEqualValue(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertTrue(boolean0);
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      
      ReferenceIdentityMap<Integer, InputStream> referenceIdentityMap1 = new ReferenceIdentityMap<Integer, InputStream>();
      assertNotNull(referenceIdentityMap1);
      
      boolean boolean1 = referenceIdentityMap1.isEqualKey("org.apache.commons.collections4.map.AbstractReferenceMap$WeakRef", referenceIdentityMap0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      
      referenceIdentityMap1.purge();
      boolean boolean2 = referenceIdentityMap1.isEqualValue(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength2 = AbstractReferenceMap.ReferenceStrength.SOFT;
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength3 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<DataInputStream, Integer> referenceIdentityMap2 = null;
      try {
        referenceIdentityMap2 = new ReferenceIdentityMap<DataInputStream, Integer>(abstractReferenceMap_ReferenceStrength2, abstractReferenceMap_ReferenceStrength3, 0, 0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Load factor must be greater than 0
         //
         verifyException("org.apache.commons.collections4.map.AbstractHashedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ReferenceIdentityMap<String, Object> referenceIdentityMap0 = new ReferenceIdentityMap<String, Object>();
      assertNotNull(referenceIdentityMap0);
      
      ReferenceIdentityMap<String, InputStream> referenceIdentityMap1 = new ReferenceIdentityMap<String, InputStream>();
      assertNotNull(referenceIdentityMap1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = referenceIdentityMap1.isEqualKey(referenceIdentityMap0, bufferedInputStream0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.SOFT;
      Integer integer0 = new Integer((-1405));
      assertNotNull(integer0);
      assertEquals((-1405), (int)integer0);
      
      ReferenceIdentityMap<Integer, Object> referenceIdentityMap2 = new ReferenceIdentityMap<Integer, Object>();
      assertNotNull(referenceIdentityMap2);
      
      boolean boolean1 = referenceIdentityMap2.isEqualKey("", (Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<WeakReference<String>, InputStream> referenceIdentityMap3 = new ReferenceIdentityMap<WeakReference<String>, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotNull(referenceIdentityMap3);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      
      int int0 = referenceIdentityMap3.hashEntry((Object) null, (Object) null);
      assertFalse(abstractReferenceMap_ReferenceStrength0.equals((Object)abstractReferenceMap_ReferenceStrength1));
      assertFalse(abstractReferenceMap_ReferenceStrength1.equals((Object)abstractReferenceMap_ReferenceStrength0));
      assertEquals(0, int0);
      assertNotSame(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength1);
      assertNotSame(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0);
      
      Object object1 = AbstractHashedMap.NULL;
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      assertNotSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Integer, Object> referenceIdentityMap0 = new ReferenceIdentityMap<Integer, Object>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      referenceIdentityMap0.forEach(biConsumer0);
      referenceIdentityMap0.ensureCapacity((-970));
      referenceIdentityMap0.isEqualKey(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength1 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<SoftReference<String>, Integer> referenceIdentityMap1 = new ReferenceIdentityMap<SoftReference<String>, Integer>(abstractReferenceMap_ReferenceStrength1, abstractReferenceMap_ReferenceStrength0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 572;
      Integer integer0 = new Integer(572);
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      referenceQueue0.remove((long) 572);
      PhantomReference<Integer> phantomReference0 = new PhantomReference<Integer>(integer0, referenceQueue0);
      referenceIdentityMap1.purge(phantomReference0);
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.WEAK;
      ReferenceIdentityMap<String, InputStream> referenceIdentityMap0 = new ReferenceIdentityMap<String, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0, false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AbstractReferenceMap.ReferenceStrength abstractReferenceMap_ReferenceStrength0 = AbstractReferenceMap.ReferenceStrength.HARD;
      ReferenceIdentityMap<Object, InputStream> referenceIdentityMap0 = new ReferenceIdentityMap<Object, InputStream>(abstractReferenceMap_ReferenceStrength0, abstractReferenceMap_ReferenceStrength0);
  }
}
