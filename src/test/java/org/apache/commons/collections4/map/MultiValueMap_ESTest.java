/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:39:13 GMT 2019
 */

package org.apache.commons.collections4.map;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.map.MultiValueMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class MultiValueMap_ESTest extends MultiValueMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<Object, String>, ArrayList<String>>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, Collection<ArrayList<Integer>>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<Collection<ArrayList<Integer>>>>) multiValueMap0);
      multiValueMap0.createCollection(1512);
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<String>>) multiValueMap1);
      multiValueMap2.iterator((Object) multiValueMap0);
      MultiValueMap<LinkedList<Object>, Object> multiValueMap3 = new MultiValueMap<LinkedList<Object>, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      multiValueMap3.computeIfAbsent(linkedList0, unaryOperator0);
      MultiValueMap<LinkedList<Object>, Integer> multiValueMap4 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Integer>>) multiValueMap3);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.iterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      arrayList0.add((Integer) null);
      multiValueMap4.putAll(linkedList1, (Collection<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValueMap<LinkedList<String>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<String>, Integer>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<LinkedList<String>, Object> multiValueMap1 = new MultiValueMap<LinkedList<String>, Object>((Map<LinkedList<String>, ? super LinkedList<Object>>) multiValueMap0, factory0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.merge(linkedList1, factory0, biFunction0);
      MultiValueMap<String, ArrayList<Object>> multiValueMap2 = new MultiValueMap<String, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      linkedList0.add((Object) arrayList0);
      Integer integer0 = new Integer(0);
      Object object0 = multiValueMap2.getOrDefault("org.apache.commons.collections4.map.MultiValueMap", integer0);
      multiValueMap1.removeMapping(object0, multiValueMap2);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      multiValueMap1.size((Object) arrayList1);
      MultiValueMap<Object, Object> multiValueMap3 = new MultiValueMap<Object, Object>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Factory<LinkedList<String>> factory1 = ConstantFactory.constantFactory(linkedList2);
      MultiValueMap<Object, String> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<String>>) multiValueMap3, factory1);
      assertTrue(multiValueMap4.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiValueMap<Object, ArrayList<Object>> multiValueMap0 = new MultiValueMap<Object, ArrayList<Object>>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      multiValueMap0.putAll((Map<?, ?>) hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.computeIfPresent(hashMap0, biFunction0);
      multiValueMap0.clear();
      multiValueMap0.iterator();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>> multiValueMap1 = new MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, AbstractMap.SimpleEntry<String, String>>();
      MultiValueMap<AbstractMap.SimpleImmutableEntry<String, String>, LinkedList<Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<String, String>, ? super Collection<LinkedList<Integer>>>) multiValueMap1);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>(abstractMap_SimpleImmutableEntry0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      multiValueMap2.put(abstractMap_SimpleImmutableEntry1, arrayList0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<String, String>("", "");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      MultiValueMap multiValueMap3 = (MultiValueMap)multiValueMap2.put(abstractMap_SimpleImmutableEntry2, multiValueMap1);
      assertEquals(1, multiValueMap3.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      Map<ArrayList<String>, Object> map0 = multiValueMap0.map;
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) map0);
      multiValueMap0.totalSize();
      Integer integer0 = new Integer(1);
      multiValueMap1.size((Object) integer0);
      ArrayList<String> arrayList0 = new ArrayList<String>(1816);
      arrayList0.add("Y");
      multiValueMap1.put(arrayList0, map0);
      MultiValueMap<ArrayList<Object>, ArrayList<Object>> multiValueMap2 = new MultiValueMap<ArrayList<Object>, ArrayList<Object>>();
      // Undeclared exception!
      try { 
        multiValueMap2.getCollection(multiValueMap0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValueMap<Collection<String>, String> multiValueMap0 = new MultiValueMap<Collection<String>, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multiValueMap0).when(biFunction0).apply(any() , any());
      multiValueMap0.compute(linkedList0, biFunction0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.listIterator();
      multiValueMap0.put(arrayList0, arrayList0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "org.apache.commons.collections4.FunctorException";
      hashMap0.put("org.apache.commons.collections4.FunctorException", linkedList0);
      MultiValueMap<String, LinkedList<Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<Collection>>>) hashMap0);
      MultiValueMap<String, ArrayList<String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ArrayList<String>>>) multiValueMap1);
      multiValueMap2.values();
      Map<AbstractMap.SimpleEntry<Object, Object>, Object> map0 = null;
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Object>, ? super Collection<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValueMap<LinkedList<Integer>, Integer> multiValueMap0 = new MultiValueMap<LinkedList<Integer>, Integer>();
      MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>> multiValueMap1 = new MultiValueMap<Integer, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap1.iterator();
      Iterator<Map.Entry<Integer, AbstractMap.SimpleEntry<String, Object>>> iterator0 = (Iterator<Map.Entry<Integer, AbstractMap.SimpleEntry<String, Object>>>)multiValueMap1.iterator();
      multiValueMap1.getOrDefault(iterator0, "Class to instantiate must not be null");
      Integer integer0 = new Integer(0);
      ArrayList<AbstractMap.SimpleEntry<String, Object>> arrayList0 = new ArrayList<AbstractMap.SimpleEntry<String, Object>>();
      ListIterator<AbstractMap.SimpleEntry<String, Object>> listIterator0 = arrayList0.listIterator();
      multiValueMap1.putAll(integer0, (Collection<AbstractMap.SimpleEntry<String, Object>>) arrayList0);
      MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> multiValueMap2 = new MultiValueMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      multiValueMap0.clear();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(listIterator0).when(biFunction0).apply(any() , any());
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap2.replaceAll(biFunction1);
      multiValueMap2.compute(arrayList0, biFunction0);
      multiValueMap2.removeMapping(arrayList0, "mRbCZp8+QeU{xI8");
      MultiValueMap<ArrayList<Object>, LinkedList<Integer>> multiValueMap3 = new MultiValueMap<ArrayList<Object>, LinkedList<Integer>>();
      multiValueMap3.totalSize();
      arrayList0.add((AbstractMap.SimpleEntry<String, Object>) null);
      MultiValueMap<ArrayList<Object>, LinkedList<String>> multiValueMap4 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<LinkedList<String>>>) multiValueMap3);
      multiValueMap4.map = (Map<ArrayList<Object>, Object>) multiValueMap3;
      multiValueMap4.size((Object) listIterator0);
      multiValueMap0.entrySet();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Factory<LinkedList<Object>> factory0 = ConstantFactory.constantFactory(linkedList0);
      MultiValueMap<Object, Object> multiValueMap5 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<Object>>) multiValueMap2, factory0);
      // Undeclared exception!
      try { 
        multiValueMap5.totalSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap$ValuesIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValueMap<ArrayList<String>, Collection<String>> multiValueMap0 = new MultiValueMap<ArrayList<String>, Collection<String>>();
      multiValueMap0.values();
      Collection<Object> collection0 = multiValueMap0.values();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.retainAll(collection0);
      arrayList0.parallelStream();
      multiValueMap0.replace(arrayList0, (Object) arrayList0);
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<? extends ArrayList<String>, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.map.MultiValueMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      ConstantFactory<LinkedList<LinkedList<String>>> constantFactory0 = new ConstantFactory<LinkedList<LinkedList<String>>>((LinkedList<LinkedList<String>>) null);
      MultiValueMap<Object, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Object, ? super LinkedList<LinkedList<String>>>) multiValueMap0, (Factory<LinkedList<LinkedList<String>>>) constantFactory0);
      multiValueMap1.createCollection(0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, Integer>, ? super Collection<AbstractMap.SimpleEntry<Integer, Collection>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<String>>) multiValueMap0);
      multiValueMap1.iterator((Object) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = "WW.m?l%DV";
      arrayList0.add("WW.m?l%DV");
      multiValueMap1.putAll(arrayList0, (Collection<String>) arrayList0);
      multiValueMap1.totalSize();
      MultiValueMap<String, LinkedList<String>> multiValueMap2 = new MultiValueMap<String, LinkedList<String>>();
      MultiValueMap.multiValueMap((Map<String, ? super Collection<Object>>) multiValueMap2);
      LinkedList<AbstractMap.SimpleEntry<Integer, String>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, String>>();
      ConstantFactory<Collection<AbstractMap.SimpleEntry<Integer, String>>> constantFactory0 = new ConstantFactory<Collection<AbstractMap.SimpleEntry<Integer, String>>>(linkedList0);
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Integer, String>>>) null, (Factory<Collection<AbstractMap.SimpleEntry<Integer, String>>>) constantFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<String, Object>>();
      multiValueMap0.containsValue((Object) null);
      MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);
      multiValueMap0.map = (Map<String, Object>) multiValueMap1;
      // Undeclared exception!
      try { 
        multiValueMap0.iterator();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<Object, AbstractMap.SimpleEntry>> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<HashMap<Object, AbstractMap.SimpleEntry>>>) hashMap0);
      hashMap0.clear();
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, HashMap<AbstractMap.SimpleImmutableEntry, Collection>> multiValueMap1 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<HashMap<AbstractMap.SimpleImmutableEntry, Collection>>>) multiValueMap0);
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      hashMap0.put(abstractMap_SimpleEntry0, multiValueMap1);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Integer> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Integer>>) multiValueMap1);
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Integer, Object>, ? super Collection<Object>>) multiValueMap2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        multiValueMap3.containsValue((Object) hashMap0, object0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2349;
      HashMap<ArrayList<String>, Object> hashMap0 = new HashMap<ArrayList<String>, Object>(2349, 2349);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      hashMap0.put(arrayList0, arrayList0);
      Factory<LinkedList<Integer>> factory0 = ExceptionFactory.exceptionFactory();
      MultiValueMap<ArrayList<String>, Integer> multiValueMap0 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super LinkedList<Integer>>) hashMap0, factory0);
      // Undeclared exception!
      try { 
        multiValueMap0.createCollection(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer> multiValueMap0 = new MultiValueMap<AbstractMap.SimpleEntry<String, Integer>, Integer>();
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.replaceAll(biFunction0);
      Collection<Integer> collection0 = multiValueMap0.createCollection((-2361));
      MultiValueMap<String, Object> multiValueMap1 = new MultiValueMap<String, Object>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "");
      hashMap0.keySet();
      multiValueMap1.put("", collection0);
      multiValueMap1.putAll((Map<? extends String, ?>) hashMap0);
      BiFunction<String, Object, Object> biFunction1 = (BiFunction<String, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(anyString() , any());
      multiValueMap1.computeIfPresent("", biFunction1);
      multiValueMap1.createCollection((-2361));
      MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object> multiValueMap2 = new MultiValueMap<AbstractMap.SimpleEntry<Integer, Object>, Object>();
      MultiValueMap<HashMap<String, String>, Collection<Integer>> multiValueMap3 = new MultiValueMap<HashMap<String, String>, Collection<Integer>>();
      int int0 = multiValueMap3.totalSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<ArrayList<Object>, Collection<String>> multiValueMap1 = new MultiValueMap<ArrayList<Object>, Collection<String>>();
      Map<ArrayList<Object>, Object> map0 = multiValueMap1.map;
      MultiValueMap<ArrayList<Object>, HashMap<ArrayList<Object>, String>> multiValueMap2 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<HashMap<ArrayList<Object>, String>>>) map0);
      MultiValueMap<ArrayList<Object>, Object> multiValueMap3 = MultiValueMap.multiValueMap((Map<ArrayList<Object>, ? super Collection<Object>>) multiValueMap2);
      multiValueMap2.totalSize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      ArrayList<Object> arrayList2 = new ArrayList<Object>();
      arrayList1.add((Object) arrayList2);
      multiValueMap0.remove((Object) arrayList0, (Object) arrayList1);
      ArrayList<Object> arrayList3 = new ArrayList<Object>();
      multiValueMap3.put(arrayList3, (Object) null);
      Map<LinkedList<Integer>, Object> map1 = null;
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<LinkedList<Integer>, ? super LinkedList<ArrayList<Object>>>) null, (Factory<LinkedList<ArrayList<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValueMap<ArrayList<Object>, String> multiValueMap0 = new MultiValueMap<ArrayList<Object>, String>();
      Set<Map.Entry<ArrayList<Object>, Object>> set0 = (Set<Map.Entry<ArrayList<Object>, Object>>)multiValueMap0.entrySet();
      MultiValueMap<Object, ArrayList<Object>> multiValueMap1 = new MultiValueMap<Object, ArrayList<Object>>();
      ArrayList<Object> arrayList0 = new ArrayList<Object>(set0);
      Integer integer0 = new Integer((-2369));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , any());
      Object object0 = multiValueMap0.compute(arrayList0, biFunction0);
      multiValueMap0.totalSize();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      arrayList1.stream();
      arrayList1.add((Object) arrayList0);
      multiValueMap1.removeMapping(set0, arrayList1);
      Map<Object, Object> map0 = multiValueMap1.map;
      MultiValueMap<Object, AbstractMap.SimpleEntry<Object, Integer>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<AbstractMap.SimpleEntry<Object, Integer>>>) map0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      multiValueMap2.putAll((Object) arrayList2, (Collection<AbstractMap.SimpleEntry<Object, Integer>>) null);
      multiValueMap2.totalSize();
      MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap3 = new MultiValueMap<ArrayList<String>, AbstractMap.SimpleEntry<Integer, Object>>();
      LinkedList<AbstractMap.SimpleEntry<Integer, Object>> linkedList0 = new LinkedList<AbstractMap.SimpleEntry<Integer, Object>>();
      multiValueMap3.putAll(arrayList2, (Collection<AbstractMap.SimpleEntry<Integer, Object>>) linkedList0);
      multiValueMap3.getCollection(multiValueMap0);
      MultiValueMap<Object, HashMap<Object, Object>> multiValueMap4 = MultiValueMap.multiValueMap((Map<Object, ? super Collection<HashMap<Object, Object>>>) multiValueMap2);
      multiValueMap4.iterator(object0);
      MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Integer>> multiValueMap5 = new MultiValueMap<AbstractMap.SimpleEntry<Object, Object>, LinkedList<Integer>>();
      assertTrue(multiValueMap5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValueMap<ArrayList<String>, String> multiValueMap0 = new MultiValueMap<ArrayList<String>, String>();
      MultiValueMap<ArrayList<String>, Object> multiValueMap1 = MultiValueMap.multiValueMap((Map<ArrayList<String>, ? super Collection<Object>>) multiValueMap0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      multiValueMap1.putIfAbsent(arrayList0, arrayList1);
      multiValueMap1.putAll((Map<? extends ArrayList<String>, ?>) multiValueMap0);
      assertEquals(1, multiValueMap1.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValueMap<Collection<Object>, Collection<Object>> multiValueMap0 = new MultiValueMap<Collection<Object>, Collection<Object>>();
      multiValueMap0.entrySet();
      MultiValueMap<Object, String> multiValueMap1 = new MultiValueMap<Object, String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Collection<Object>[] collectionArray0 = (Collection<Object>[]) Array.newInstance(Collection.class, 8);
      HashMap<AbstractMap.SimpleEntry<Object, String>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, String>, Object>();
      MultiValueMap<AbstractMap.SimpleEntry<Object, String>, String> multiValueMap2 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleEntry<Object, String>, ? super Collection<String>>) hashMap0);
      Collection<Object> collection0 = multiValueMap2.values();
      collectionArray0[0] = collection0;
      Collection<Object> collection1 = multiValueMap2.values();
      collectionArray0[1] = collection1;
      Collection<Object> collection2 = multiValueMap2.values();
      collectionArray0[2] = collection2;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      collectionArray0[3] = (Collection<Object>) arrayList0;
      ArrayList<Object> arrayList1 = new ArrayList<Object>(collection0);
      collectionArray0[4] = (Collection<Object>) arrayList1;
      Collection<Object> collection3 = multiValueMap2.values();
      collectionArray0[5] = collection3;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      collectionArray0[6] = (Collection<Object>) linkedList1;
      Collection<Object> collection4 = multiValueMap2.values();
      collectionArray0[7] = collection4;
      linkedList0.toArray(collectionArray0);
      LinkedList<String> linkedList2 = new LinkedList<String>(linkedList0);
      multiValueMap1.putAll((Object) multiValueMap0, (Collection<String>) linkedList2);
      Collection<Object> collection5 = multiValueMap1.values();
      assertFalse(collection5.equals((Object)collection1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = new MultiValueMap<LinkedList<Object>, Object>();
      int int0 = 512;
      multiValueMap0.createCollection(512);
      multiValueMap0.iterator();
      HashMap<LinkedList<String>, Object> hashMap0 = new HashMap<LinkedList<String>, Object>();
      MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) hashMap0);
      LinkedList<String> linkedList0 = null;
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList1.clone();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(linkedList1);
      multiValueMap1.putAll((LinkedList<String>) null, (Collection<Integer>) arrayList0);
      multiValueMap1.clear();
      MultiValueMap<LinkedList<Object>, Collection<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Collection<Object>>>) multiValueMap0);
      multiValueMap2.values();
      Factory<LinkedList<LinkedList<Integer>>> factory0 = ExceptionFactory.exceptionFactory();
      // Undeclared exception!
      try { 
        MultiValueMap.multiValueMap((Map<Integer, ? super LinkedList<LinkedList<Integer>>>) null, factory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.map.AbstractMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValueMap<Object, Object> multiValueMap0 = new MultiValueMap<Object, Object>();
      MultiValueMap<Object, Object> multiValueMap1 = new MultiValueMap<Object, Object>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      multiValueMap0.replaceAll(biFunction0);
      multiValueMap0.map = (Map<Object, Object>) multiValueMap1;
      multiValueMap0.mapIterator();
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer((-1));
      arrayList0.add(integer0);
      multiValueMap1.putIfAbsent(multiValueMap0, arrayList0);
      int int0 = (-3399);
      multiValueMap0.createCollection((-3399));
      // Undeclared exception!
      try { 
        multiValueMap0.putAll((Map<?, ?>) multiValueMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
