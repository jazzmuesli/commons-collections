/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:21:11 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.MultiSetUtils;
import org.apache.commons.collections4.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiSetUtils_ESTest extends MultiSetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MultiSet<String> multiSet0 = MultiSetUtils.emptyMultiSet();
      MultiSet<String> multiSet1 = MultiSetUtils.synchronizedMultiSet(multiSet0);
      assertTrue(multiSet1.equals((Object)multiSet0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiSetUtils.unmodifiableMultiSet((MultiSet<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiSetUtils.predicatedMultiSet((MultiSet<String>) null, (Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MultiSet<String> multiSet0 = MultiSetUtils.emptyMultiSet();
      MultiSet<String> multiSet1 = MultiSetUtils.unmodifiableMultiSet((MultiSet<? extends String>) multiSet0);
      assertSame(multiSet0, multiSet1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MultiSet<String> multiSet0 = MultiSetUtils.emptyMultiSet();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      MultiSet<String> multiSet1 = MultiSetUtils.predicatedMultiSet(multiSet0, (Predicate<? super String>) predicate0);
      assertTrue(multiSet1.equals((Object)multiSet0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        MultiSetUtils.synchronizedMultiSet((MultiSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.SynchronizedCollection", e);
      }
  }
}
