/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:48:01 GMT 2019
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CollectionBag_ESTest extends CollectionBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = collectionBag0.remove((Object) integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0, instanceofPredicate0);
      treeBag0.add((Object) class0);
      treeBag0.add((Object) synchronizedBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(synchronizedBag0);
      // Undeclared exception!
      try { 
        collectionBag0.removeAll(synchronizedBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) treeBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(bag0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        collectionBag0.remove(object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(hashBag0);
      CollectionBag<Integer> collectionBag0 = new CollectionBag<Integer>(treeBag0);
      // Undeclared exception!
      try { 
        collectionBag0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      TreeBag<Object> treeBag0 = new TreeBag<Object>(hashBag0);
      TreeBag<String> treeBag1 = new TreeBag<String>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      PredicatedSortedBag<String> predicatedSortedBag0 = new PredicatedSortedBag<String>(treeBag1, predicate0);
      CollectionBag<String> collectionBag0 = new CollectionBag<String>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionBag0.remove((Object) treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      TreeBag<Object> treeBag0 = new TreeBag<Object>(hashBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) collectionSortedBag0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionBag0.remove((Object) hashBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionBag.collectionBag((Bag<LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1734), (-1), (-1734), (-1), (-1)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      collectionBag0.add(object0);
      // Undeclared exception!
      try { 
        collectionBag0.addAll(treeBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>();
      SortedBag<Boolean> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Boolean>) treeBag0);
      CollectionBag<Boolean> collectionBag0 = new CollectionBag<Boolean>(sortedBag0);
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.apache.commons.collections4.functors.InstanceofPredicate.class) , any(org.apache.commons.collections4.functors.InstanceofPredicate.class));
      Predicate<InstanceofPredicate> predicate0 = ComparatorPredicate.comparatorPredicate(instanceofPredicate0, comparator0);
      PredicateTransformer<InstanceofPredicate> predicateTransformer0 = new PredicateTransformer<InstanceofPredicate>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(instanceofPredicate0);
      // Undeclared exception!
      try { 
        collectionBag0.add(boolean0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0);
      PredicatedSortedBag<InstanceofPredicate> predicatedSortedBag0 = new PredicatedSortedBag<InstanceofPredicate>(treeBag0, predicate0);
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(predicatedSortedBag0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        collectionBag0.add(instanceofPredicate0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.InstanceofPredicate@6' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionBag0.add((Object) instanceofPredicate0, 5504);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<LinkedList<Transformer<String, String>>> treeBag0 = new TreeBag<LinkedList<Transformer<String, String>>>();
      SynchronizedSortedBag<LinkedList<Transformer<String, String>>> synchronizedSortedBag0 = new SynchronizedSortedBag<LinkedList<Transformer<String, String>>>(treeBag0);
      CollectionBag<LinkedList<Transformer<String, String>>> collectionBag0 = new CollectionBag<LinkedList<Transformer<String, String>>>(synchronizedSortedBag0);
      LinkedList<Transformer<String, String>> linkedList0 = new LinkedList<Transformer<String, String>>();
      // Undeclared exception!
      try { 
        collectionBag0.add(linkedList0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Transformer<Object, Object> transformer0 = InvokerTransformer.invokerTransformer("Zv");
      Bag<Object> bag0 = TransformedBag.transformedBag((Bag<Object>) treeBag0, (Transformer<? super Object, ?>) transformer0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(bag0);
      // Undeclared exception!
      try { 
        collectionBag0.add((Object) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'Zv' on 'class org.apache.commons.collections4.functors.InvokerTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      SynchronizedSortedBag<InstanceofPredicate> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<InstanceofPredicate>) treeBag0);
      SortedBag<InstanceofPredicate> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<InstanceofPredicate>) synchronizedSortedBag0);
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(sortedBag0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        collectionBag0.add(instanceofPredicate0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(treeBag0);
      // Undeclared exception!
      try { 
        collectionBag0.add((InstanceofPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      predicateArray0[0] = (Predicate<Object>) nullIsExceptionPredicate0;
      predicateArray0[1] = (Predicate<Object>) nullIsExceptionPredicate0;
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = new PredicatedSortedBag<Object>(treeBag0, onePredicate0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionBag0.add((Object) nullIsExceptionPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.NullIsExceptionPredicate@2' - Predicate 'org.apache.commons.collections4.functors.OnePredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>();
      CollectionBag<Predicate<Object>> collectionBag0 = new CollectionBag<Predicate<Object>>(treeBag0);
      // Undeclared exception!
      try { 
        collectionBag0.add((Predicate<Object>) instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<Transformer<Object, String>> treeBag0 = new TreeBag<Transformer<Object, String>>();
      SynchronizedSortedBag<Transformer<Object, String>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Transformer<Object, String>>) treeBag0);
      CollectionBag<Transformer<Object, String>> collectionBag0 = new CollectionBag<Transformer<Object, String>>(synchronizedSortedBag0);
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("org.apache.commons.collections4.ClosureUtilsTest");
      // Undeclared exception!
      try { 
        collectionBag0.add(transformer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CollectionBag<String> collectionBag0 = null;
      try {
        collectionBag0 = new CollectionBag<String>((Bag<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Comparator<InstanceofPredicate> comparator0 = (Comparator<InstanceofPredicate>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>(comparator0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(treeBag0);
      boolean boolean0 = collectionBag0.add(instanceofPredicate0, 0);
      assertFalse(collectionBag0.contains(instanceofPredicate0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1734)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      boolean boolean0 = collectionBag0.retainAll(treeBag0);
      assertFalse(treeBag0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(hashBag0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4)).when(comparator0).compare(anyInt() , anyInt());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      Integer integer0 = new Integer((-1099));
      treeBag0.add(integer0);
      CollectionBag<Integer> collectionBag1 = new CollectionBag<Integer>(treeBag0);
      boolean boolean0 = collectionBag1.retainAll(collectionBag0);
      assertEquals(0, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      CollectionBag<String> collectionBag0 = new CollectionBag<String>(treeBag0);
      // Undeclared exception!
      try { 
        collectionBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      Set<String> set0 = hashBag0.uniqueSet();
      TreeBag<String> treeBag0 = new TreeBag<String>(set0);
      hashBag0.add("GrbPSfcRlh0Gf>$a");
      CollectionBag<String> collectionBag0 = new CollectionBag<String>(treeBag0);
      boolean boolean0 = collectionBag0.removeAll(set0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      hashBag0.add((Object) "r}<A!R&*R");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      CollectionBag<Integer> collectionBag0 = new CollectionBag<Integer>(treeBag0);
      Integer integer0 = new Integer((-3024));
      treeBag0.add(integer0);
      hashBag0.add((Object) treeBag0);
      boolean boolean0 = collectionBag0.removeAll(hashBag0);
      assertFalse(treeBag0.contains((-3024)));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashBag<InstanceofPredicate> hashBag0 = new HashBag<InstanceofPredicate>();
      CollectionBag<InstanceofPredicate> collectionBag0 = new CollectionBag<InstanceofPredicate>(hashBag0);
      boolean boolean0 = collectionBag0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      boolean boolean0 = collectionBag0.addAll(treeBag0);
      assertEquals(2, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      boolean boolean0 = collectionBag0.addAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      boolean boolean0 = collectionBag0.containsAll(treeBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1734), (-1)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Object object0 = new Object();
      treeBag0.add(object0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      boolean boolean0 = collectionBag0.containsAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(hashBag0);
      Bag<Object> bag0 = CollectionBag.collectionBag((Bag<Object>) collectionBag0);
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(treeBag0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = collectionBag0.remove((Object) integer0);
      assertFalse(boolean0);
  }
}
