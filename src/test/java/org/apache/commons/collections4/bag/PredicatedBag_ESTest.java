/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:09:17 GMT 2019
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PredicatedBag_ESTest extends PredicatedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Class<Object> class0 = Object.class;
      treeBag0.add((Object) class0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      Integer integer0 = new Integer(1);
      boolean boolean0 = predicatedSortedBag0.remove((Object) integer0, 1992);
      assertFalse(predicatedSortedBag0.contains(0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<SynchronizedBag<Integer>> treeBag0 = new TreeBag<SynchronizedBag<Integer>>(comparator0);
      SynchronizedBag<SynchronizedBag<Integer>> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<SynchronizedBag<Integer>>) treeBag0);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      PredicatedBag<SynchronizedBag<Integer>> predicatedBag0 = new PredicatedBag<SynchronizedBag<Integer>>(synchronizedBag0, predicate0);
      HashBag<String> hashBag0 = new HashBag<String>();
      SynchronizedSortedBag<String> synchronizedSortedBag0 = new SynchronizedSortedBag<String>(hashBag0, ") ");
      PredicatedBag<String> predicatedBag1 = new PredicatedBag<String>(synchronizedSortedBag0, predicate0);
      int int0 = predicatedBag1.getCount(predicatedBag0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<PredicatedBag<String>> treeBag0 = new TreeBag<PredicatedBag<String>>(comparator0);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      PredicatedSortedBag<PredicatedBag<String>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<PredicatedBag<String>>) treeBag0, (Predicate<? super PredicatedBag<String>>) predicate1);
      SynchronizedSortedBag<PredicatedBag<String>> synchronizedSortedBag0 = new SynchronizedSortedBag<PredicatedBag<String>>(predicatedSortedBag0);
      HashBag<String> hashBag0 = new HashBag<String>();
      PredicatedBag<String> predicatedBag0 = new PredicatedBag<String>(hashBag0, predicate1);
      synchronizedSortedBag0.add(predicatedBag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      int int0 = predicatedSortedBag0.getCount(nonePredicate0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      Bag<Object> bag0 = predicatedSortedBag0.decorated();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = new PredicatedSortedBag<Object>(treeBag0, instanceofPredicate0);
      predicatedSortedBag0.add((Object) class0);
      Bag<Object> bag0 = predicatedSortedBag0.decorated();
      assertEquals(1, bag0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      CollectionBag<Integer> collectionBag0 = new CollectionBag<Integer>(treeBag0);
      PredicatedBag<Integer> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Integer>) collectionBag0, (Predicate<? super Integer>) predicate0);
      boolean boolean0 = predicatedBag0.add(integer0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(treeBag0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = new PredicatedSortedBag<Object>(treeBag0, equalPredicate0);
      boolean boolean0 = predicatedSortedBag0.add((Object) treeBag0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeBag<UnmodifiableSortedBag<Object>> treeBag0 = new TreeBag<UnmodifiableSortedBag<Object>>();
      CollectionSortedBag<UnmodifiableSortedBag<Object>> collectionSortedBag0 = new CollectionSortedBag<UnmodifiableSortedBag<Object>>(treeBag0);
      SynchronizedSortedBag<UnmodifiableSortedBag<Object>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<UnmodifiableSortedBag<Object>>) collectionSortedBag0);
      SortedBag<UnmodifiableSortedBag<Object>> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<UnmodifiableSortedBag<Object>>) synchronizedSortedBag0);
      Integer integer0 = new Integer((-1));
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, equator0);
      PredicatedBag<UnmodifiableSortedBag<Object>> predicatedBag0 = PredicatedBag.predicatedBag((Bag<UnmodifiableSortedBag<Object>>) sortedBag0, (Predicate<? super UnmodifiableSortedBag<Object>>) equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedBag0.remove((Object) equalPredicate0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeBag<TransformedBag<Integer>> treeBag0 = new TreeBag<TransformedBag<Integer>>();
      Integer integer0 = new Integer(91);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      PredicatedSortedBag<TransformedBag<Integer>> predicatedSortedBag0 = new PredicatedSortedBag<TransformedBag<Integer>>(treeBag0, identityPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.remove((Object) anyPredicate0, (-244));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.AnyPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(";(5Z-j", equator0);
      treeBag0.add((Predicate<Object>) equalPredicate0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        PredicatedBag.predicatedBag((Bag<Predicate<Object>>) treeBag0, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(integer0);
      // Undeclared exception!
      try { 
        PredicatedBag.predicatedBag((Bag<PredicatedBag<HashBag<Object>>>) null, (Predicate<? super PredicatedBag<HashBag<Object>>>) identityPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(hashBag0, "");
      Class<String> class0 = String.class;
      Integer integer0 = new Integer((-1946));
      synchronizedSortedBag0.add((Object) integer0);
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      // Undeclared exception!
      try { 
        PredicatedBag.predicatedBag((Bag<Object>) synchronizedSortedBag0, (Predicate<Object>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '-1946' - Predicate 'org.apache.commons.collections4.functors.InstanceofPredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeBag<PredicatedBag<Object>> treeBag0 = new TreeBag<PredicatedBag<Object>>();
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0, equator0);
      TreeBag<Integer> treeBag1 = new TreeBag<Integer>();
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag1);
      PredicatedBag<Integer> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Integer>) synchronizedSortedBag0, (Predicate<? super Integer>) predicate0);
      // Undeclared exception!
      try { 
        predicatedBag0.getCount((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeBag<SynchronizedBag<Object>> treeBag0 = new TreeBag<SynchronizedBag<Object>>();
      SynchronizedBag<SynchronizedBag<Object>> synchronizedBag0 = new SynchronizedBag<SynchronizedBag<Object>>(treeBag0, treeBag0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(treeBag0, (Comparator<Object>) null, comparatorPredicate_Criterion0);
      PredicatedBag<SynchronizedBag<Object>> predicatedBag0 = PredicatedBag.predicatedBag((Bag<SynchronizedBag<Object>>) synchronizedBag0, (Predicate<? super SynchronizedBag<Object>>) comparatorPredicate0);
      // Undeclared exception!
      try { 
        predicatedBag0.getCount(synchronizedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.SynchronizedBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      SortedBag<Object> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Object>) predicatedSortedBag0);
      PredicatedSortedBag<Object> predicatedSortedBag1 = new PredicatedSortedBag<Object>(sortedBag0, predicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag1.add((Object) sortedBag0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeBag<HashBag<Integer>> treeBag0 = new TreeBag<HashBag<Integer>>();
      Transformer<Object, HashBag<Integer>> transformer0 = (Transformer<Object, HashBag<Integer>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      TransformedSortedBag<HashBag<Integer>> transformedSortedBag0 = new TransformedSortedBag<HashBag<Integer>>(treeBag0, transformer0);
      SynchronizedSortedBag<HashBag<Integer>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<HashBag<Integer>>) transformedSortedBag0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      PredicatedSortedBag<HashBag<Integer>> predicatedSortedBag0 = new PredicatedSortedBag<HashBag<Integer>>(synchronizedSortedBag0, allPredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add((HashBag<Integer>) null, 2048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeBag<HashBag<Object>> treeBag0 = new TreeBag<HashBag<Object>>();
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(equator0).equate(any() , any());
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) treeBag0, equator0);
      PredicatedSortedBag<HashBag<Object>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<HashBag<Object>>) treeBag0, (Predicate<? super HashBag<Object>>) predicate0);
      HashBag<Object> hashBag0 = new HashBag<Object>();
      // Undeclared exception!
      try { 
        predicatedSortedBag0.add(hashBag0, (-948));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '[]' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashBag<TransformedBag<Object>> hashBag0 = new HashBag<TransformedBag<Object>>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) hashBag0, comparator0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      hashBag0.add((TransformedBag<Object>) null);
      PredicatedBag<TransformedBag<Object>> predicatedBag0 = null;
      try {
        predicatedBag0 = new PredicatedBag<TransformedBag<Object>>(hashBag0, nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Input Object must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedBag<PredicatedSortedBag<Object>> predicatedBag0 = null;
      try {
        predicatedBag0 = new PredicatedBag<PredicatedSortedBag<Object>>((Bag<PredicatedSortedBag<Object>>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<Object> treeBag0 = new TreeBag<Object>();
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<SynchronizedBag<Object>> treeBag1 = new TreeBag<SynchronizedBag<Object>>(comparator0);
      SynchronizedBag<Object> synchronizedBag0 = new SynchronizedBag<Object>(treeBag0);
      treeBag1.add(synchronizedBag0);
      SynchronizedSortedBag<SynchronizedBag<Object>> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<SynchronizedBag<Object>>) treeBag1);
      PredicatedBag<SynchronizedBag<Object>> predicatedBag0 = null;
      try {
        predicatedBag0 = new PredicatedBag<SynchronizedBag<Object>>(synchronizedSortedBag0, predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.bag.TreeBag@0000000001' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@8' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Equator<Object> equator0 = (Equator<Object>) mock(Equator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "D", equator0);
      TreeBag<CollectionBag<String>> treeBag0 = new TreeBag<CollectionBag<String>>();
      SynchronizedBag<CollectionBag<String>> synchronizedBag0 = SynchronizedBag.synchronizedBag((Bag<CollectionBag<String>>) treeBag0);
      PredicatedBag<CollectionBag<String>> predicatedBag0 = PredicatedBag.predicatedBag((Bag<CollectionBag<String>>) synchronizedBag0, (Predicate<? super CollectionBag<String>>) predicate0);
      Set<CollectionBag<String>> set0 = predicatedBag0.uniqueSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>((Predicate<? super Object>[]) null);
      TreeBag<SynchronizedBag<Integer>> treeBag0 = new TreeBag<SynchronizedBag<Integer>>();
      PredicatedSortedBag<SynchronizedBag<Integer>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<SynchronizedBag<Integer>>) treeBag0, (Predicate<? super SynchronizedBag<Integer>>) nonePredicate0);
      // Undeclared exception!
      try { 
        predicatedSortedBag0.getCount(predicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.functors.NotNullPredicate cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashBag<PredicatedSortedBag<Integer>> hashBag0 = new HashBag<PredicatedSortedBag<Integer>>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedBag<PredicatedSortedBag<Integer>> predicatedBag0 = PredicatedBag.predicatedBag((Bag<PredicatedSortedBag<Integer>>) hashBag0, (Predicate<? super PredicatedSortedBag<Integer>>) predicate0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = predicatedBag0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<TransformedSortedBag<String>> treeBag0 = new TreeBag<TransformedSortedBag<String>>(comparator0);
      SynchronizedSortedBag<TransformedSortedBag<String>> synchronizedSortedBag0 = new SynchronizedSortedBag<TransformedSortedBag<String>>(treeBag0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedSortedBag<TransformedSortedBag<String>> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<TransformedSortedBag<String>>) treeBag0, (Predicate<? super TransformedSortedBag<String>>) predicate0);
      boolean boolean0 = predicatedSortedBag0.equals(synchronizedSortedBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedBag<Integer> transformedBag0 = new TransformedBag<Integer>(treeBag0, transformer0);
      Integer integer0 = new Integer((-1));
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(transformedBag0, integer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(notPredicate0, notPredicate0);
      Predicate<Integer> predicate1 = AndPredicate.andPredicate((Predicate<? super Integer>) andPredicate0, (Predicate<? super Integer>) predicate0);
      PredicatedBag<Integer> predicatedBag0 = new PredicatedBag<Integer>(synchronizedSortedBag0, predicate1);
      // Undeclared exception!
      try { 
        predicatedBag0.add(integer0, (-2073));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      PredicatedSortedBag<Object> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Object>) treeBag0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = predicatedSortedBag0.remove((Object) predicate0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<TransformedSortedBag<String>> treeBag0 = new TreeBag<TransformedSortedBag<String>>(comparator0);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedBag<TransformedSortedBag<String>> predicatedBag0 = PredicatedBag.predicatedBag((Bag<TransformedSortedBag<String>>) treeBag0, (Predicate<? super TransformedSortedBag<String>>) predicate0);
      predicatedBag0.hashCode();
  }
}
