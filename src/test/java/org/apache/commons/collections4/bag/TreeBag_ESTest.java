/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:05:18 GMT 2019
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.SortedMap;
import java.util.TreeMap;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.AbstractMapBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TreeBag_ESTest extends TreeBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>();
      assertTrue(treeBag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      CollectionSortedBag<AbstractMapBag.MutableInteger> collectionSortedBag0 = new CollectionSortedBag<AbstractMapBag.MutableInteger>(treeBag0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger0 = new AbstractMapBag.MutableInteger(0);
      collectionSortedBag0.add(abstractMapBag_MutableInteger0);
      AbstractMapBag.MutableInteger abstractMapBag_MutableInteger1 = treeBag0.last();
      assertTrue(treeBag0.contains(abstractMapBag_MutableInteger1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SortedMap<Integer, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<Integer, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      assertTrue(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<Object> comparatorPredicate0 = new ComparatorPredicate<Object>(treeBag0, comparator1, comparatorPredicate_Criterion0);
      PredicateTransformer<InstanceofPredicate> predicateTransformer0 = new PredicateTransformer<InstanceofPredicate>(comparatorPredicate0);
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Boolean boolean0 = predicateTransformer0.transform(instanceofPredicate0);
      treeBag0.add(boolean0);
      SortedMap<Boolean, AbstractMapBag.MutableInteger> sortedMap0 = (SortedMap<Boolean, AbstractMapBag.MutableInteger>)treeBag0.getMap();
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      Comparator<? super Object> comparator1 = treeBag1.comparator();
      assertNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      SynchronizedBag<String> synchronizedBag0 = new SynchronizedBag<String>(treeBag0);
      HashBag<String> hashBag0 = new HashBag<String>(synchronizedBag0);
      hashBag0.add("ph'dXmU #fa");
      boolean boolean0 = treeBag0.addAll(hashBag0);
      boolean boolean1 = treeBag0.add("n&kV<U)+Sz'j$r");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<Integer> treeBag0 = null;
      try {
        treeBag0 = new TreeBag<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      treeBag0.add((String) null, 1);
      TransformedSortedBag<String> transformedSortedBag0 = new TransformedSortedBag<String>(treeBag0, transformer0);
      TreeBag<String> treeBag1 = null;
      try {
        treeBag1 = new TreeBag<String>(transformedSortedBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<TreeMap<Locale.LanguageRange, Object>> linkedList0 = new LinkedList<TreeMap<Locale.LanguageRange, Object>>();
      TreeMap<Locale.LanguageRange, Object> treeMap0 = new TreeMap<Locale.LanguageRange, Object>();
      linkedList0.add(treeMap0);
      TreeBag<TreeMap<Locale.LanguageRange, Object>> treeBag0 = null;
      try {
        treeBag0 = new TreeBag<TreeMap<Locale.LanguageRange, Object>>(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class java.util.TreeMap cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      OnePredicate<InstanceofPredicate> onePredicate0 = new OnePredicate<InstanceofPredicate>(predicateArray0);
      PredicateTransformer<InstanceofPredicate> predicateTransformer0 = new PredicateTransformer<InstanceofPredicate>(onePredicate0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Boolean boolean0 = predicateTransformer0.transform(instanceofPredicate0);
      boolean boolean1 = treeBag0.add(boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      Comparator<? super Integer> comparator1 = treeBag0.comparator();
      assertNotNull(comparator1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>((Comparator<? super InstanceofPredicate>) null);
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        treeBag0.add(instanceofPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Objects of type class org.apache.commons.collections4.functors.InstanceofPredicate cannot be added to a naturally ordered TreeBag as it does not implement Comparable
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0).when(comparator0).compare(any() , any());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      Integer integer0 = new Integer(0);
      treeBag0.add(integer0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      Object object0 = treeBag1.first();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        treeBag1.first();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<AbstractMapBag.MutableInteger> treeBag0 = new TreeBag<AbstractMapBag.MutableInteger>(comparator0);
      // Undeclared exception!
      try { 
        treeBag0.last();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      // Undeclared exception!
      try { 
        treeBag0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.TreeBag", e);
      }
  }
}
