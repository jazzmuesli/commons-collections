/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:08:59 GMT 2019
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Set;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBagDecorator_ESTest extends AbstractBagDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TreeBag<CollectionBag<Object>> treeBag0 = new TreeBag<CollectionBag<Object>>((Comparator<? super CollectionBag<Object>>) null);
      CollectionBag<CollectionBag<Object>> collectionBag0 = new CollectionBag<CollectionBag<Object>>(treeBag0);
      Integer integer0 = new Integer((-1649));
      int int0 = collectionBag0.getCount(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<TransformedSortedBag<Object>> treeBag0 = new TreeBag<TransformedSortedBag<Object>>(comparator0);
      CollectionBag<TransformedSortedBag<Object>> collectionBag0 = new CollectionBag<TransformedSortedBag<Object>>(treeBag0);
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) treeBag1, (Transformer<? super Object, ?>) transformer0);
      collectionBag0.add(transformedSortedBag0);
      int int0 = collectionBag0.getCount(treeBag0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashBag<TransformedBag<Object>> hashBag0 = new HashBag<TransformedBag<Object>>();
      CollectionBag<TransformedBag<Object>> collectionBag0 = new CollectionBag<TransformedBag<Object>>(hashBag0);
      Bag<TransformedBag<Object>> bag0 = collectionBag0.decorated();
      assertEquals(0, bag0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashBag<TransformedBag<Object>> hashBag0 = new HashBag<TransformedBag<Object>>();
      Bag<Object> bag0 = UnmodifiableBag.unmodifiableBag((Bag<?>) hashBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(bag0, hashBag0);
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedSortedBag<Object> transformedSortedBag0 = new TransformedSortedBag<Object>(synchronizedSortedBag0, transformer0);
      hashBag0.add((TransformedBag<Object>) transformedSortedBag0);
      CollectionBag<TransformedBag<Object>> collectionBag0 = new CollectionBag<TransformedBag<Object>>(hashBag0);
      Bag<TransformedBag<Object>> bag1 = collectionBag0.decorated();
      assertEquals(1, bag1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      SynchronizedSortedBag<String> synchronizedSortedBag0 = new SynchronizedSortedBag<String>(treeBag0);
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag0.add("", (-646));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeBag<TransformedBag<String>> treeBag0 = new TreeBag<TransformedBag<String>>();
      CollectionSortedBag<TransformedBag<String>> collectionSortedBag0 = new CollectionSortedBag<TransformedBag<String>>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.getCount(treeBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.TreeBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<PredicatedSortedBag<Integer>> treeBag0 = new TreeBag<PredicatedSortedBag<Integer>>();
      CollectionSortedBag<PredicatedSortedBag<Integer>> collectionSortedBag0 = new CollectionSortedBag<PredicatedSortedBag<Integer>>(treeBag0);
      CollectionBag<PredicatedSortedBag<Integer>> collectionBag0 = new CollectionBag<PredicatedSortedBag<Integer>>(collectionSortedBag0);
      TreeBag<Integer> treeBag1 = new TreeBag<Integer>();
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      PredicatedSortedBag<Integer> predicatedSortedBag0 = new PredicatedSortedBag<Integer>(treeBag1, predicate0);
      // Undeclared exception!
      try { 
        collectionBag0.add(predicatedSortedBag0, 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.PredicatedSortedBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      CollectionBag<String> collectionBag0 = new CollectionBag<String>(hashBag0);
      boolean boolean0 = collectionBag0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<UnmodifiableSortedBag<Object>> treeBag0 = new TreeBag<UnmodifiableSortedBag<Object>>(comparator0);
      CollectionSortedBag<UnmodifiableSortedBag<Object>> collectionSortedBag0 = new CollectionSortedBag<UnmodifiableSortedBag<Object>>(treeBag0);
      boolean boolean0 = collectionSortedBag0.equals(treeBag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TreeBag<PredicatedSortedBag<String>> treeBag0 = new TreeBag<PredicatedSortedBag<String>>((Comparator<? super PredicatedSortedBag<String>>) null);
      CollectionSortedBag<PredicatedSortedBag<String>> collectionSortedBag0 = new CollectionSortedBag<PredicatedSortedBag<String>>(treeBag0);
      Set<PredicatedSortedBag<String>> set0 = collectionSortedBag0.uniqueSet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<SynchronizedBag<Integer>> treeBag0 = new TreeBag<SynchronizedBag<Integer>>();
      SynchronizedSortedBag<SynchronizedBag<Integer>> synchronizedSortedBag0 = new SynchronizedSortedBag<SynchronizedBag<Integer>>(treeBag0, treeBag0);
      CollectionBag<SynchronizedBag<Integer>> collectionBag0 = new CollectionBag<SynchronizedBag<Integer>>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionBag0.getCount(synchronizedSortedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.bag.SynchronizedSortedBag cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<PredicatedSortedBag<Object>> treeBag0 = new TreeBag<PredicatedSortedBag<Object>>(comparator0);
      CollectionSortedBag<PredicatedSortedBag<Object>> collectionSortedBag0 = new CollectionSortedBag<PredicatedSortedBag<Object>>(treeBag0);
      collectionSortedBag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<PredicatedSortedBag<Object>> treeBag0 = new TreeBag<PredicatedSortedBag<Object>>(comparator0);
      CollectionSortedBag<PredicatedSortedBag<Object>> collectionSortedBag0 = new CollectionSortedBag<PredicatedSortedBag<Object>>(treeBag0);
      boolean boolean0 = collectionSortedBag0.remove((Object) treeBag0);
      assertFalse(boolean0);
  }
}
