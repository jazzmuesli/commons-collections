/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:47:12 GMT 2019
 */

package org.apache.commons.collections4.bag;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class CollectionSortedBag_ESTest extends CollectionSortedBag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      CollectionSortedBag<Predicate<Object>> collectionSortedBag0 = new CollectionSortedBag<Predicate<Object>>(treeBag0);
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      TreeBag<String> treeBag1 = new TreeBag<String>();
      collectionSortedBag0.add(predicate0, 1);
      assertFalse(treeBag0.isEmpty());
      
      boolean boolean0 = collectionSortedBag0.remove((Object) treeBag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(treeBag0);
      collectionSortedBag0.add("src/test/resources/data/test/");
      SortedBag<String> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<String>) collectionSortedBag0);
      CollectionSortedBag<String> collectionSortedBag1 = new CollectionSortedBag<String>(sortedBag0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<LinkedList<Integer>> treeBag1 = new TreeBag<LinkedList<Integer>>(comparator0);
      CollectionSortedBag<LinkedList<Integer>> collectionSortedBag2 = new CollectionSortedBag<LinkedList<Integer>>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag1.retainAll(collectionSortedBag2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(comparator0).compare(anyString() , anyString());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      treeBag0.add("");
      TreeBag<Integer> treeBag1 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag1);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.removeAll(treeBag0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashBag<Boolean> hashBag0 = new HashBag<Boolean>();
      SynchronizedSortedBag<Boolean> synchronizedSortedBag0 = new SynchronizedSortedBag<Boolean>(hashBag0, hashBag0);
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>(synchronizedSortedBag0);
      CollectionSortedBag<Boolean> collectionSortedBag0 = new CollectionSortedBag<Boolean>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.remove((Object) synchronizedSortedBag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TreeBag<LinkedList<Object>> treeBag0 = new TreeBag<LinkedList<Object>>((Comparator<? super LinkedList<Object>>) null);
      CollectionSortedBag<LinkedList<Object>> collectionSortedBag0 = new CollectionSortedBag<LinkedList<Object>>(treeBag0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(collectionSortedBag0);
      linkedList0.add((Object) equalPredicate0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.containsAll(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        CollectionSortedBag.collectionSortedBag((SortedBag<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(5820, 0).when(comparator0).compare(anyInt() , anyInt());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = new SynchronizedSortedBag<Integer>(treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      Integer integer0 = new Integer(1120);
      collectionSortedBag0.add(integer0, 44);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll(treeBag0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag$BagIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.addAll((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.CollectionSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      TreeBag<Object> treeBag1 = new TreeBag<Object>(treeBag0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>("", classArray0, classArray0);
      TransformedSortedBag<Object> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Object>) treeBag1, (Transformer<? super Object, ?>) invokerTransformer0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Object>) transformedSortedBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) class0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeBag<UniquePredicate<Object>> treeBag0 = new TreeBag<UniquePredicate<Object>>();
      SortedBag<UniquePredicate<Object>> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<UniquePredicate<Object>>) treeBag0);
      CollectionSortedBag<UniquePredicate<Object>> collectionSortedBag0 = new CollectionSortedBag<UniquePredicate<Object>>(sortedBag0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(uniquePredicate0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
      InvokerTransformer<Object, String> invokerTransformer0 = new InvokerTransformer<Object, String>((String) null, classArray0, classArray0);
      TransformedSortedBag<String> transformedSortedBag0 = new TransformedSortedBag<String>(treeBag0, invokerTransformer0);
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add("", (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      CollectionSortedBag<InstanceofPredicate> collectionSortedBag0 = new CollectionSortedBag<InstanceofPredicate>(treeBag0);
      Class<Integer> class0 = Integer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(instanceofPredicate0, 5);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      TreeBag<Object> treeBag0 = new TreeBag<Object>(hashBag0);
      SynchronizedSortedBag<Object> synchronizedSortedBag0 = new SynchronizedSortedBag<Object>(treeBag0, hashBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(synchronizedSortedBag0);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Object) nullIsFalsePredicate0, 6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>(comparator0);
      SynchronizedSortedBag<Boolean> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Boolean>) treeBag0);
      Transformer<Boolean, Boolean> transformer0 = InvokerTransformer.invokerTransformer("reg}3(@WTiGXrCDTw");
      TransformedSortedBag<Boolean> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<Boolean>) synchronizedSortedBag0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      CollectionSortedBag<Boolean> collectionSortedBag0 = new CollectionSortedBag<Boolean>(transformedSortedBag0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<InstanceofPredicate> treeBag1 = new TreeBag<InstanceofPredicate>(comparator1);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) treeBag1);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(transformedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'reg}3(@WTiGXrCDTw' on 'class java.lang.Boolean' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      SortedBag<String> sortedBag0 = UnmodifiableSortedBag.unmodifiableSortedBag((SortedBag<String>) treeBag0);
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(sortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add("_K)5\"-.>tt!ZV;$a");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.UnmodifiableSortedBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TreeBag<UniquePredicate<Transformer<Object, InstanceofPredicate>>> treeBag0 = new TreeBag<UniquePredicate<Transformer<Object, InstanceofPredicate>>>();
      CollectionSortedBag<UniquePredicate<Transformer<Object, InstanceofPredicate>>> collectionSortedBag0 = new CollectionSortedBag<UniquePredicate<Transformer<Object, InstanceofPredicate>>>(treeBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((UniquePredicate<Transformer<Object, InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeBag<InstanceofPredicate> treeBag0 = new TreeBag<InstanceofPredicate>();
      CollectionSortedBag<InstanceofPredicate> collectionSortedBag0 = new CollectionSortedBag<InstanceofPredicate>(treeBag0);
      Class<Boolean> class0 = Boolean.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(instanceofPredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeBag<UniquePredicate<Boolean>> treeBag0 = new TreeBag<UniquePredicate<Boolean>>();
      SynchronizedSortedBag<UniquePredicate<Boolean>> synchronizedSortedBag0 = new SynchronizedSortedBag<UniquePredicate<Boolean>>(treeBag0);
      CollectionSortedBag<UniquePredicate<Boolean>> collectionSortedBag0 = new CollectionSortedBag<UniquePredicate<Boolean>>(synchronizedSortedBag0);
      UniquePredicate<Boolean> uniquePredicate0 = new UniquePredicate<Boolean>();
      // Undeclared exception!
      try { 
        collectionSortedBag0.add(uniquePredicate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CollectionSortedBag<String> collectionSortedBag0 = null;
      try {
        collectionSortedBag0 = new CollectionSortedBag<String>((SortedBag<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(treeBag0);
      collectionSortedBag0.add("src/test/resources/data/test/");
      assertFalse(treeBag0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<LinkedList<Integer>> treeBag1 = new TreeBag<LinkedList<Integer>>(comparator0);
      CollectionSortedBag<LinkedList<Integer>> collectionSortedBag1 = new CollectionSortedBag<LinkedList<Integer>>(treeBag1);
      boolean boolean0 = collectionSortedBag0.retainAll(collectionSortedBag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      treeBag0.add((Object) "~$~jydV#p*o~<]yf");
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.retainAll(treeBag0);
      assertEquals(1, treeBag0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      SynchronizedSortedBag<Integer> synchronizedSortedBag0 = SynchronizedSortedBag.synchronizedSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(synchronizedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(1189);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 1, 1189).when(comparator0).compare(any() , any());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(treeBag0);
      collectionSortedBag0.add(integer0);
      boolean boolean0 = collectionSortedBag0.removeAll(collectionSortedBag0);
      assertFalse(treeBag0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      collectionSortedBag0.add((Object) treeBag0);
      Predicate<Boolean> predicate0 = NullPredicate.nullPredicate();
      collectionSortedBag0.add((Object) predicate0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator1).compare(any() , any());
      TreeBag<InstanceofPredicate> treeBag1 = new TreeBag<InstanceofPredicate>(comparator1);
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      treeBag1.add(instanceofPredicate0, 1059);
      CollectionSortedBag<InstanceofPredicate> collectionSortedBag1 = new CollectionSortedBag<InstanceofPredicate>(treeBag1);
      boolean boolean0 = collectionSortedBag1.removeAll(treeBag0);
      assertFalse(collectionSortedBag1.contains(instanceofPredicate0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      TreeBag<String> treeBag0 = new TreeBag<String>(comparator0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<String, String> transformer0 = MapTransformer.mapTransformer((Map<? super String, ? extends String>) hashMap0);
      TransformedSortedBag<String> transformedSortedBag0 = TransformedSortedBag.transformedSortedBag((SortedBag<String>) treeBag0, (Transformer<? super String, ? extends String>) transformer0);
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(transformedSortedBag0);
      collectionSortedBag0.add("mLh(");
      TreeBag<Object> treeBag1 = new TreeBag<Object>();
      CollectionSortedBag<Object> collectionSortedBag1 = new CollectionSortedBag<Object>(treeBag1);
      // Undeclared exception!
      try { 
        collectionSortedBag1.removeAll(treeBag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<Boolean> treeBag0 = new TreeBag<Boolean>();
      CollectionSortedBag<Boolean> collectionSortedBag0 = new CollectionSortedBag<Boolean>(treeBag0);
      boolean boolean0 = collectionSortedBag0.removeAll((Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(3346).when(comparator0).compare(any() , any());
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>(comparator0);
      treeBag0.add((Integer) null);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2526).when(comparator1).compare(any() , any());
      TreeBag<Object> treeBag1 = new TreeBag<Object>(comparator1);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag1);
      boolean boolean0 = collectionSortedBag0.addAll(treeBag0);
      assertEquals(1, treeBag1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeBag<UniquePredicate<Boolean>> treeBag0 = new TreeBag<UniquePredicate<Boolean>>();
      SynchronizedSortedBag<UniquePredicate<Boolean>> synchronizedSortedBag0 = new SynchronizedSortedBag<UniquePredicate<Boolean>>(treeBag0);
      CollectionSortedBag<UniquePredicate<Boolean>> collectionSortedBag0 = new CollectionSortedBag<UniquePredicate<Boolean>>(synchronizedSortedBag0);
      boolean boolean0 = collectionSortedBag0.addAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2524, 2524).when(comparator0).compare(any() , any());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      treeBag0.add((Object) "");
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      boolean boolean0 = collectionSortedBag0.containsAll(treeBag0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      CollectionSortedBag<String> collectionSortedBag0 = new CollectionSortedBag<String>(treeBag0);
      collectionSortedBag0.add("src/test/resources/data/test/");
      boolean boolean0 = collectionSortedBag0.containsAll(collectionSortedBag0);
      assertEquals(1, treeBag0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Predicate<Object>> treeBag0 = new TreeBag<Predicate<Object>>(comparator0);
      CollectionSortedBag<Predicate<Object>> collectionSortedBag0 = new CollectionSortedBag<Predicate<Object>>(treeBag0);
      TreeBag<String> treeBag1 = new TreeBag<String>();
      boolean boolean0 = collectionSortedBag0.remove((Object) treeBag1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(treeBag0);
      SortedBag<Object> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Object>) collectionSortedBag0);
      assertEquals(0, sortedBag0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0, defaultEquator0);
      PredicatedSortedBag<Integer> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<Integer>) treeBag0, (Predicate<? super Integer>) equalPredicate0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(predicatedSortedBag0);
      // Undeclared exception!
      try { 
        collectionSortedBag0.add((Integer) defaultEquator0.HASHCODE_NULL);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '-1' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }
}
