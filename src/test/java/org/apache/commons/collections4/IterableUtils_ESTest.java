/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:37:04 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.collections4.Bag;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.FluentIterable;
import org.apache.commons.collections4.IterableUtils;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SortedBag;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.bag.CollectionBag;
import org.apache.commons.collections4.bag.CollectionSortedBag;
import org.apache.commons.collections4.bag.HashBag;
import org.apache.commons.collections4.bag.PredicatedBag;
import org.apache.commons.collections4.bag.PredicatedSortedBag;
import org.apache.commons.collections4.bag.SynchronizedBag;
import org.apache.commons.collections4.bag.SynchronizedSortedBag;
import org.apache.commons.collections4.bag.TransformedBag;
import org.apache.commons.collections4.bag.TransformedSortedBag;
import org.apache.commons.collections4.bag.TreeBag;
import org.apache.commons.collections4.bag.UnmodifiableBag;
import org.apache.commons.collections4.bag.UnmodifiableSortedBag;
import org.apache.commons.collections4.collection.TransformedCollection;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class IterableUtils_ESTest extends IterableUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      hashBag0.add("");
      int int0 = IterableUtils.frequency((Iterable<String>) hashBag0, "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 1);
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull(iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3;
      Vector<SynchronizedBag<ComparatorPredicate.Criterion>> vector0 = new Vector<SynchronizedBag<ComparatorPredicate.Criterion>>(3);
      // Undeclared exception!
      try { 
        IterableUtils.get((Iterable<SynchronizedBag<ComparatorPredicate.Criterion>>) vector0, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Iterable<String> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<?>) null, (Iterable<?>) null, (Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      FluentIterable<String> fluentIterable0 = FluentIterable.of((Iterable<String>) priorityQueue0);
      // Undeclared exception!
      try { 
        fluentIterable0.filter((Predicate<? super String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 6);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends String>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(0);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends Integer>) null, (Iterable<? extends Integer>) null, (Iterable<? extends Integer>) arrayDeque0, (Iterable<? extends Integer>) arrayDeque0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector<SynchronizedSortedBag<String>> vector0 = new Vector<SynchronizedSortedBag<String>>();
      HashBag<SynchronizedSortedBag<String>> hashBag0 = new HashBag<SynchronizedSortedBag<String>>(vector0);
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<SynchronizedSortedBag<String>>) hashBag0, (-291L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<Object> treeBag0 = new TreeBag<Object>(comparator0);
      SortedBag<Object> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Object>) treeBag0);
      CollectionSortedBag<Object> collectionSortedBag0 = new CollectionSortedBag<Object>(sortedBag0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.LESS;
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) collectionSortedBag0, comparator1, (ComparatorPredicate.Criterion) comparatorPredicate_Criterion0);
      PredicatedBag<Object> predicatedBag0 = PredicatedBag.predicatedBag((Bag<Object>) collectionSortedBag0, (Predicate<? super Object>) predicate0);
      boolean boolean0 = IterableUtils.matchesAll((Iterable<Object>) predicatedBag0, (Predicate<? super Object>) predicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 44;
      Integer integer0 = new Integer(44);
      FluentIterable<Integer> fluentIterable0 = FluentIterable.of(integer0);
      TreeBag<Integer> treeBag0 = new TreeBag<Integer>();
      SortedBag<Integer> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<Integer>) treeBag0);
      CollectionSortedBag<Integer> collectionSortedBag0 = new CollectionSortedBag<Integer>(sortedBag0);
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Integer>) collectionSortedBag0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IterableUtils.toString((Iterable<Integer>) fluentIterable1, (Transformer<? super Integer, String>) transformer0, (String) null, "(%Y)QdhVj", "(%Y)QdhVj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // delimiter may not be null
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Iterable<ArrayList<String>>[] iterableArray0 = (Iterable<ArrayList<String>>[]) Array.newInstance(Iterable.class, 1);
      Vector<ArrayList<String>> vector0 = new Vector<ArrayList<String>>(814, 814);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      vector0.add(arrayList0);
      vector0.addElement(arrayList0);
      iterableArray0[0] = (Iterable<ArrayList<String>>) vector0;
      Iterable<ArrayList<String>> iterable0 = IterableUtils.chainedIterable((Iterable<? extends ArrayList<String>>[]) iterableArray0);
      IterableUtils.chainedIterable((Iterable<?>) arrayList0, (Iterable<?>) vector0, (Iterable<?>) vector0, (Iterable<?>) iterable0);
      IterableUtils.checkNotNull(iterableArray0);
      boolean boolean0 = IterableUtils.isEmpty(arrayList0);
      boolean boolean1 = IterableUtils.isEmpty(iterable0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Iterable<Object> iterable0 = null;
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        IterableUtils.transformedIterable((Iterable<LinkedHashSet<UnmodifiableSortedBag>>) null, (Transformer<? super LinkedHashSet<UnmodifiableSortedBag>, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Iterable<Integer> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.checkNotNull((Iterable<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Iterable<String>[] iterableArray0 = (Iterable<String>[]) Array.newInstance(Iterable.class, 7);
      TreeBag<String> treeBag0 = new TreeBag<String>();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) fluentIterable0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      OrPredicate<String> orPredicate0 = new OrPredicate<String>(nullIsTruePredicate0, predicate0);
      PredicatedSortedBag<String> predicatedSortedBag0 = PredicatedSortedBag.predicatedSortedBag((SortedBag<String>) treeBag0, (Predicate<? super String>) orPredicate0);
      Set<String> set0 = predicatedSortedBag0.uniqueSet();
      Vector<String> vector0 = new Vector<String>(set0);
      iterableArray0[0] = (Iterable<String>) vector0;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      iterableArray0[1] = (Iterable<String>) set1;
      List<String> list0 = IterableUtils.toList((Iterable<String>) set1);
      iterableArray0[2] = (Iterable<String>) list0;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      iterableArray0[3] = (Iterable<String>) treeSet0;
      Iterable<String> iterable0 = IterableUtils.chainedIterable((Iterable<? extends String>) set1, (Iterable<? extends String>) iterableArray0[0]);
      iterableArray0[4] = iterable0;
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Iterable<String> iterable1 = IterableUtils.transformedIterable(iterableArray0[0], (Transformer<? super String, ? extends String>) transformer0);
      iterableArray0[5] = iterable1;
      // Undeclared exception!
      try { 
        IterableUtils.zippingIterable((Iterable<? extends String>) treeSet0, (Iterable<? extends String>[]) iterableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable((Iterable<PredicatedSortedBag<CollectionBag>>) null, (-1064L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashSet<UnmodifiableBag<String>> hashSet0 = new HashSet<UnmodifiableBag<String>>(4);
      FluentIterable<UnmodifiableBag<String>> fluentIterable0 = FluentIterable.of((Iterable<UnmodifiableBag<String>>) hashSet0);
      FluentIterable<UnmodifiableBag<String>> fluentIterable1 = fluentIterable0.reverse();
      FluentIterable<UnmodifiableBag<String>> fluentIterable2 = fluentIterable1.zip((Iterable<? extends UnmodifiableBag<String>>) hashSet0);
      Iterable<UnmodifiableBag<String>> iterable0 = IterableUtils.skippingIterable((Iterable<UnmodifiableBag<String>>) fluentIterable2, (long) 4);
      // Undeclared exception!
      try { 
        IterableUtils.get(iterable0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 4
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FluentIterable<SynchronizedBag<Object>> fluentIterable0 = new FluentIterable<SynchronizedBag<Object>>();
      FluentIterable<SynchronizedBag<Object>> fluentIterable1 = fluentIterable0.skip(3700L);
      // Undeclared exception!
      try { 
        fluentIterable1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        IterableUtils.transformedIterable((Iterable<String>) vector0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FluentIterable<Object> fluentIterable0 = FluentIterable.empty();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      fluentIterable0.allMatch(transformerPredicate0);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(transformerPredicate0);
      Transformer<Object, Boolean> transformer1 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformerPredicate.transformerPredicate((Transformer<? super SynchronizedSortedBag<Predicate<String>>, Boolean>) transformer1);
      Predicate<PredicatedSortedBag<Locale.LanguageRange>> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super PredicatedSortedBag<Locale.LanguageRange>>) identityPredicate0);
      FluentIterable.of(predicate0);
      FluentIterable<Object> fluentIterable1 = fluentIterable0.filter(transformerPredicate0);
      // Undeclared exception!
      try { 
        fluentIterable1.limit((-2043L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MaxSize parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Iterable<String> iterable0 = null;
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      // Undeclared exception!
      try { 
        IterableUtils.filteredIterable((Iterable<CollectionSortedBag<CollectionBag>>) null, (Predicate<? super CollectionSortedBag<CollectionBag>>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedHashSet<ComparatorPredicate.Criterion> linkedHashSet0 = new LinkedHashSet<ComparatorPredicate.Criterion>();
      ClosureUtilsTest.MockClosure<Object> closureUtilsTest_MockClosure0 = new ClosureUtilsTest.MockClosure<Object>();
      closureUtilsTest_MockClosure0.count = (-1176);
      IterableUtils.forEach((Iterable<ComparatorPredicate.Criterion>) linkedHashSet0, (Closure<? super ComparatorPredicate.Criterion>) closureUtilsTest_MockClosure0);
      ArrayDeque<UnmodifiableBag<String>> arrayDeque0 = new ArrayDeque<UnmodifiableBag<String>>((-939));
      Iterable<UnmodifiableBag<String>> iterable0 = IterableUtils.chainedIterable((Iterable<? extends UnmodifiableBag<String>>) arrayDeque0, (Iterable<? extends UnmodifiableBag<String>>) arrayDeque0, (Iterable<? extends UnmodifiableBag<String>>) arrayDeque0, (Iterable<? extends UnmodifiableBag<String>>) arrayDeque0);
      // Undeclared exception!
      try { 
        IterableUtils.skippingIterable(iterable0, (long) (-939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ElementsToSkip parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashBag<Object> hashBag0 = new HashBag<Object>();
      CollectionBag<Object> collectionBag0 = new CollectionBag<Object>(hashBag0);
      ClosureUtilsTest.MockTransformer<Object> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Object>();
      Object object0 = new Object();
      hashBag0.add(object0);
      Bag<Object> bag0 = TransformedBag.transformingBag((Bag<Object>) collectionBag0, (Transformer<? super Object, ?>) closureUtilsTest_MockTransformer0);
      IterableUtils.size(bag0);
      Iterable<String> iterable0 = null;
      String string0 = "z(^,x04n;";
      IterableUtils.frequency((Iterable<String>) null, "z(^,x04n;");
      FluentIterable<ComparatorPredicate.Criterion> fluentIterable0 = new FluentIterable<ComparatorPredicate.Criterion>();
      FluentIterable<ComparatorPredicate.Criterion> fluentIterable1 = fluentIterable0.unmodifiable();
      fluentIterable1.limit(2L);
      // Undeclared exception!
      try { 
        fluentIterable1.copyInto(bag0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Iterable<TransformedSortedBag<Integer>> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.uniqueIterable((Iterable<TransformedSortedBag<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      arrayDeque0.add("RL}ty}?wXh");
      Predicate<String> predicate0 = ExceptionPredicate.exceptionPredicate();
      // Undeclared exception!
      try { 
        IterableUtils.matchesAny((Iterable<String>) arrayDeque0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FluentIterable<LinkedList<String>> fluentIterable0 = new FluentIterable<LinkedList<String>>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate0);
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      // Undeclared exception!
      try { 
        IterableUtils.matchesAll((Iterable<LinkedList<String>>) fluentIterable0, (Predicate<? super LinkedList<String>>) nullIsExceptionPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(44);
      vector0.add(integer0);
      IterableUtils.loopingIterable((Iterable<Integer>) vector0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeBag<UnmodifiableBag<String>> treeBag0 = new TreeBag<UnmodifiableBag<String>>(comparator0);
      SortedBag<UnmodifiableBag<String>> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<UnmodifiableBag<String>>) treeBag0);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      IterableUtils.indexOf((Iterable<UnmodifiableBag<String>>) sortedBag0, (Predicate<? super UnmodifiableBag<String>>) onePredicate0);
      ArrayList<ArrayList<String>> arrayList0 = new ArrayList<ArrayList<String>>();
      TreeBag<ArrayList<String>> treeBag1 = new TreeBag<ArrayList<String>>(arrayList0);
      Transformer<Object, ArrayList<String>> transformer0 = (Transformer<Object, ArrayList<String>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedSortedBag<ArrayList<String>> transformedSortedBag0 = TransformedSortedBag.transformingSortedBag((SortedBag<ArrayList<String>>) treeBag1, (Transformer<? super ArrayList<String>, ? extends ArrayList<String>>) transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      IterableUtils.toString((Iterable<ArrayList<String>>) transformedSortedBag0, (Transformer<? super ArrayList<String>, String>) transformer1);
      // Undeclared exception!
      try { 
        IterableUtils.chainedIterable((Iterable<? extends SynchronizedBag<String>>) null, (Iterable<? extends SynchronizedBag<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TreeBag<String> treeBag0 = new TreeBag<String>();
      SortedBag<String> sortedBag0 = CollectionSortedBag.collectionSortedBag((SortedBag<String>) treeBag0);
      HashBag<Object> hashBag0 = new HashBag<Object>(sortedBag0);
      hashBag0.add((Object) "");
      hashBag0.add((Object) treeBag0);
      Iterable<Object> iterable0 = IterableUtils.chainedIterable((Iterable<?>) hashBag0, (Iterable<?>) sortedBag0, (Iterable<?>) treeBag0);
      IterableUtils.reversedIterable(iterable0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      IterableUtils.collatedIterable((Comparator<? super Integer>) comparator0, (Iterable<? extends Integer>) treeSet0, (Iterable<? extends Integer>) treeSet0);
      // Undeclared exception!
      try { 
        IterableUtils.unmodifiableIterable((Iterable<LinkedList<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Iterable<ComparatorPredicate.Criterion> iterable0 = IterableUtils.emptyIfNull((Iterable<ComparatorPredicate.Criterion>) null);
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Iterable<ArrayList<String>> iterable0 = IterableUtils.emptyIterable();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Iterable<String> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.unmodifiableIterable((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      FluentIterable<Object> fluentIterable0 = FluentIterable.of((Object) "");
      List<Object> list0 = IterableUtils.toList((Iterable<Object>) fluentIterable0);
      long long0 = 2360L;
      IterableUtils.skippingIterable((Iterable<Object>) list0, 2360L);
      Iterable<String> iterable0 = null;
      // Undeclared exception!
      try { 
        IterableUtils.reversedIterable((Iterable<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashBag<ArrayList<Object>> hashBag0 = new HashBag<ArrayList<Object>>();
      Transformer<Object, ArrayList<Object>> transformer0 = (Transformer<Object, ArrayList<Object>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedCollection<ArrayList<Object>> transformedCollection0 = TransformedCollection.transformedCollection((Collection<ArrayList<Object>>) hashBag0, (Transformer<? super ArrayList<Object>, ? extends ArrayList<Object>>) transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(transformer1).transform(any());
      hashBag0.add((ArrayList<Object>) null);
      hashBag0.add((ArrayList<Object>) null);
      IterableUtils.toString((Iterable<ArrayList<Object>>) transformedCollection0, (Transformer<? super ArrayList<Object>, String>) transformer1, "", "", "7DV?");
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      IterableUtils.toString((Iterable<PredicatedBag<TransformedBag>>) null, (Transformer<? super PredicatedBag<TransformedBag>, String>) transformer2, "xU1 9-],", "_w", "");
      FluentIterable<Predicate<Object>> fluentIterable0 = new FluentIterable<Predicate<Object>>();
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        IterableUtils.find((Iterable<Predicate<Object>>) fluentIterable0, (Predicate<? super Predicate<Object>>) predicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashSet<Integer> hashSet0 = new HashSet<Integer>(91, 91);
      Integer integer0 = new Integer((-3158));
      hashSet0.add(integer0);
      IterableUtils.toList((Iterable<Integer>) hashSet0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      IterableUtils.toString((Iterable<TreeBag<Predicate<Object>>>) null, (Transformer<? super TreeBag<Predicate<Object>>, String>) transformer0, "org.apache.commons.collections4.bag.CollectionBag", "org.apache.commons.collections4.bag.CollectionBag", "org.apache.commons.collections4.bag.CollectionBag");
      TreeBag<String> treeBag0 = null;
      try {
        treeBag0 = new TreeBag<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.bag.AbstractMapBag", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashBag<String> hashBag0 = new HashBag<String>();
      int int0 = IterableUtils.frequency((Iterable<String>) hashBag0, "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      FluentIterable<Object> fluentIterable0 = FluentIterable.of(objectArray0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(0);
      Iterable<Integer> iterable0 = IterableUtils.unmodifiableIterable((Iterable<Integer>) arrayDeque0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FluentIterable<Object> fluentIterable1 = fluentIterable0.collate(iterable0, comparator0);
      Iterable<Object> iterable1 = IterableUtils.boundedIterable((Iterable<Object>) fluentIterable1, (long) 0);
      // Undeclared exception!
      try { 
        IterableUtils.first(iterable1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Entry does not exist: 0
         //
         verifyException("org.apache.commons.collections4.IteratorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Iterable<Integer>[] iterableArray0 = (Iterable<Integer>[]) Array.newInstance(Iterable.class, 7);
      FluentIterable<Integer> fluentIterable0 = new FluentIterable<Integer>();
      HashBag<Integer> hashBag0 = new HashBag<Integer>();
      FluentIterable<Integer> fluentIterable1 = fluentIterable0.collate((Iterable<? extends Integer>) hashBag0);
      iterableArray0[0] = (Iterable<Integer>) fluentIterable1;
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      Iterable<Integer> iterable0 = IterableUtils.filteredIterable(iterableArray0[0], (Predicate<? super Integer>) equalPredicate0);
      iterableArray0[1] = iterable0;
      // Undeclared exception!
      try { 
        IterableUtils.toList(iterableArray0[0]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FluentIterable<String> fluentIterable0 = FluentIterable.empty();
      FluentIterable<String> fluentIterable1 = fluentIterable0.reverse();
      FluentIterable<String> fluentIterable2 = fluentIterable1.limit(3143L);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) arrayList0, comparator0);
      Iterable<String> iterable0 = IterableUtils.filteredIterable((Iterable<String>) fluentIterable2, (Predicate<? super String>) predicate0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      String string0 = IterableUtils.toString(iterable0, (Transformer<? super String, String>) transformer0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      Integer integer0 = new Integer(2276);
      arrayList0.add(integer0);
      IterableUtils.unmodifiableIterable((Iterable<Integer>) arrayList0);
      // Undeclared exception!
      try { 
        IterableUtils.loopingIterable((Iterable<PredicatedBag<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterable must not be null.
         //
         verifyException("org.apache.commons.collections4.IterableUtils", e);
      }
  }
}
