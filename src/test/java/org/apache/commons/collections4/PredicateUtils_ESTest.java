/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:24:32 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import org.apache.commons.collections4.Equator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.PredicateUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PredicateUtils_ESTest extends PredicateUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PredicateUtils.truePredicate();
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.nullIsTruePredicate((Predicate<? super NotPredicate<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.orPredicate((Predicate<? super NullIsExceptionPredicate<Integer>>) null, (Predicate<? super NullIsExceptionPredicate<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PredicateUtils.nullPredicate();
      PredicateUtils.falsePredicate();
      PredicateUtils.falsePredicate();
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      Class<Boolean> class1 = Boolean.class;
      classArray0[1] = class1;
      PredicateUtils.invokerPredicate("e0xAalvH]", (Class<?>[]) classArray0, (Object[]) classArray0);
      PredicateUtils.invokerPredicate("org.apache.commons.collections4.PredicateUtils");
      // Undeclared exception!
      try { 
        PredicateUtils.allPredicate((Collection<? extends Predicate<? super Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Collection<InstanceofPredicate> collection0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.nonePredicate((Collection<? extends Predicate<? super Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      // Undeclared exception!
      try { 
        PredicateUtils.onePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Collection<InstanceofPredicate> collection0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.nonePredicate((Collection<? extends Predicate<? super InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(object0);
      Predicate<Object> predicate0 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) identityPredicate0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) identityPredicate0);
      PredicateUtils.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      Predicate<Object> predicate2 = PredicateUtils.eitherPredicate((Predicate<? super Object>) predicate1, (Predicate<? super Object>) identityPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate2;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate2;
      predicateArray0[5] = predicate1;
      predicateArray0[6] = predicate2;
      PredicateUtils.anyPredicate((Predicate<? super TransformedPredicate<AnyPredicate>>[]) predicateArray0);
      PredicateUtils.neitherPredicate((Predicate<? super IdentityPredicate<NonePredicate>>) predicate1, (Predicate<? super IdentityPredicate<NonePredicate>>) predicate1);
      PredicateUtils.exceptionPredicate();
      PredicateUtils.nullIsExceptionPredicate((Predicate<? super Boolean>) predicate1);
      PredicateUtils.uniquePredicate();
      PredicateUtils.nullPredicate();
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = (NullIsTruePredicate<Integer>) mock(NullIsTruePredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.equalPredicate(nullIsTruePredicate0);
      PredicateUtils.nonePredicate((Predicate<? super NonePredicate<AnyPredicate>>[]) predicateArray0);
      PredicateUtils.anyPredicate((Predicate<? super String>[]) predicateArray0);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      classArray0[1] = class1;
      Class<String> class2 = String.class;
      classArray0[2] = class2;
      // Undeclared exception!
      try { 
        PredicateUtils.invokerPredicate((String) null, (Class<?>[]) classArray0, (Object[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PredicateUtils.invokerPredicate("org.apache.commons.collections4.PredicateUtils");
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.nullIsTruePredicate((Predicate<? super EqualPredicate<EqualPredicate>>) predicate0);
      PredicateUtils.identityPredicate((NotPredicate<EqualPredicate>) null);
      // Undeclared exception!
      try { 
        PredicateUtils.nullIsExceptionPredicate((Predicate<? super OrPredicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Transformer<String, Boolean> transformer0 = (Transformer<String, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate0 = PredicateUtils.asPredicate((Transformer<? super String, Boolean>) transformer0);
      PredicateUtils.orPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) predicate0);
      PredicateUtils.notNullPredicate();
      Predicate<Object> predicate1 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.andPredicate((Predicate<? super InstanceofPredicate>) null, (Predicate<? super InstanceofPredicate>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.AndPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PredicateUtils.exceptionPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate(object0, (Equator<Object>) defaultEquator0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = NotNullPredicate.notNullPredicate();
      predicateArray0[1] = predicate1;
      Boolean boolean0 = Boolean.FALSE;
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(boolean0);
      predicateArray0[2] = (Predicate<Object>) equalPredicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      PredicateUtils.andPredicate((Predicate<? super EqualPredicate<OnePredicate>>) anyPredicate0, (Predicate<? super EqualPredicate<OnePredicate>>) predicate1);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray1[0] = (Predicate<Object>) equalPredicate0;
      predicateArray1[1] = (Predicate<Object>) anyPredicate0;
      predicateArray1[2] = predicate0;
      predicateArray1[3] = (Predicate<Object>) anyPredicate0;
      PredicateUtils.anyPredicate((Predicate<? super AnyPredicate<NonePredicate>>[]) predicateArray1);
      Predicate<String> predicate2 = PredicateUtils.nonePredicate((Predicate<? super String>[]) predicateArray1);
      PredicateUtils.nullIsTruePredicate((Predicate<? super String>) predicate2);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      // Undeclared exception!
      try { 
        PredicateUtils.invokerPredicate(";jTaM\"}lO/", (Class<?>[]) classArray0, (Object[]) predicateArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter types must match the arguments
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PredicateUtils.invokerPredicate("Predicate must not be null");
      PredicateUtils.falsePredicate();
      Collection<InstanceofPredicate> collection0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.anyPredicate((Collection<? extends Predicate<? super InstanceofPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PredicateUtils.falsePredicate();
      // Undeclared exception!
      try { 
        PredicateUtils.anyPredicate((Predicate<? super NotPredicate<NonePredicate>>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PredicateUtils.uniquePredicate();
      // Undeclared exception!
      try { 
        PredicateUtils.invokerPredicate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PredicateUtils.falsePredicate();
      PredicateUtils.equalPredicate((Boolean) null);
      IdentityPredicate<String> identityPredicate0 = (IdentityPredicate<String>) mock(IdentityPredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.equalPredicate((IdentityPredicate<String>) identityPredicate0);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.neitherPredicate((Predicate<? super AllPredicate<NonePredicate>>) null, (Predicate<? super AllPredicate<NonePredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super FalsePredicate<String>, Boolean>) transformer0);
      NotPredicate<Boolean> notPredicate0 = (NotPredicate<Boolean>) mock(NotPredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.identityPredicate(notPredicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.notPredicate((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Integer integer0 = new Integer(0);
      Predicate<Object> predicate0 = PredicateUtils.identityPredicate((Object) integer0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = PredicateUtils.nullPredicate();
      predicateArray0[1] = predicate1;
      Predicate<Object> predicate2 = PredicateUtils.andPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate1);
      predicateArray0[2] = predicate2;
      // Undeclared exception!
      try { 
        PredicateUtils.allPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 3 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Collection<InstanceofPredicate> collection0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.onePredicate((Collection<? extends Predicate<? super Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.nullIsFalsePredicate((Predicate<? super AndPredicate<EqualPredicate>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PredicateUtils.notNullPredicate();
      Predicate<Object> predicate0 = PredicateUtils.notNullPredicate();
      PredicateUtils.orPredicate((Predicate<? super AnyPredicate<NotNullPredicate>>) predicate0, (Predicate<? super AnyPredicate<NotNullPredicate>>) predicate0);
      PredicateUtils.eitherPredicate((Predicate<? super AnyPredicate<IdentityPredicate>>) predicate0, (Predicate<? super AnyPredicate<IdentityPredicate>>) predicate0);
      FalsePredicate<Object> falsePredicate0 = (FalsePredicate<Object>) mock(FalsePredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.identityPredicate((FalsePredicate<Object>) falsePredicate0);
      PredicateUtils.orPredicate((Predicate<? super AnyPredicate<Integer>>) predicate0, (Predicate<? super AnyPredicate<Integer>>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      PredicateUtils.anyPredicate((Predicate<? super OnePredicate<Object>>[]) predicateArray0);
      Class<Boolean> class0 = Boolean.class;
      PredicateUtils.instanceofPredicate(class0);
      // Undeclared exception!
      try { 
        PredicateUtils.eitherPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Predicate<ComparatorPredicate<Object>> predicate0 = PredicateUtils.invokerPredicate("`6,{?]}", (Class<?>[]) classArray0, (Object[]) classArray0);
      PredicateUtils.truePredicate();
      Predicate<Object> predicate1 = PredicateUtils.truePredicate();
      Predicate<Object> predicate2 = PredicateUtils.nullIsExceptionPredicate((Predicate<? super Object>) predicate1);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate2, predicate1);
      PredicateUtils.nullIsExceptionPredicate((Predicate<? super ExceptionPredicate<NonePredicate>>) orPredicate0);
      orPredicate0.evaluate(predicate0);
      // Undeclared exception!
      try { 
        PredicateUtils.onePredicate((Collection<? extends Predicate<? super ExceptionPredicate<EqualPredicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      PredicateUtils.nullIsTruePredicate((Predicate<? super NotNullPredicate<IdentityPredicate>>) equalPredicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      PredicateUtils.invokerPredicate("setLength", (Class<?>[]) classArray0, (Object[]) classArray0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[0] = (Predicate<Object>) anyPredicate0;
      PredicateUtils.nonePredicate((Predicate<? super NotNullPredicate<AllPredicate>>[]) predicateArray0);
      Predicate<InstanceofPredicate> predicate0 = PredicateUtils.notNullPredicate();
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      PredicateUtils.instanceofPredicate(class0);
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 3);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Predicate<NotPredicate<IdentityPredicate>> predicate0 = PredicateUtils.invokerPredicate("", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate(object0);
      PredicateUtils.nullIsFalsePredicate((Predicate<? super NotNullPredicate<OnePredicate>>) predicate0);
      PredicateUtils.eitherPredicate((Predicate<? super NonePredicate<FalsePredicate>>) predicate0, (Predicate<? super NonePredicate<FalsePredicate>>) predicate0);
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate1 = PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.neitherPredicate((Predicate<? super Integer>) predicate0, (Predicate<? super Integer>) predicate1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate1;
      Predicate<InstanceofPredicate> predicate2 = PredicateUtils.onePredicate((Predicate<? super InstanceofPredicate>[]) predicateArray0);
      assertNotNull(predicate2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = PredicateUtils.asPredicate((Transformer<? super Object, Boolean>) transformer0);
      PredicateUtils.eitherPredicate((Predicate<? super NotPredicate<Boolean>>) predicate0, (Predicate<? super NotPredicate<Boolean>>) predicate0);
      PredicateUtils.invokerPredicate("");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = predicate0;
      PredicateUtils.anyPredicate((Predicate<? super FalsePredicate<NotNullPredicate>>[]) predicateArray0);
      PredicateUtils.falsePredicate();
      Class<String> class0 = String.class;
      Predicate<Object> predicate1 = PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.nonePredicate((Predicate<? super OnePredicate<FalsePredicate>>[]) predicateArray0);
      PredicateUtils.nullPredicate();
      PredicateUtils.nonePredicate((Predicate<? super TransformedPredicate<FalsePredicate>>[]) predicateArray0);
      PredicateUtils.uniquePredicate();
      Integer integer0 = new Integer(5);
      PredicateUtils.equalPredicate(integer0);
      PredicateUtils.eitherPredicate((Predicate<? super ComparatorPredicate<NotNullPredicate>>) predicate0, (Predicate<? super ComparatorPredicate<NotNullPredicate>>) predicate0);
      PredicateUtils.onePredicate((Predicate<? super UniquePredicate<ComparatorPredicate>>[]) predicateArray0);
      PredicateUtils.orPredicate((Predicate<? super ComparatorPredicate<Integer>>) predicate0, (Predicate<? super ComparatorPredicate<Integer>>) predicate0);
      PredicateUtils.nullIsExceptionPredicate((Predicate<? super AllPredicate<NullPredicate>>) predicate0);
      PredicateUtils.truePredicate();
      PredicateUtils.neitherPredicate((Predicate<? super NullIsFalsePredicate<ExceptionPredicate>>) predicate0, (Predicate<? super NullIsFalsePredicate<ExceptionPredicate>>) predicate0);
      PredicateUtils.anyPredicate((Predicate<? super AndPredicate<TransformedPredicate>>[]) predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate1;
      predicateArray1[2] = predicate1;
      // Undeclared exception!
      try { 
        PredicateUtils.transformedPredicate((Transformer<? super Object, ?>) null, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformedPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Predicate<Object> predicate0 = PredicateUtils.notNullPredicate();
      PredicateUtils.andPredicate((Predicate<? super TransformedPredicate<IdentityPredicate>>) predicate0, (Predicate<? super TransformedPredicate<IdentityPredicate>>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicate0;
      PredicateUtils.anyPredicate((Predicate<? super NullIsFalsePredicate<NonePredicate>>[]) predicateArray0);
      PredicateUtils.truePredicate();
      PredicateUtils.notPredicate((Predicate<? super AnyPredicate<OnePredicate>>) predicate0);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super ExceptionPredicate<NotPredicate>, Boolean>) transformer0);
      NotNullPredicate<InstanceofPredicate> notNullPredicate0 = (NotNullPredicate<InstanceofPredicate>) mock(NotNullPredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.identityPredicate((NotNullPredicate<InstanceofPredicate>) notNullPredicate0);
      PredicateUtils.allPredicate((Predicate<? super AllPredicate<Integer>>[]) predicateArray0);
      PredicateUtils.onePredicate((Predicate<? super ExceptionPredicate<NonePredicate>>[]) predicateArray0);
      PredicateUtils.truePredicate();
      Class<String> class0 = String.class;
      PredicateUtils.instanceofPredicate(class0);
      String string0 = "";
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      PredicateUtils.invokerPredicate("", (Class<?>[]) classArray0, (Object[]) classArray0);
      PredicateUtils.falsePredicate();
      // Undeclared exception!
      try { 
        PredicateUtils.asPredicate((Transformer<? super Object, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super Integer, Boolean>) transformer0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 9);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      Class<Object> class8 = Object.class;
      classArray0[8] = class8;
      PredicateUtils.invokerPredicate("", (Class<?>[]) classArray0, (Object[]) classArray0);
      PredicateUtils.truePredicate();
      AnyPredicate<String> anyPredicate0 = (AnyPredicate<String>) mock(AnyPredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.identityPredicate((AnyPredicate<String>) anyPredicate0);
      PredicateUtils.nullPredicate();
      Predicate<Object>[] predicateArray0 = null;
      // Undeclared exception!
      try { 
        PredicateUtils.nonePredicate((Predicate<? super InstanceofPredicate>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      Predicate<Object> predicate1 = PredicateUtils.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate0);
      PredicateUtils.neitherPredicate((Predicate<? super ExceptionPredicate<ComparatorPredicate>>) predicate1, (Predicate<? super ExceptionPredicate<ComparatorPredicate>>) predicate1);
      PredicateUtils.truePredicate();
      PredicateUtils.notNullPredicate();
      PredicateUtils.notPredicate((Predicate<? super NotPredicate<Boolean>>) predicate1);
      PredicateUtils.notNullPredicate();
      PredicateUtils.neitherPredicate((Predicate<? super NotNullPredicate<AllPredicate>>) predicate1, (Predicate<? super NotNullPredicate<AllPredicate>>) predicate1);
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      PredicateUtils.invokerPredicate("org.apache.commons.collections4.ClosureUtilsTest$MockTransformer", (Class<?>[]) classArray0, (Object[]) classArray0);
      PredicateUtils.nullPredicate();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<Integer> class0 = Integer.class;
      Predicate<Object> predicate2 = PredicateUtils.instanceofPredicate(class0);
      predicateArray0[0] = predicate2;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate1;
      predicateArray0[3] = predicate0;
      PredicateUtils.onePredicate((Predicate<? super InstanceofPredicate>[]) predicateArray0);
      Predicate<Object> predicate3 = PredicateUtils.exceptionPredicate();
      PredicateUtils.nullIsFalsePredicate((Predicate<? super AllPredicate<InstanceofPredicate>>) predicate3);
      Class<String> class1 = String.class;
      PredicateUtils.instanceofPredicate(class1);
      PredicateUtils.orPredicate((Predicate<? super FalsePredicate<ExceptionPredicate>>) predicate0, (Predicate<? super FalsePredicate<ExceptionPredicate>>) predicate3);
      PredicateUtils.falsePredicate();
      // Undeclared exception!
      try { 
        PredicateUtils.anyPredicate((Collection<? extends Predicate<? super ComparatorPredicate<ComparatorPredicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.orPredicate((Predicate<? super OnePredicate<NonePredicate>>) predicate0, (Predicate<? super OnePredicate<NonePredicate>>) predicate0);
      PredicateUtils.andPredicate((Predicate<? super String>) predicate0, (Predicate<? super String>) predicate0);
      Predicate<Object> predicate1 = PredicateUtils.eitherPredicate((Predicate<? super Object>) predicate0, (Predicate<? super Object>) predicate0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = predicate1;
      predicateArray0[1] = predicate0;
      predicateArray0[2] = predicate0;
      predicateArray0[3] = predicate1;
      predicateArray0[4] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      anyPredicate0.getPredicates();
      PredicateUtils.identityPredicate((AnyPredicate<Object>) anyPredicate0);
      Predicate<Object> predicate2 = PredicateUtils.truePredicate();
      PredicateUtils.anyPredicate((Predicate<? super AndPredicate<Integer>>[]) predicateArray0);
      PredicateUtils.notNullPredicate();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super OnePredicate<OnePredicate>, Boolean>) transformer0);
      Predicate<Object> predicate3 = ExceptionPredicate.exceptionPredicate();
      PredicateUtils.notPredicate((Predicate<? super EqualPredicate<NotNullPredicate>>) predicate3);
      PredicateUtils.allPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateUtils.nullIsFalsePredicate((Predicate<? super Boolean>) predicate2);
      PredicateUtils.eitherPredicate((Predicate<? super NotPredicate<NonePredicate>>) predicate0, (Predicate<? super NotPredicate<NonePredicate>>) predicate1);
      IdentityPredicate<Integer> identityPredicate0 = (IdentityPredicate<Integer>) mock(IdentityPredicate.class, new ViolatedAssumptionAnswer());
      PredicateUtils.equalPredicate((IdentityPredicate<Integer>) identityPredicate0);
      PredicateUtils.uniquePredicate();
      PredicateUtils.orPredicate((Predicate<? super AllPredicate<NotNullPredicate>>) predicate1, (Predicate<? super AllPredicate<NotNullPredicate>>) predicate0);
      PredicateUtils.neitherPredicate((Predicate<? super FalsePredicate<Boolean>>) predicate1, (Predicate<? super FalsePredicate<Boolean>>) predicate1);
      Predicate<NotPredicate<NullIsExceptionPredicate>> predicate4 = PredicateUtils.identityPredicate((NotPredicate<NullIsExceptionPredicate>) null);
      assertNotNull(predicate4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PredicateUtils.invokerPredicate("^");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = PredicateUtils.asPredicate((Transformer<? super Object, Boolean>) transformer0);
      predicateArray0[0] = predicate0;
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 1 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Boolean boolean0 = Boolean.TRUE;
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) boolean0);
      predicateArray0[0] = predicate0;
      Predicate<Object> predicate1 = PredicateUtils.onePredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateUtils.nullIsTruePredicate((Predicate<? super OrPredicate<FalsePredicate>>) predicate1);
      PredicateUtils.invokerPredicate("^yQKM=L6KDTe,");
      PredicateUtils.neitherPredicate((Predicate<? super NotNullPredicate<AnyPredicate>>) predicate0, (Predicate<? super NotNullPredicate<AnyPredicate>>) predicate0);
      Boolean.logicalXor(true, true);
      Predicate<Object> predicate2 = PredicateUtils.nullIsTruePredicate((Predicate<? super Object>) predicate0);
      PredicateUtils.onePredicate((Predicate<? super Integer>[]) predicateArray0);
      PredicateUtils.orPredicate((Predicate<? super ExceptionPredicate<NotNullPredicate>>) predicate2, (Predicate<? super ExceptionPredicate<NotNullPredicate>>) predicate0);
      Predicate<Object> predicate3 = PredicateUtils.anyPredicate((Predicate<? super Object>[]) predicateArray0);
      PredicateUtils.falsePredicate();
      PredicateUtils.notNullPredicate();
      PredicateUtils.andPredicate((Predicate<? super AllPredicate<IdentityPredicate>>) predicate3, (Predicate<? super AllPredicate<IdentityPredicate>>) predicate0);
      PredicateUtils.exceptionPredicate();
      PredicateUtils.notNullPredicate();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super AndPredicate<TransformerPredicate>, Boolean>) transformer0);
      PredicateUtils.nullIsExceptionPredicate((Predicate<? super IdentityPredicate<AnyPredicate>>) predicate0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate3, (Equator<Object>) null);
      Predicate<EqualPredicate<String>> predicate4 = PredicateUtils.nullIsFalsePredicate((Predicate<? super EqualPredicate<String>>) equalPredicate0);
      assertNotNull(predicate4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Predicate<AllPredicate<AllPredicate>> predicate0 = PredicateUtils.exceptionPredicate();
      PredicateUtils.uniquePredicate();
      PredicateUtils.equalPredicate((Object) predicate0);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      PredicateUtils.asPredicate((Transformer<? super NotNullPredicate<NotPredicate>, Boolean>) transformer0);
      Class<Integer> class0 = Integer.class;
      PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.instanceofPredicate(class0);
      PredicateUtils.nullPredicate();
      // Undeclared exception!
      try { 
        PredicateUtils.allPredicate((Collection<? extends Predicate<? super Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PredicateUtils.uniquePredicate();
      Integer integer0 = new Integer(634);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) integer0);
      PredicateUtils.orPredicate((Predicate<? super AllPredicate<InstanceofPredicate>>) predicate0, (Predicate<? super AllPredicate<InstanceofPredicate>>) predicate0);
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      // Undeclared exception!
      try { 
        PredicateUtils.invokerPredicate((String) null, (Class<?>[]) classArray0, (Object[]) classArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The method to invoke must not be null
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }
}
