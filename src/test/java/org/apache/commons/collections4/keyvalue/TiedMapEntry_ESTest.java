/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:50:57 GMT 2019
 */

package org.apache.commons.collections4.keyvalue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.keyvalue.TiedMapEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TiedMapEntry_ESTest extends TiedMapEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Comparable<Object>>) comparator0);
      tiedMapEntry0.getKey();
      Object object0 = new Object();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      tiedMapEntry0.setValue("");
      Integer integer0 = new Integer((-2467));
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      String string0 = null;
      TiedMapEntry<Object, String> tiedMapEntry1 = new TiedMapEntry<Object, String>(hashMap2, (Object) null);
      // Undeclared exception!
      try { 
        tiedMapEntry1.equals(tiedMapEntry0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2378));
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      tiedMapEntry0.setValue(integer0);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap1, (AbstractMap.SimpleEntry<Integer, String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByKey();
      tiedMapEntry1.hashCode();
      hashMap1.put((AbstractMap.SimpleEntry<Integer, String>) null, "=");
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry2 = new TiedMapEntry<Integer, Object>(hashMap2, integer0);
      String string0 = tiedMapEntry2.toString();
      assertEquals("-2378=null", string0);
      
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry3 = new TiedMapEntry<Object, Object>(hashMap3, (Object) null);
      tiedMapEntry3.getValue();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(hashMap4, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      boolean boolean0 = tiedMapEntry4.equals(tiedMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2378));
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      tiedMapEntry0.setValue(integer0);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap1, (AbstractMap.SimpleEntry<Integer, String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByKey();
      tiedMapEntry1.hashCode();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry2 = new TiedMapEntry<Integer, Object>(hashMap2, integer0);
      String string0 = tiedMapEntry2.toString();
      assertEquals("-2378=null", string0);
      
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry3 = new TiedMapEntry<Object, Object>(hashMap3, (Object) null);
      tiedMapEntry3.getValue();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(hashMap4, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(tiedMapEntry0);
      tiedMapEntry4.setValue(abstractMap_SimpleEntry0);
      boolean boolean0 = tiedMapEntry4.equals(tiedMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleEntry<Object, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleEntry<Object, String>>();
      Integer integer0 = new Integer((-2613));
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>((Object) null, (String) null);
      Map.Entry.comparingByKey();
      hashMap0.put(integer0, abstractMap_SimpleEntry0);
      Integer integer1 = new Integer((-2613));
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry0 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<Object, String>>(hashMap0, integer1);
      tiedMapEntry0.hashCode();
      Integer integer2 = new Integer((-734));
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>((Map<Integer, Object>) null, integer2);
      // Undeclared exception!
      try { 
        tiedMapEntry1.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Integer> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap0, integer0);
      Map.Entry.comparingByValue();
      hashMap0.put(abstractMap_SimpleEntry0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(hashMap0, integer0);
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Object, Integer>(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleImmutableEntry1);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, Integer>(hashMap0, abstractMap_SimpleEntry1);
      // Undeclared exception!
      try { 
        tiedMapEntry0.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-3619));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer(0);
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer1);
      Map.Entry.comparingByValue();
      tiedMapEntry0.equals(integer1);
      tiedMapEntry0.toString();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry1 = new TiedMapEntry<String, String>(hashMap1, "");
      Map.Entry.comparingByKey();
      tiedMapEntry1.toString();
      HashMap<Object, Integer> hashMap2 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry2 = new TiedMapEntry<Object, Integer>(hashMap2, hashMap2);
      Integer integer2 = new Integer((-507));
      tiedMapEntry2.setValue(integer2);
      // Undeclared exception!
      try { 
        tiedMapEntry2.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(912);
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      tiedMapEntry0.getValue();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry1 = new TiedMapEntry<String, Integer>(hashMap1, "");
      Integer integer1 = new Integer((-1105));
      tiedMapEntry1.setValue(integer1);
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(tiedMapEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(hashMap2, abstractMap_SimpleImmutableEntry0);
      Object object0 = tiedMapEntry2.getKey();
      tiedMapEntry0.equals(object0);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry3 = new TiedMapEntry<Integer, Object>(hashMap3, integer1);
      tiedMapEntry3.toString();
      HashMap<Integer, AbstractMap.SimpleEntry<String, String>> hashMap4 = new HashMap<Integer, AbstractMap.SimpleEntry<String, String>>();
      TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, String>> tiedMapEntry4 = new TiedMapEntry<Integer, AbstractMap.SimpleEntry<String, String>>(hashMap4, (Integer) null);
      tiedMapEntry4.toString();
      HashMap<Object, AbstractMap.SimpleEntry<Object, Object>> hashMap5 = new HashMap<Object, AbstractMap.SimpleEntry<Object, Object>>();
      Integer integer2 = new Integer(34);
      TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry5 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<Object, Object>>(hashMap5, integer2);
      tiedMapEntry5.getKey();
      HashMap<String, Object> hashMap6 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry6 = new TiedMapEntry<String, Object>(hashMap6, "{Ike:Yj'1<+om");
      Object object1 = tiedMapEntry6.getValue();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(0);
      TiedMapEntry<Object, String> tiedMapEntry0 = new TiedMapEntry<Object, String>(hashMap0, integer0);
      tiedMapEntry0.hashCode();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(0);
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>(hashMap1, integer1);
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      tiedMapEntry1.setValue(tiedMapEntry0);
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, String> hashMap2 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, String>();
      Integer integer2 = new Integer(0);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(hashMap2, integer2);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String>(hashMap2, abstractMap_SimpleEntry0);
      tiedMapEntry2.getKey();
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry3 = new TiedMapEntry<String, Object>(hashMap3, "=");
      Object object0 = new Object();
      tiedMapEntry3.equals(object0);
      HashMap<Object, Object> hashMap4 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry4 = new TiedMapEntry<Object, Object>(hashMap4, abstractMap_SimpleEntry0);
      tiedMapEntry4.setValue(object0);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, Integer>("=", integer1);
      TiedMapEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Integer>> tiedMapEntry5 = new TiedMapEntry<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Integer>>((Map<AbstractMap.SimpleEntry<String, Integer>, AbstractMap.SimpleEntry<Object, Integer>>) null, abstractMap_SimpleEntry1);
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, Integer>(abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        tiedMapEntry5.setValue(abstractMap_SimpleEntry2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.entrySet();
      hashMap0.put("", "UJY/LC- ");
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "UJY/LC- ");
      Map.Entry.comparingByValue();
      Integer integer0 = new Integer(0);
      tiedMapEntry0.equals(integer0);
      tiedMapEntry0.equals("");
      tiedMapEntry0.setValue(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap1, hashMap1);
      tiedMapEntry1.hashCode();
      Map.Entry.comparingByValue();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap2, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      tiedMapEntry2.equals(tiedMapEntry1);
      tiedMapEntry2.hashCode();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(0);
      TiedMapEntry<Integer, Object> tiedMapEntry3 = new TiedMapEntry<Integer, Object>(hashMap3, integer1);
      TiedMapEntry<Integer, Object> tiedMapEntry4 = new TiedMapEntry<Integer, Object>(hashMap3, integer0);
      Object object0 = tiedMapEntry4.getKey();
      tiedMapEntry3.equals(object0);
      tiedMapEntry3.hashCode();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TiedMapEntry<String, String> tiedMapEntry0 = new TiedMapEntry<String, String>(hashMap0, "");
      tiedMapEntry0.setValue((String) null);
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap1 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(tiedMapEntry0);
      hashMap1.put(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap1, (AbstractMap.SimpleImmutableEntry<String, Object>) null);
      tiedMapEntry1.getKey();
      hashMap0.clone();
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      hashMap2.put((String) null, "");
      TiedMapEntry<String, Object> tiedMapEntry2 = new TiedMapEntry<String, Object>(hashMap2, (String) null);
      tiedMapEntry2.setValue((Object) null);
      tiedMapEntry2.equals(tiedMapEntry1);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      TiedMapEntry<Object, String> tiedMapEntry3 = new TiedMapEntry<Object, String>(hashMap3, tiedMapEntry1);
      tiedMapEntry3.toString();
      HashMap<Object, AbstractMap.SimpleEntry<String, Integer>> hashMap4 = new HashMap<Object, AbstractMap.SimpleEntry<String, Integer>>();
      TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Integer>> tiedMapEntry4 = new TiedMapEntry<Object, AbstractMap.SimpleEntry<String, Integer>>(hashMap4, (Object) null);
      AbstractMap.SimpleEntry<String, Integer> abstractMap_SimpleEntry0 = tiedMapEntry4.getValue();
      assertNull(abstractMap_SimpleEntry0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "");
      tiedMapEntry0.equals(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(0);
      TiedMapEntry<Object, Integer> tiedMapEntry1 = new TiedMapEntry<Object, Integer>(hashMap1, integer0);
      Integer integer1 = new Integer(0);
      hashMap1.put(integer0, integer1);
      Integer integer2 = new Integer(0);
      tiedMapEntry1.setValue(integer2);
      tiedMapEntry1.getValue();
      HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> hashMap2 = new HashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>();
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(tiedMapEntry0);
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<String, Object>, Object>(hashMap2, abstractMap_SimpleImmutableEntry0);
      Object object0 = tiedMapEntry2.setValue("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(800);
      TiedMapEntry<Object, Integer> tiedMapEntry0 = new TiedMapEntry<Object, Integer>(hashMap0, integer0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry1 = new TiedMapEntry<String, Object>(hashMap1, "Cannot set value to this map entry");
      Map.Entry.comparingByKey();
      Map.Entry.comparingByValue();
      tiedMapEntry1.getValue();
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("Y", (Object) null);
      TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, Integer> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleEntry<String, Object>, Integer>((Map<AbstractMap.SimpleEntry<String, Object>, Integer>) null, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        tiedMapEntry2.equals(tiedMapEntry0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<String, String>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<String, String>>();
      TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>> tiedMapEntry0 = new TiedMapEntry<Object, AbstractMap.SimpleImmutableEntry<String, String>>(hashMap0, hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String string0 = "Rl.";
      TiedMapEntry<String, String> tiedMapEntry1 = new TiedMapEntry<String, String>(hashMap1, "Rl.");
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(tiedMapEntry1);
      tiedMapEntry0.setValue(abstractMap_SimpleImmutableEntry0);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<String, String>("W@ks$2*;WNK\"!..yh", "W@ks$2*;WNK\"!..yh");
      // Undeclared exception!
      try { 
        tiedMapEntry0.setValue(abstractMap_SimpleImmutableEntry1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<String, Integer>>();
      TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleImmutableEntry<String, Integer>>(hashMap0, "1FVFxCr?EZ");
      tiedMapEntry0.hashCode();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      TiedMapEntry<Object, Integer> tiedMapEntry1 = new TiedMapEntry<Object, Integer>(hashMap1, "1FVFxCr?EZ");
      tiedMapEntry1.getKey();
      Integer integer0 = new Integer((-424));
      TiedMapEntry<Integer, Integer> tiedMapEntry2 = new TiedMapEntry<Integer, Integer>((Map<Integer, Integer>) null, integer0);
      // Undeclared exception!
      try { 
        tiedMapEntry2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      String string0 = "";
      hashMap0.put("", "");
      tiedMapEntry0.setValue(hashMap0);
      // Undeclared exception!
      try { 
        tiedMapEntry0.getValue();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, (String) null);
      TiedMapEntry<Integer, String> tiedMapEntry0 = new TiedMapEntry<Integer, String>(hashMap0, (Integer) null);
      Integer integer0 = tiedMapEntry0.getKey();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>(hashMap0, (String) null);
      tiedMapEntry0.setValue((Integer) null);
      tiedMapEntry0.setValue((Integer) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>(hashMap1, (Integer) null);
      tiedMapEntry1.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>(hashMap0, "A^bgD0U");
      Integer integer0 = new Integer((-1199));
      Integer integer1 = tiedMapEntry0.setValue(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      Object object0 = tiedMapEntry0.getValue();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = ")}T7}u=$h";
      TiedMapEntry<String, Integer> tiedMapEntry0 = new TiedMapEntry<String, Integer>((Map<String, Integer>) null, ")}T7}u=$h");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Object>) comparator0);
      Map.Entry.comparingByKey();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = null;
      TiedMapEntry<Integer, String> tiedMapEntry1 = new TiedMapEntry<Integer, String>(hashMap0, (Integer) null);
      tiedMapEntry1.getValue();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator1);
      tiedMapEntry0.equals((Object) null);
      // Undeclared exception!
      try { 
        tiedMapEntry0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> hashMap0 = new HashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>();
      Integer integer0 = new Integer(0);
      TiedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> tiedMapEntry0 = new TiedMapEntry<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(hashMap0, integer0);
      tiedMapEntry0.setValue((AbstractMap.SimpleImmutableEntry<Object, String>) null);
      tiedMapEntry0.hashCode();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Integer integer1 = new Integer(0);
      TiedMapEntry<Object, String> tiedMapEntry1 = new TiedMapEntry<Object, String>(hashMap1, integer1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super AbstractMap.SimpleImmutableEntry<Object, Object>>) comparator0);
      Map.Entry.comparingByKey();
      tiedMapEntry1.hashCode();
      AbstractMap.SimpleEntry<Object, Integer> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Integer>(integer0, integer1);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, Integer>, String>((Map<AbstractMap.SimpleEntry<Object, Integer>, String>) null, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        tiedMapEntry2.setValue("%9.&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "Cannot set value to this map entry");
      tiedMapEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      tiedMapEntry0.toString();
      String string0 = tiedMapEntry0.toString();
      assertEquals("{}=null", string0);
      
      tiedMapEntry0.getKey();
      Object object0 = new Object();
      hashMap0.put("{}=null", object0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-2467));
      TiedMapEntry<Integer, String> tiedMapEntry1 = new TiedMapEntry<Integer, String>(hashMap1, integer0);
      boolean boolean0 = tiedMapEntry1.equals(tiedMapEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      TiedMapEntry<Object, String> tiedMapEntry0 = new TiedMapEntry<Object, String>(hashMap0, hashMap0);
      boolean boolean0 = tiedMapEntry0.equals(hashMap0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry0 = new TiedMapEntry<String, Object>(hashMap0, "");
      Object object0 = tiedMapEntry0.setValue(hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>((Map<Object, Object>) null, (Object) null);
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>((Map<Object, Object>) null, tiedMapEntry0);
      Object object0 = tiedMapEntry1.getKey();
      tiedMapEntry0.equals(object0);
      // Undeclared exception!
      try { 
        tiedMapEntry0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2378));
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      tiedMapEntry0.setValue(integer0);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap1, (AbstractMap.SimpleEntry<Integer, String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByKey();
      tiedMapEntry1.hashCode();
      HashMap<Object, Object> hashMap2 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry2 = new TiedMapEntry<Object, Object>(hashMap2, (Object) null);
      tiedMapEntry2.getValue();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> hashMap3 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> tiedMapEntry3 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(hashMap3, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(tiedMapEntry0);
      tiedMapEntry3.setValue(abstractMap_SimpleEntry0);
      boolean boolean0 = tiedMapEntry3.equals(tiedMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, (Object) null);
      tiedMapEntry0.equals((Object) null);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1);
      TiedMapEntry<Integer, Object> tiedMapEntry1 = new TiedMapEntry<Integer, Object>(hashMap1, integer0);
      TiedMapEntry<Object, Object> tiedMapEntry2 = new TiedMapEntry<Object, Object>(hashMap0, tiedMapEntry1);
      Object object0 = tiedMapEntry2.getKey();
      // Undeclared exception!
      try { 
        tiedMapEntry1.setValue(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set value to this map entry
         //
         verifyException("org.apache.commons.collections4.keyvalue.TiedMapEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, String>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<String, String>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleEntry<String, String>>(hashMap0, "");
      tiedMapEntry0.toString();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("", "");
      tiedMapEntry0.setValue(abstractMap_SimpleEntry0);
      HashMap<AbstractMap.SimpleEntry<String, String>, Object> hashMap1 = new HashMap<AbstractMap.SimpleEntry<String, String>, Object>();
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<String, String>(abstractMap_SimpleEntry0);
      TiedMapEntry<AbstractMap.SimpleEntry<String, String>, Object> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleEntry<String, String>, Object>(hashMap1, abstractMap_SimpleEntry1);
      tiedMapEntry1.setValue((Object) null);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      TiedMapEntry<Object, String> tiedMapEntry2 = new TiedMapEntry<Object, String>(hashMap2, abstractMap_SimpleEntry1);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super String>) comparator0);
      tiedMapEntry2.equals(tiedMapEntry1);
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-2182));
      TiedMapEntry<Integer, Object> tiedMapEntry3 = new TiedMapEntry<Integer, Object>(hashMap3, integer0);
      tiedMapEntry3.setValue(tiedMapEntry1);
      HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>> hashMap4 = new HashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>>();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry2 = new AbstractMap.SimpleEntry<Object, String>(abstractMap_SimpleEntry1);
      TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleEntry<String, Object>>(hashMap4, abstractMap_SimpleEntry2);
      tiedMapEntry4.equals(tiedMapEntry3);
      HashMap<Integer, Integer> hashMap5 = new HashMap<Integer, Integer>();
      TiedMapEntry<Integer, Integer> tiedMapEntry5 = new TiedMapEntry<Integer, Integer>(hashMap5, integer0);
      Integer integer1 = new Integer(1);
      Integer integer2 = tiedMapEntry5.setValue(integer1);
      assertNull(integer2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry0 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap1, (AbstractMap.SimpleEntry<Integer, String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      hashMap1.put((AbstractMap.SimpleEntry<Integer, String>) null, ";DE>pQi|");
      Map.Entry.comparingByKey();
      tiedMapEntry0.hashCode();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      hashMap3.put(hashMap0, (Object) null);
      TiedMapEntry<Object, Object> tiedMapEntry1 = new TiedMapEntry<Object, Object>(hashMap3, (Object) null);
      tiedMapEntry1.getValue();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> tiedMapEntry2 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(hashMap4, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      boolean boolean0 = tiedMapEntry2.equals(tiedMapEntry0);
      assertFalse(boolean0);
      
      HashMap<String, Integer> hashMap5 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2378));
      hashMap5.put("3e-C`GrA", integer0);
      TiedMapEntry<String, Integer> tiedMapEntry3 = new TiedMapEntry<String, Integer>(hashMap5, "");
      String string0 = tiedMapEntry3.toString();
      assertEquals("=null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-2378));
      TiedMapEntry<Integer, Integer> tiedMapEntry0 = new TiedMapEntry<Integer, Integer>(hashMap0, integer0);
      tiedMapEntry0.setValue(integer0);
      HashMap<AbstractMap.SimpleEntry<Integer, String>, String> hashMap1 = new HashMap<AbstractMap.SimpleEntry<Integer, String>, String>();
      TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String> tiedMapEntry1 = new TiedMapEntry<AbstractMap.SimpleEntry<Integer, String>, String>(hashMap1, (AbstractMap.SimpleEntry<Integer, String>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByValue((Comparator<? super Integer>) comparator0);
      Map.Entry.comparingByKey();
      tiedMapEntry1.hashCode();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      TiedMapEntry<Integer, Object> tiedMapEntry2 = new TiedMapEntry<Integer, Object>(hashMap2, integer0);
      String string0 = tiedMapEntry2.toString();
      assertEquals("-2378=null", string0);
      
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry3 = new TiedMapEntry<Object, Object>(hashMap3, (Object) null);
      Object object0 = new Object();
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> hashMap4 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>();
      TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>> tiedMapEntry4 = new TiedMapEntry<AbstractMap.SimpleImmutableEntry<Object, Object>, AbstractMap.SimpleEntry<Integer, Object>>(hashMap4, (AbstractMap.SimpleImmutableEntry<Object, Object>) null);
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(tiedMapEntry0);
      tiedMapEntry4.setValue(abstractMap_SimpleEntry0);
      boolean boolean0 = tiedMapEntry4.equals(tiedMapEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "");
      HashMap<String, AbstractMap.SimpleEntry<Object, Object>> hashMap1 = new HashMap<String, AbstractMap.SimpleEntry<Object, Object>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>> tiedMapEntry0 = new TiedMapEntry<String, AbstractMap.SimpleEntry<Object, Object>>(hashMap1, "");
      tiedMapEntry0.toString();
      tiedMapEntry0.getKey();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1681);
      TiedMapEntry<Integer, String> tiedMapEntry1 = new TiedMapEntry<Integer, String>(hashMap2, integer0);
      tiedMapEntry1.setValue("");
      HashMap<String, Object> hashMap3 = new HashMap<String, Object>();
      TiedMapEntry<String, Object> tiedMapEntry2 = new TiedMapEntry<String, Object>(hashMap3, "");
      HashMap<Object, Integer> hashMap4 = new HashMap<Object, Integer>();
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      TiedMapEntry<Object, String> tiedMapEntry3 = new TiedMapEntry<Object, String>(hashMap5, tiedMapEntry1);
      String string0 = tiedMapEntry3.toString();
      assertEquals("1681==null", string0);
      
      HashMap<String, AbstractMap.SimpleEntry<Object, String>> hashMap6 = new HashMap<String, AbstractMap.SimpleEntry<Object, String>>();
      TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>> tiedMapEntry4 = new TiedMapEntry<String, AbstractMap.SimpleEntry<Object, String>>(hashMap6, "");
      boolean boolean0 = tiedMapEntry4.equals("1681==null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      TiedMapEntry<Object, Object> tiedMapEntry0 = new TiedMapEntry<Object, Object>(hashMap0, hashMap0);
      Object object0 = new Object();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      TiedMapEntry<Object, String> tiedMapEntry1 = new TiedMapEntry<Object, String>(hashMap2, (Object) null);
      boolean boolean0 = tiedMapEntry1.equals(tiedMapEntry0);
      assertFalse(boolean0);
  }
}
