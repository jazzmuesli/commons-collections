/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:11:10 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.list.FixedSizeList;
import org.apache.commons.collections4.list.GrowthList;
import org.apache.commons.collections4.list.LazyList;
import org.apache.commons.collections4.list.SetUniqueList;
import org.apache.commons.collections4.list.UnmodifiableList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractListDecorator_ESTest extends AbstractListDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(0);
      List<Object> list0 = growthList0.subList(0, 0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      Transformer<Integer, Object> transformer0 = (Transformer<Integer, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<Object> lazyList0 = LazyList.lazyList((List<Object>) growthList0, (Transformer<Integer, ?>) transformer0);
      List<Object> list0 = lazyList0.decorated();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>(1);
      growthList0.add((String) null);
      growthList0.add("1J");
      growthList0.remove(1);
      assertFalse(growthList0.contains("1J"));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) growthList0);
      growthList0.add((Object) setUniqueList0);
      ListIterator<Object> listIterator0 = setUniqueList0.listIterator();
      assertTrue(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>(growthList0);
      Factory<Integer> factory0 = (Factory<Integer>) mock(Factory.class, new ViolatedAssumptionAnswer());
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) unmodifiableList0, (Factory<? extends Integer>) factory0);
      UnmodifiableList<Object> unmodifiableList1 = new UnmodifiableList<Object>(lazyList0);
      ListIterator<Object> listIterator0 = unmodifiableList1.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      growthList0.set(0, (Object) null);
      int int0 = growthList0.lastIndexOf((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      growthList0.add((Object) "lU@rtGYr");
      Integer integer0 = new Integer((-3578));
      growthList0.add((Object) integer0);
      int int0 = growthList0.lastIndexOf(integer0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(anyInt());
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) growthList0, (Transformer<Integer, ? extends Integer>) transformer0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) lazyList0);
      Integer integer0 = fixedSizeList0.get(15);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) growthList0, (Transformer<Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(31);
      Transformer<Integer, Integer> transformer1 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(transformer1).transform(anyInt());
      LazyList<Integer> lazyList1 = LazyList.lazyList((List<Integer>) lazyList0, (Transformer<Integer, ? extends Integer>) transformer1);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) lazyList1);
      Integer integer1 = fixedSizeList0.get((int) integer0);
      assertEquals(31, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(0);
      boolean boolean0 = growthList0.addAll(151, (Collection<?>) growthList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Factory<Integer> factory0 = (Factory<Integer>) mock(Factory.class, new ViolatedAssumptionAnswer());
      LazyList<Integer> lazyList0 = new LazyList<Integer>(growthList0, factory0);
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>(lazyList0);
      // Undeclared exception!
      try { 
        unmodifiableList0.subList(1683, 66);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 66
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) growthList0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        setUniqueList0.set((-93), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      // Undeclared exception!
      try { 
        growthList0.remove((-7830));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      // Undeclared exception!
      try { 
        growthList0.listIterator(778);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 778
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      UnmodifiableList<Integer> unmodifiableList0 = new UnmodifiableList<Integer>(growthList0);
      List<Object> list0 = UnmodifiableList.unmodifiableList((List<?>) unmodifiableList0);
      Factory<Integer> factory0 = (Factory<Integer>) mock(Factory.class, new ViolatedAssumptionAnswer());
      LazyList<Object> lazyList0 = new LazyList<Object>(list0, factory0);
      // Undeclared exception!
      try { 
        lazyList0.get(288);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>(0);
      // Undeclared exception!
      try { 
        growthList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      // Undeclared exception!
      try { 
        growthList0.addAll((-1035), (Collection<? extends String>) growthList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1035, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>(4);
      FixedSizeList<String> fixedSizeList0 = FixedSizeList.fixedSizeList((List<String>) growthList0);
      // Undeclared exception!
      try { 
        fixedSizeList0.add(4, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // List is fixed size
         //
         verifyException("org.apache.commons.collections4.list.FixedSizeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      // Undeclared exception!
      try { 
        growthList0.add((-1738), "Size should increase if addAll returns true");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1738, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      growthList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      // Undeclared exception!
      try { 
        growthList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      UnmodifiableList<String> unmodifiableList0 = new UnmodifiableList<String>(growthList0);
      Transformer<Integer, String> transformer0 = (Transformer<Integer, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<String> lazyList0 = LazyList.lazyList((List<String>) unmodifiableList0, (Transformer<Integer, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        lazyList0.addAll(10, (Collection<? extends String>) growthList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) growthList0, (Transformer<Integer, ? extends Integer>) transformer0);
      Integer integer0 = new Integer(31);
      lazyList0.add(15, integer0);
      assertTrue(growthList0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<Integer> lazyList0 = LazyList.lazyList((List<Integer>) growthList0, (Transformer<Integer, ? extends Integer>) transformer0);
      FixedSizeList<Integer> fixedSizeList0 = FixedSizeList.fixedSizeList((List<Integer>) lazyList0);
      int int0 = growthList0.indexOf(fixedSizeList0);
      assertFalse(growthList0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      Factory<String> factory0 = (Factory<String>) mock(Factory.class, new ViolatedAssumptionAnswer());
      LazyList<String> lazyList0 = LazyList.lazyList((List<String>) growthList0, (Factory<? extends String>) factory0);
      String string0 = lazyList0.set(2543, "g$@]H\"");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GrowthList<String> growthList0 = new GrowthList<String>();
      Integer integer0 = new Integer((-1802));
      boolean boolean0 = growthList0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(2);
      // Undeclared exception!
      try { 
        growthList0.subList(12, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(12) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      ListIterator<Object> listIterator0 = growthList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>();
      Factory<Object> factory0 = (Factory<Object>) mock(Factory.class, new ViolatedAssumptionAnswer());
      LazyList<Object> lazyList0 = new LazyList<Object>(growthList0, factory0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) lazyList0);
      // Undeclared exception!
      try { 
        setUniqueList0.get((-975));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GrowthList<Object> growthList0 = new GrowthList<Object>(512);
      Transformer<Integer, Object> transformer0 = (Transformer<Integer, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      LazyList<Object> lazyList0 = new LazyList<Object>(growthList0, transformer0);
      int int0 = lazyList0.lastIndexOf("From");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GrowthList<Integer> growthList0 = new GrowthList<Integer>();
      ListIterator<Integer> listIterator0 = growthList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }
}
