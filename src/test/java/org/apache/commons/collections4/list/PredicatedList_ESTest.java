/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:05:28 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.list.PredicatedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class PredicatedList_ESTest extends PredicatedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      Predicate<Object> predicate1 = NotPredicate.notPredicate((Predicate<? super Object>) predicate0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PredicatedList<Object> predicatedList0 = PredicatedList.predicatedList((List<Object>) linkedList0, (Predicate<? super Object>) predicate1);
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      PredicatedList.PredicatedListIterator predicatedList_PredicatedListIterator0 = predicatedList0.new PredicatedListIterator(listIterator0);
      predicatedList_PredicatedListIterator0.set((Object) null);
      assertFalse(predicatedList_PredicatedListIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList1);
      PredicatedList<String> predicatedList0 = PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) predicate0);
      List<String> list0 = predicatedList0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedList<Predicate<Object>> predicatedList0 = new PredicatedList<Predicate<Object>>(linkedList0, predicate0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      PredicatedList<Object> predicatedList1 = new PredicatedList<Object>(linkedList1, predicate0);
      predicatedList1.add(0, (Object) predicatedList0);
      assertFalse(predicatedList1.contains(0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedList<LinkedList<Object>> predicatedList0 = PredicatedList.predicatedList((List<LinkedList<Object>>) linkedList0, (Predicate<? super LinkedList<Object>>) predicate0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.add(linkedList1);
      ListIterator<LinkedList<Object>> listIterator0 = predicatedList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PredicatedList<Integer> predicatedList0 = new PredicatedList<Integer>(linkedList0, instanceofPredicate0);
      ListIterator<Integer> listIterator0 = predicatedList0.listIterator(0);
      PredicatedList.PredicatedListIterator predicatedList_PredicatedListIterator0 = predicatedList0.new PredicatedListIterator(listIterator0);
      Integer integer0 = new Integer((-350));
      // Undeclared exception!
      try { 
        predicatedList_PredicatedListIterator0.set(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[0] = (Predicate<Object>) uniquePredicate0;
      PredicatedList<String> predicatedList0 = PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) predicateArray0[0]);
      List<String> list0 = predicatedList0.decorated();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      PredicatedList<String> predicatedList0 = new PredicatedList<String>(linkedList0, andPredicate0);
      linkedList0.add("Rj");
      List<String> list0 = predicatedList0.decorated();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      LinkedList<LinkedList<Integer>> linkedList1 = new LinkedList<LinkedList<Integer>>();
      PredicatedList<LinkedList<Integer>> predicatedList0 = PredicatedList.predicatedList((List<LinkedList<Integer>>) linkedList1, (Predicate<? super LinkedList<Integer>>) identityPredicate0);
      boolean boolean0 = predicatedList0.addAll(0, (Collection<? extends LinkedList<Integer>>) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedList<Predicate<Object>> predicatedList0 = new PredicatedList<Predicate<Object>>(linkedList0, predicate0);
      // Undeclared exception!
      try { 
        predicatedList0.subList(0, 1624);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1624
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      LinkedList<Predicate<Boolean>> linkedList0 = new LinkedList<Predicate<Boolean>>();
      PredicatedList<Predicate<Boolean>> predicatedList0 = PredicatedList.predicatedList((List<Predicate<Boolean>>) linkedList0, (Predicate<? super Predicate<Boolean>>) predicate0);
      Predicate<Boolean> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Boolean>>) linkedList0);
      // Undeclared exception!
      try { 
        predicatedList0.set(1449, predicate1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AllPredicate<String> allPredicate0 = new AllPredicate<String>((Predicate<? super String>[]) null);
      NullIsTruePredicate<String> nullIsTruePredicate0 = new NullIsTruePredicate<String>(allPredicate0);
      PredicatedList<String> predicatedList0 = PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) nullIsTruePredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.set(2, "0bsvAv+-/vx)UJUz[)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedList<Object> predicatedList0 = PredicatedList.predicatedList((List<Object>) linkedList0, (Predicate<? super Object>) uniquePredicate0);
      PredicatedList<Object> predicatedList1 = new PredicatedList<Object>(predicatedList0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedList1.set(0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      linkedList0.add("H2S,?~)EOu<=/Z~\"");
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("org.apache.commons.collections4.collection.AbstractCollectionDecorator", classArray0, classArray0);
      TransformerPredicate<String> transformerPredicate0 = new TransformerPredicate<String>(invokerTransformer0);
      // Undeclared exception!
      try { 
        PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) transformerPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'org.apache.commons.collections4.collection.AbstractCollectionDecorator' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        PredicatedList.predicatedList((List<Integer>) linkedList0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addFirst(linkedList1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      // Undeclared exception!
      try { 
        PredicatedList.predicatedList((List<LinkedList<String>>) linkedList0, (Predicate<? super LinkedList<String>>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '[]' - Predicate 'org.apache.commons.collections4.functors.NullPredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      linkedList0.add(transformer0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      PredicatedList<Transformer<Object, Integer>> predicatedList0 = PredicatedList.predicatedList((List<Transformer<Object, Integer>>) linkedList0, (Predicate<? super Transformer<Object, Integer>>) uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.addAll((-1111), (Collection<? extends Transformer<Object, Integer>>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.ExceptionTransformer@3' - Predicate 'org.apache.commons.collections4.functors.UniquePredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(integer0);
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.list.PredicatedList$PredicatedListIterator");
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      IfTransformer<Object, String> ifTransformer0 = new IfTransformer<Object, String>(equalPredicate0, constantTransformer0, transformer0);
      Predicate<Object> predicate0 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) ifTransformer0, (Predicate<? super Object>) equalPredicate0);
      PredicatedList<String> predicatedList0 = PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) predicate0);
      // Undeclared exception!
      try { 
        predicatedList0.add(0, "org.apache.commons.collections4.list.PredicatedList$PredicatedListIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      predicateArray0[2] = predicateArray0[0];
      PredicatedList<Predicate<Object>> predicatedList0 = PredicatedList.predicatedList((List<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) predicateArray0[2]);
      // Undeclared exception!
      try { 
        predicatedList0.add(0, (Predicate<Object>) orPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.OrPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, Integer> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(transformer0, predicate0);
      PredicatedList<String> predicatedList0 = PredicatedList.predicatedList((List<String>) linkedList0, (Predicate<? super String>) transformedPredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.add(1, "TBv.kU");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Transformer<Boolean, Integer>> linkedList0 = new LinkedList<Transformer<Boolean, Integer>>();
      Transformer<Boolean, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      linkedList0.add(transformer0);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      PredicatedList<Transformer<Boolean, Integer>> predicatedList0 = null;
      try {
        predicatedList0 = new PredicatedList<Transformer<Boolean, Integer>>(linkedList0, predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>((Predicate<? super Object>) null);
      linkedList0.add((LinkedList<Integer>) null);
      PredicatedList<LinkedList<Integer>> predicatedList0 = null;
      try {
        predicatedList0 = new PredicatedList<LinkedList<Integer>>(linkedList0, notPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NotPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      PredicatedList<Boolean> predicatedList0 = null;
      try {
        predicatedList0 = new PredicatedList<Boolean>((List<Boolean>) null, predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null, defaultEquator0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(equalPredicate0);
      Boolean boolean0 = predicateTransformer0.transform(equalPredicate0);
      linkedList0.add(boolean0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      PredicatedList<Boolean> predicatedList0 = null;
      try {
        predicatedList0 = new PredicatedList<Boolean>(linkedList0, anyPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'false' - Predicate 'org.apache.commons.collections4.functors.AnyPredicate@3' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<String>> linkedList0 = new LinkedList<Predicate<String>>();
      PredicatedList<Predicate<String>> predicatedList0 = new PredicatedList<Predicate<String>>(linkedList0, uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.listIterator(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Transformer<Object, Integer>> linkedList0 = new LinkedList<Transformer<Object, Integer>>();
      Transformer<Object, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      linkedList0.add(transformer0);
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      PredicatedList<Transformer<Object, Integer>> predicatedList0 = PredicatedList.predicatedList((List<Transformer<Object, Integer>>) linkedList0, (Predicate<? super Transformer<Object, Integer>>) predicate0);
      // Undeclared exception!
      try { 
        predicatedList0.addAll((-1111), (Collection<? extends Transformer<Object, Integer>>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1111, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      PredicatedList<Predicate<Object>> predicatedList0 = PredicatedList.predicatedList((List<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) predicate0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(predicate0);
      boolean boolean1 = predicatedList0.equals(boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicatedList<Predicate<Object>> predicatedList0 = new PredicatedList<Predicate<Object>>(linkedList0, predicate0);
      boolean boolean0 = predicatedList0.equals(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      PredicatedList<Integer> predicatedList0 = new PredicatedList<Integer>(linkedList0, predicate0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        predicatedList0.set(2640, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2640, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>((Object) null);
      PredicatedList<Object> predicatedList0 = PredicatedList.predicatedList((List<Object>) linkedList0, (Predicate<? super Object>) equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.subList(1336, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1336) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedList0);
      PredicatedList<Predicate<Object>> predicatedList0 = PredicatedList.predicatedList((List<Predicate<Object>>) linkedList0, (Predicate<? super Predicate<Object>>) equalPredicate0);
      int int0 = predicatedList0.indexOf(equalPredicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(linkedList0);
      LinkedList<Predicate<String>> linkedList1 = new LinkedList<Predicate<String>>();
      PredicatedList<Predicate<String>> predicatedList0 = PredicatedList.predicatedList((List<Predicate<String>>) linkedList1, (Predicate<? super Predicate<String>>) equalPredicate0);
      NotPredicate<String> notPredicate0 = new NotPredicate<String>(equalPredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.add((-1), (Predicate<String>) notPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'org.apache.commons.collections4.functors.NotPredicate@4' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PredicatedList<Object> predicatedList0 = PredicatedList.predicatedList((List<Object>) linkedList0, (Predicate<? super Object>) uniquePredicate0);
      // Undeclared exception!
      try { 
        predicatedList0.remove((-3414));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3414, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<String>> linkedList0 = new LinkedList<Predicate<String>>();
      PredicatedList<Predicate<String>> predicatedList0 = new PredicatedList<Predicate<String>>(linkedList0, uniquePredicate0);
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      PredicatedList<Predicate<Object>> predicatedList1 = new PredicatedList<Predicate<Object>>(linkedList1, uniquePredicate0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(uniquePredicate0, uniquePredicate0);
      ListIterator<Predicate<Object>> listIterator0 = (ListIterator<Predicate<Object>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(andPredicate0).when(listIterator0).next();
      PredicatedList.PredicatedListIterator predicatedList_PredicatedListIterator0 = predicatedList1.new PredicatedListIterator(listIterator0);
      Object object0 = predicatedList_PredicatedListIterator0.next();
      int int0 = predicatedList0.lastIndexOf(object0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
      PredicatedList<LinkedList<Integer>> predicatedList0 = new PredicatedList<LinkedList<Integer>>(linkedList0, predicate0);
      // Undeclared exception!
      try { 
        predicatedList0.get(603);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 603, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      LinkedList<Predicate<String>> linkedList0 = new LinkedList<Predicate<String>>();
      PredicatedList<Predicate<String>> predicatedList0 = new PredicatedList<Predicate<String>>(linkedList0, uniquePredicate0);
      ListIterator<Predicate<String>> listIterator0 = predicatedList0.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      PredicatedList<Object> predicatedList0 = PredicatedList.predicatedList((List<Object>) linkedList1, (Predicate<? super Object>) predicate0);
      predicatedList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(nullIsExceptionPredicate0);
      PredicatedList<Boolean> predicatedList0 = PredicatedList.predicatedList((List<Boolean>) linkedList0, (Predicate<? super Boolean>) nullIsTruePredicate0);
      ListIterator<Boolean> listIterator0 = linkedList0.listIterator();
      PredicatedList.PredicatedListIterator predicatedList_PredicatedListIterator0 = predicatedList0.new PredicatedListIterator(listIterator0);
      PredicateTransformer<Predicate<Object>> predicateTransformer0 = new PredicateTransformer<Predicate<Object>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(nullIsTruePredicate0);
      predicatedList_PredicatedListIterator0.add(boolean0);
      assertTrue(linkedList0.contains(boolean0));
  }
}
