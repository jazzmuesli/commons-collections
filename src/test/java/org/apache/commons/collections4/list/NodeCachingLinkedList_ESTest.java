/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:57:01 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NodeCachingLinkedList_ESTest extends NodeCachingLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.stream();
      String string0 = "";
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = nodeCachingLinkedList0.createHeaderNode();
      nodeCachingLinkedList0.listIterator();
      nodeCachingLinkedList0.add(0, "E%");
      nodeCachingLinkedList1.createNode("<+(");
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = nodeCachingLinkedList2.createHeaderNode();
      Integer integer0 = new Integer(0);
      nodeCachingLinkedList2.removeNode(abstractLinkedList_Node1);
      nodeCachingLinkedList2.addNodeToCache(abstractLinkedList_Node1);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList3 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList1.updateNode(abstractLinkedList_Node0, "E%");
      NodeCachingLinkedList<Integer> nodeCachingLinkedList4 = new NodeCachingLinkedList<Integer>(nodeCachingLinkedList3);
      nodeCachingLinkedList4.setMaximumCacheSize((int) integer0);
      int int0 = new Integer(0);
      nodeCachingLinkedList2.removeAllNodes();
      nodeCachingLinkedList4.getMaximumCacheSize();
      nodeCachingLinkedList2.getNodeFromCache();
      nodeCachingLinkedList2.createNode("");
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList5 = new NodeCachingLinkedList<Locale.LanguageRange>((-2714));
      nodeCachingLinkedList5.removeAllNodes();
      nodeCachingLinkedList2.isCacheFull();
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node2 = null;
      nodeCachingLinkedList5.getNodeFromCache();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", (-2714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-2714.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(nodeCachingLinkedList0);
      String string0 = "";
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = nodeCachingLinkedList1.createNode("");
      nodeCachingLinkedList0.listIterator();
      nodeCachingLinkedList0.add(0, "");
      nodeCachingLinkedList1.createNode("<+(");
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = nodeCachingLinkedList2.createHeaderNode();
      nodeCachingLinkedList2.getMaximumCacheSize();
      nodeCachingLinkedList2.removeNode(abstractLinkedList_Node1);
      nodeCachingLinkedList2.addNodeToCache(abstractLinkedList_Node1);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList3 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList1.updateNode(abstractLinkedList_Node0, "");
      NodeCachingLinkedList<Integer> nodeCachingLinkedList4 = new NodeCachingLinkedList<Integer>(nodeCachingLinkedList3);
      nodeCachingLinkedList4.setMaximumCacheSize(20);
      nodeCachingLinkedList1.getMaximumCacheSize();
      nodeCachingLinkedList4.getMaximumCacheSize();
      nodeCachingLinkedList2.getNodeFromCache();
      nodeCachingLinkedList2.createNode("");
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList5 = new NodeCachingLinkedList<Locale.LanguageRange>((-2714));
      nodeCachingLinkedList5.removeAllNodes();
      nodeCachingLinkedList2.isCacheFull();
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node2 = null;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", (-2714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-2714.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(linkedList0);
      linkedList0.removeAll(nodeCachingLinkedList0);
      nodeCachingLinkedList0.add("$bDKfA7]r^TPymH");
      nodeCachingLinkedList0.removeAllNodes();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      nodeCachingLinkedList1.retainAll(nodeCachingLinkedList0);
      linkedList0.stream();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nodeCachingLinkedList0.forEach(consumer0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList1.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>((-1099));
      nodeCachingLinkedList0.getMaximumCacheSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((-99));
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = abstractLinkedList_Node0.getPreviousNode();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node2 = abstractLinkedList_Node1.getNextNode();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node2);
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList1 = new NodeCachingLinkedList<Locale.LanguageRange>((-99));
      nodeCachingLinkedList1.header = null;
      // Undeclared exception!
      try { 
        nodeCachingLinkedList1.removeAllNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.NodeCachingLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(0);
      nodeCachingLinkedList1.subList(0, 0);
      nodeCachingLinkedList1.removeAllNodes();
      nodeCachingLinkedList1.containsAll(nodeCachingLinkedList0);
      nodeCachingLinkedList1.removeAllNodes();
      nodeCachingLinkedList1.getMaximumCacheSize();
      nodeCachingLinkedList1.removeAllNodes();
      nodeCachingLinkedList0.getNodeFromCache();
      int int0 = (-1069);
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>((-1069));
      // Undeclared exception!
      try { 
        nodeCachingLinkedList2.removeNode((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(20);
      String string0 = ";pQY8Ayr7-oSU";
      nodeCachingLinkedList0.remove((Object) ";pQY8Ayr7-oSU");
      nodeCachingLinkedList0.size = (-1);
      String string1 = "";
      nodeCachingLinkedList0.createNode("");
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      nodeCachingLinkedList0.getNodeFromCache();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = null;
      try {
        nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2242;
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(2242);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      int int1 = 20;
      Integer integer0 = new Integer(20);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Integer>(abstractLinkedList_Node0, abstractLinkedList_Node0, integer0);
      abstractLinkedList_Node1.setValue(integer0);
      abstractLinkedList_Node1.setPreviousNode(abstractLinkedList_Node0);
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node1);
      nodeCachingLinkedList0.createNode(integer0);
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>();
      try { 
        nodeCachingLinkedList1.getNode(20, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (20) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.stream();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = nodeCachingLinkedList0.header;
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = abstractLinkedList_Node0.getNextNode();
      nodeCachingLinkedList1.removeNode(abstractLinkedList_Node1);
      nodeCachingLinkedList0.getNodeFromCache();
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList2.shrinkCacheToMaximumSize();
      nodeCachingLinkedList0.isCacheFull();
      NodeCachingLinkedList<String> nodeCachingLinkedList3 = new NodeCachingLinkedList<String>();
      nodeCachingLinkedList2.getMaximumCacheSize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList0, 0, 0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      nodeCachingLinkedList0.replaceAll(unaryOperator0);
      nodeCachingLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
      nodeCachingLinkedList0.getMaximumCacheSize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>(0);
      nodeCachingLinkedList0.add(0, (Locale.LanguageRange) null);
      nodeCachingLinkedList0.isCacheFull();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(0);
      nodeCachingLinkedList1.isCacheFull();
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = nodeCachingLinkedList1.createHeaderNode();
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = abstractLinkedList_Node0.getNextNode();
      nodeCachingLinkedList1.addNodeToCache(abstractLinkedList_Node1);
      nodeCachingLinkedList0.toString();
      nodeCachingLinkedList0.stream();
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>();
      nodeCachingLinkedList2.getMaximumCacheSize();
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      nodeCachingLinkedList0.removeAllNodes();
      nodeCachingLinkedList1.removeNode(abstractLinkedList_Node1);
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node2 = new AbstractLinkedList.Node<Locale.LanguageRange>((Locale.LanguageRange) null);
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node3 = new AbstractLinkedList.Node<Locale.LanguageRange>((Locale.LanguageRange) null);
      abstractLinkedList_Node2.next = abstractLinkedList_Node3;
      nodeCachingLinkedList0.addNodeToCache(abstractLinkedList_Node2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      Integer integer0 = new Integer(1551);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = cursorableLinkedList0.createNode(integer0);
      nodeCachingLinkedList0.updateNode(abstractLinkedList_Node0, integer0);
      Integer integer1 = new Integer(0);
      nodeCachingLinkedList0.add(integer1);
      // Undeclared exception!
      nodeCachingLinkedList0.setMaximumCacheSize((-1270));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Collection<String> collection0 = null;
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = null;
      try {
        nodeCachingLinkedList0 = new NodeCachingLinkedList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      nodeCachingLinkedList0.removeAllNodes();
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(2637);
      nodeCachingLinkedList1.getMaximumCacheSize();
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>(1055);
      nodeCachingLinkedList2.addFirst(nodeCachingLinkedList1);
      NodeCachingLinkedList<Object> nodeCachingLinkedList3 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      // Undeclared exception!
      try { 
        nodeCachingLinkedList3.getFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-1152));
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(810);
      nodeCachingLinkedList1.getMaximumCacheSize();
      nodeCachingLinkedList1.add("");
      nodeCachingLinkedList1.isCacheFull();
      nodeCachingLinkedList1.getNodeFromCache();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-2199);
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-2199));
      // Undeclared exception!
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList0.removeAllNodes();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
      nodeCachingLinkedList1.createNode((Object) null);
      nodeCachingLinkedList0.getNodeFromCache();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      abstractLinkedList_Node0.value = "j\"l$`MK\u0006v1D>K";
      nodeCachingLinkedList0.addFirst("");
      abstractLinkedList_Node0.setNextNode((AbstractLinkedList.Node<String>) null);
      abstractLinkedList_Node0.setPreviousNode((AbstractLinkedList.Node<String>) null);
      nodeCachingLinkedList0.removeFirst();
      AbstractLinkedList.Node<String> abstractLinkedList_Node1 = abstractLinkedList_Node0.next;
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNodeToCache((AbstractLinkedList.Node<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.NodeCachingLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((-1053));
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(nodeCachingLinkedList0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      Integer integer0 = new Integer((-1053));
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Integer>(abstractLinkedList_Node0, abstractLinkedList_Node0, integer0);
      nodeCachingLinkedList1.addNodeToCache(abstractLinkedList_Node1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(1);
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList0.setMaximumCacheSize(0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(nodeCachingLinkedList0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList_Cursor0.current;
      nodeCachingLinkedList0.addNodeToCache((AbstractLinkedList.Node<Object>) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-4053);
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>((-4053));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      nodeCachingLinkedList0.toString();
      nodeCachingLinkedList0.replaceAll(unaryOperator0);
      nodeCachingLinkedList0.removeAllNodes();
      int int1 = (-1761);
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>((-1761));
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      cursorableLinkedList0.listIterator();
      nodeCachingLinkedList0.stream();
      nodeCachingLinkedList1.parallelStream();
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = cursorableLinkedList0.createNode("pHivKB#<w^HF><,q2XE");
      // Undeclared exception!
      try { 
        nodeCachingLinkedList1.removeNode(abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(3473);
      nodeCachingLinkedList0.setMaximumCacheSize(3473);
      nodeCachingLinkedList0.createNode("%*T^ (r'@Wq:brj");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>(nodeCachingLinkedList0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((-1));
      nodeCachingLinkedList0.removeAllNodes();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>((-508));
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      nodeCachingLinkedList0.removeNode(abstractLinkedList_Node0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>((-508));
      nodeCachingLinkedList1.getMaximumCacheSize();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      // Undeclared exception!
      nodeCachingLinkedList0.setMaximumCacheSize((-57));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(0);
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(nodeCachingLinkedList0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      cursorableLinkedList0.toArray();
      cursorableLinkedList_Cursor0.expectedModCount = 635;
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList_Cursor0.current;
      nodeCachingLinkedList0.addNodeToCache((AbstractLinkedList.Node<Object>) null);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList1 = new NodeCachingLinkedList<Integer>(635);
      nodeCachingLinkedList1.getNodeFromCache();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      // Undeclared exception!
      try { 
        Locale.LanguageRange.parse("'$x{*ND'fa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range='$x{*nd'fa
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      NodeCachingLinkedList<String> nodeCachingLinkedList1 = new NodeCachingLinkedList<String>(nodeCachingLinkedList0);
      String string0 = "";
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = nodeCachingLinkedList1.createNode("");
      nodeCachingLinkedList0.listIterator();
      nodeCachingLinkedList0.add(0, "E%");
      nodeCachingLinkedList1.createNode("<+(");
      NodeCachingLinkedList<Object> nodeCachingLinkedList2 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node1 = nodeCachingLinkedList2.createHeaderNode();
      Integer integer0 = new Integer(0);
      nodeCachingLinkedList2.removeNode(abstractLinkedList_Node1);
      nodeCachingLinkedList2.addNodeToCache(abstractLinkedList_Node1);
      NodeCachingLinkedList<Integer> nodeCachingLinkedList3 = new NodeCachingLinkedList<Integer>();
      nodeCachingLinkedList1.updateNode(abstractLinkedList_Node0, "E%");
      NodeCachingLinkedList<Integer> nodeCachingLinkedList4 = new NodeCachingLinkedList<Integer>(nodeCachingLinkedList3);
      nodeCachingLinkedList4.setMaximumCacheSize((int) integer0);
      nodeCachingLinkedList1.getMaximumCacheSize();
      nodeCachingLinkedList4.getMaximumCacheSize();
      nodeCachingLinkedList2.getNodeFromCache();
      nodeCachingLinkedList2.createNode("");
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList5 = new NodeCachingLinkedList<Locale.LanguageRange>((-2714));
      nodeCachingLinkedList5.removeAllNodes();
      nodeCachingLinkedList2.isCacheFull();
      AbstractLinkedList.Node<Locale.LanguageRange> abstractLinkedList_Node2 = null;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", (-2714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-2714.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(cursorableLinkedList0);
      nodeCachingLinkedList0.setMaximumCacheSize(0);
      // Undeclared exception!
      try { 
        Locale.LanguageRange.parse("nweK1i5U1Wf8[+ay#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=nwek1i5u1wf8[+ay#
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(linkedList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      nodeCachingLinkedList0.add("$bDKfA7]r^TPymH");
      nodeCachingLinkedList0.removeAllNodes();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.stream();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nodeCachingLinkedList0.forEach(consumer0);
      nodeCachingLinkedList1.updateNode(abstractLinkedList_Node0, (Object) null);
      nodeCachingLinkedList1.removeAllNodes();
      nodeCachingLinkedList0.shrinkCacheToMaximumSize();
      NodeCachingLinkedList<Integer> nodeCachingLinkedList2 = new NodeCachingLinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      nodeCachingLinkedList2.addAll((Collection<? extends Integer>) linkedList1);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node1 = new AbstractLinkedList.Node<Integer>();
      nodeCachingLinkedList2.addNodeToCache(abstractLinkedList_Node1);
      nodeCachingLinkedList1.removeNode(abstractLinkedList_Node0);
      assertFalse(nodeCachingLinkedList1.contains("$bDKfA7]r^TPymH"));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>();
      int int0 = nodeCachingLinkedList1.getMaximumCacheSize();
      assertEquals(20, int0);
  }
}
