/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:01:02 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionFactory;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.list.TransformedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformedList_ESTest extends TransformedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      HashMap<Object, LinkedList<String>> hashMap0 = new HashMap<Object, LinkedList<String>>();
      Transformer<Object, LinkedList<String>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends LinkedList<String>>) hashMap0);
      TransformedList<LinkedList<String>> transformedList0 = TransformedList.transformedList((List<LinkedList<String>>) linkedList0, (Transformer<? super LinkedList<String>, ? extends LinkedList<String>>) transformer0);
      ListIterator<LinkedList<String>> listIterator0 = (ListIterator<LinkedList<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      TransformedList.TransformedListIterator transformedList_TransformedListIterator0 = transformedList0.new TransformedListIterator(listIterator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      transformedList_TransformedListIterator0.add(linkedList1);
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      linkedList0.add("Qt");
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      String string0 = transformedList0.remove(0);
      assertEquals("Qt", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      linkedList0.add("Qt");
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      transformedList0.listIterator(0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apache.commons.collections4.list.TransformedList$TransformedListIterator");
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) constantTransformer0);
      ListIterator<String> listIterator0 = transformedList0.listIterator(0);
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      linkedList0.add("Qt");
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      transformedList0.listIterator();
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedList<Predicate<Object>> transformedList0 = new TransformedList<Predicate<Object>>(linkedList0, transformer0);
      List<Predicate<Object>> list0 = transformedList0.getList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Transformer<Integer, Integer> transformer0 = NOPTransformer.nopTransformer();
      linkedList0.add((Integer) null);
      TransformedList<Integer> transformedList0 = TransformedList.transformingList((List<Integer>) linkedList0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      List<Integer> list0 = transformedList0.getList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("");
      // Undeclared exception!
      try { 
        TransformedList.transformingList((List<String>) null, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      linkedList0.add("");
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionFactory invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Transformer> class0 = Transformer.class;
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>((Predicate<? super Object>) null);
      linkedList0.add((Object) class0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsFalsePredicate0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsFalsePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer<Object, Integer> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends Integer>) hashMap0);
      // Undeclared exception!
      try { 
        TransformedList.transformedList((List<Integer>) null, (Transformer<? super Integer, ? extends Integer>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.subList(306, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 5
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1);
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      TransformedList<Object> transformedList0 = TransformedList.transformingList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.subList(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedList<Object> transformedList0 = new TransformedList<Object>(linkedList0, transformer0);
      // Undeclared exception!
      try { 
        transformedList0.set(2733, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.InvokerTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>(linkedList0);
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(identityPredicate0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(notPredicate0);
      Boolean boolean0 = predicateTransformer0.transform((String) null);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      TransformedList<Boolean> transformedList0 = new TransformedList<Boolean>(linkedList0, transformer0);
      // Undeclared exception!
      try { 
        transformedList0.addAll((-1), (Collection<? extends Boolean>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Transformer<Integer, Object>> linkedList0 = new LinkedList<Transformer<Integer, Object>>();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Transformer<Integer, Object> transformer0 = ConstantTransformer.nullTransformer();
      Transformer<Object, Transformer<Integer, Object>> transformer1 = InvokerTransformer.invokerTransformer("", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformedList<Transformer<Integer, Object>> transformedList0 = TransformedList.transformingList((List<Transformer<Integer, Object>>) linkedList0, (Transformer<? super Transformer<Integer, Object>, ? extends Transformer<Integer, Object>>) transformer1);
      // Undeclared exception!
      try { 
        transformedList0.add(0, transformer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '' on 'class org.apache.commons.collections4.functors.ConstantTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.constantTransformer(predicate0);
      TransformedList<Predicate<Object>> transformedList0 = TransformedList.transformedList((List<Predicate<Object>>) linkedList0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.add((-3976), predicate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3976, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<LinkedList<Object>> linkedList0 = new LinkedList<LinkedList<Object>>();
      TransformedList<LinkedList<Object>> transformedList0 = null;
      try {
        transformedList0 = new TransformedList<LinkedList<Object>>(linkedList0, (Transformer<? super LinkedList<Object>, ? extends LinkedList<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Transformer<Object, Predicate<Object>> transformer0 = ConstantTransformer.constantTransformer((Predicate<Object>) instanceofPredicate0);
      TransformedList<Predicate<Object>> transformedList0 = TransformedList.transformingList((List<Predicate<Object>>) linkedList0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      TransformedList<Predicate<Object>> transformedList1 = new TransformedList<Predicate<Object>>(transformedList0, transformer0);
      boolean boolean0 = transformedList1.equals(transformedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsFalsePredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      Object object0 = new Object();
      boolean boolean0 = transformedList0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      linkedList0.add("Qt");
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      boolean boolean0 = transformedList0.addAll(0, (Collection<? extends String>) transformedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      List<String> list0 = transformedList0.subList(0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Transformer<Object, Closure<Object>> transformer0 = ExceptionTransformer.exceptionTransformer();
      TransformedList<Closure<Object>> transformedList0 = new TransformedList<Closure<Object>>(linkedList0, transformer0);
      Integer integer0 = new Integer((-3083));
      int int0 = transformedList0.lastIndexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<String, String> transformer0 = ConstantTransformer.nullTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      transformedList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("");
      TransformedList<Object> transformedList0 = new TransformedList<Object>(linkedList0, transformer0);
      ListIterator<Object> listIterator0 = transformedList0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      boolean boolean0 = transformedList0.addAll(0, (Collection<? extends String>) transformedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<String, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformingList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.set(2, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      transformedList0.add(0, "4'y~=Yx`We-)\"$Ofx");
      assertTrue(transformedList0.contains("4'y~=Yx`We-)\"$Ofx"));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Factory<String> factory0 = ExceptionFactory.exceptionFactory();
      Transformer<Object, String> transformer0 = FactoryTransformer.factoryTransformer((Factory<? extends String>) factory0);
      TransformedList<String> transformedList0 = TransformedList.transformedList((List<String>) linkedList0, (Transformer<? super String, ? extends String>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.remove((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsFalsePredicate0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      TransformedList<Boolean> transformedList0 = TransformedList.transformingList((List<Boolean>) linkedList0, (Transformer<? super Boolean, ? extends Boolean>) transformer0);
      // Undeclared exception!
      try { 
        transformedList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Class<Transformer> class0 = Transformer.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(instanceofPredicate0);
      Transformer<Object, Boolean> transformer0 = PredicateTransformer.predicateTransformer((Predicate<? super Object>) nullIsFalsePredicate0);
      TransformedList<Object> transformedList0 = TransformedList.transformedList((List<Object>) linkedList0, (Transformer<? super Object, ?>) transformer0);
      LinkedList<Predicate<Object>> linkedList1 = new LinkedList<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer1 = InvokerTransformer.invokerTransformer("h_|:@>:0C_mdCV-P");
      TransformedList<Predicate<Object>> transformedList1 = TransformedList.transformingList((List<Predicate<Object>>) linkedList1, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer1);
      Predicate<Transformer<Boolean, Object>> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Transformer<Boolean, Object>>>) transformedList1);
      int int0 = transformedList0.indexOf(predicate0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<LinkedList<String>> linkedList0 = new LinkedList<LinkedList<String>>();
      HashMap<Object, LinkedList<String>> hashMap0 = new HashMap<Object, LinkedList<String>>();
      Transformer<Object, LinkedList<String>> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends LinkedList<String>>) hashMap0);
      TransformedList<LinkedList<String>> transformedList0 = TransformedList.transformedList((List<LinkedList<String>>) linkedList0, (Transformer<? super LinkedList<String>, ? extends LinkedList<String>>) transformer0);
      ListIterator<LinkedList<String>> listIterator0 = (ListIterator<LinkedList<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      TransformedList.TransformedListIterator transformedList_TransformedListIterator0 = transformedList0.new TransformedListIterator(listIterator0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      transformedList_TransformedListIterator0.set(linkedList1);
      assertFalse(transformedList0.contains(linkedList1));
  }
}
