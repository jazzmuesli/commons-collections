/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:50:10 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.UnaryOperator;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CursorableLinkedList_ESTest extends CursorableLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.checkModCount();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      AbstractLinkedList.LinkedSubList<Locale.LanguageRange> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale.LanguageRange>(cursorableLinkedList0, 0, 0);
      cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CursorableLinkedList<List<Integer>> cursorableLinkedList0 = new CursorableLinkedList<List<Integer>>();
      AbstractLinkedList.Node<List<Integer>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<List<Integer>>();
      cursorableLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.nextIndex();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      cursorableLinkedList0.size = 2574;
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 1, 31);
      CursorableLinkedList.SubCursor<String> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<String>(abstractLinkedList_LinkedSubList0, 31);
      cursorableLinkedList_SubCursor0.hasNext();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      CursorableLinkedList.Cursor<WeakReference<Integer>> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<WeakReference<Integer>>(cursorableLinkedList0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(linkedList0);
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = cursorableLinkedList_SubCursor0.next;
      cursorableLinkedList_Cursor0.nodeChanged(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.nextIndex();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      cursorableLinkedList0.registerCursor((CursorableLinkedList.Cursor<WeakReference<Integer>>) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CursorableLinkedList<CursorableLinkedList.Cursor<Object>> cursorableLinkedList0 = new CursorableLinkedList<CursorableLinkedList.Cursor<Object>>();
      cursorableLinkedList0.init();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CursorableLinkedList<List<String>> cursorableLinkedList0 = new CursorableLinkedList<List<String>>();
      cursorableLinkedList0.cursor(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      Integer integer0 = new Integer(1036);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.updateNode((AbstractLinkedList.Node<Integer>) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>("org.apache.commons.collections4.list.AbstractLinkedList");
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeCachingLinkedList<List<String>> nodeCachingLinkedList0 = new NodeCachingLinkedList<List<String>>();
      CursorableLinkedList<List<String>> cursorableLinkedList0 = new CursorableLinkedList<List<String>>(nodeCachingLinkedList0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator((-1046));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-1046) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(0);
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(nodeCachingLinkedList0);
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (16) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(91);
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>(nodeCachingLinkedList0);
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>((AbstractLinkedList.Node<String>) null, (AbstractLinkedList.Node<String>) null, (String) null);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNode(abstractLinkedList_Node0, (AbstractLinkedList.Node<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = null;
      try {
        cursorableLinkedList0 = new CursorableLinkedList<Integer>((Collection<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorableLinkedList<CursorableLinkedList.Cursor<Integer>> cursorableLinkedList0 = new CursorableLinkedList<CursorableLinkedList.Cursor<Integer>>();
      cursorableLinkedList0.iterator();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(set0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.cursor(1082);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1082) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      cursorableLinkedList_SubCursor0.hasPrevious();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorableLinkedList<WeakReference<Integer>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<Integer>>();
      CursorableLinkedList.Cursor<WeakReference<Integer>> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<WeakReference<Integer>>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.valid = false;
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>();
      cursorableLinkedList_Cursor0.nodeInserted(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CursorableLinkedList<WeakReference<String>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<String>>();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      WeakReference<String> weakReference0 = new WeakReference<String>("Y'\"a/", referenceQueue0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cursorableLinkedList0.sort(comparator0);
      cursorableLinkedList0.addLast(weakReference0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.nodeRemoved((AbstractLinkedList.Node<String>) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList_Cursor0);
      cursorableLinkedList1.cursor();
      cursorableLinkedList1.broadcastNodeInserted(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CursorableLinkedList<WeakReference<String>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<String>>();
      ReferenceQueue<Object> referenceQueue0 = new ReferenceQueue<Object>();
      WeakReference<String> weakReference0 = new WeakReference<String>("Y'\"a/", referenceQueue0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      cursorableLinkedList0.sort(comparator0);
      AbstractLinkedList.Node<WeakReference<String>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<WeakReference<String>>((AbstractLinkedList.Node<WeakReference<String>>) null, (AbstractLinkedList.Node<WeakReference<String>>) null, weakReference0);
      cursorableLinkedList0.broadcastNodeRemoved(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(set0);
      cursorableLinkedList0.listIterator();
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.close();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(set0);
      CursorableLinkedList.Cursor<Object> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Object>(cursorableLinkedList0, 0);
      cursorableLinkedList_Cursor0.close();
      // Undeclared exception!
      try { 
        cursorableLinkedList_Cursor0.checkModCount();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // Cursor closed
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$Cursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CursorableLinkedList<WeakReference<String>> cursorableLinkedList0 = new CursorableLinkedList<WeakReference<String>>();
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>();
      cursorableLinkedList1.addFirst(nodeCachingLinkedList0);
      cursorableLinkedList1.clear();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(set0);
      cursorableLinkedList0.removeAllNodes();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      CursorableLinkedList.SubCursor<Integer> cursorableLinkedList_SubCursor0 = new CursorableLinkedList.SubCursor<Integer>(abstractLinkedList_LinkedSubList0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList_SubCursor0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      abstractLinkedList_LinkedSubList0.replaceAll(unaryOperator0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      cursorableLinkedList0.listIterator(0);
      cursorableLinkedList0.broadcastNodeChanged(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      Integer integer0 = new Integer(0);
      cursorableLinkedList_Cursor0.add(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      Integer integer0 = new Integer(0);
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>(cursorableLinkedList_Cursor0);
      cursorableLinkedList1.updateNode(abstractLinkedList_Node0, integer0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = cursorableLinkedList0.cursor();
      cursorableLinkedList0.unregisterCursor(cursorableLinkedList_Cursor0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NodeCachingLinkedList<List<String>> nodeCachingLinkedList0 = new NodeCachingLinkedList<List<String>>((-1201));
      CursorableLinkedList<Object> cursorableLinkedList0 = new CursorableLinkedList<Object>(nodeCachingLinkedList0);
      NodeCachingLinkedList<Object> nodeCachingLinkedList1 = new NodeCachingLinkedList<Object>();
      AbstractLinkedList.LinkedSubList<Object> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Object>(nodeCachingLinkedList1, 0, 0);
      // Undeclared exception!
      try { 
        cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.collections4.list.NodeCachingLinkedList cannot be cast to org.apache.commons.collections4.list.CursorableLinkedList
         //
         verifyException("org.apache.commons.collections4.list.CursorableLinkedList$SubCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      cursorableLinkedList0.removeNode(abstractLinkedList_Node0);
      CursorableLinkedList<Object> cursorableLinkedList1 = null;
      try {
        cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      Integer integer0 = new Integer(1434);
      abstractLinkedList_LinkedSubList0.add(integer0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      abstractLinkedList_LinkedSubList0.replaceAll(unaryOperator0);
      assertTrue(abstractLinkedList_LinkedSubList0.contains(1434));
  }
}
