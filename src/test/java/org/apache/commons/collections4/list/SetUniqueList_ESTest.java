/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:44:13 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.apache.commons.collections4.list.SetUniqueList;
import org.apache.commons.collections4.list.UnmodifiableList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SetUniqueList_ESTest extends SetUniqueList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      linkedList0.add((Object) setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      setUniqueList2.remove((Object) setUniqueList1);
      setUniqueList2.removeAll(hashSet0);
      setUniqueList2.indexOf(setUniqueList0);
      Object object0 = new Object();
      setUniqueList0.iterator();
      linkedList0.push(setUniqueList0);
      hashSet0.add(object0);
      // Undeclared exception!
      try { 
        setUniqueList2.set(0, setUniqueList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.removeFirstOccurrence(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, linkedHashSet0);
      setUniqueList2.listIterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.offerFirst("Gv)Zf]y?tzmMeQ");
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      setUniqueList1.createSetBasedOnList(linkedHashSet0, setUniqueList2);
      // Undeclared exception!
      try { 
        setUniqueList3.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      linkedList0.add((Object) setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        setUniqueList1.removeAll(hashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      linkedList0.add((Object) setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        setUniqueList0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Set<Integer> set0 = new HashSet<Integer>();
      setUniqueList0.createSetBasedOnList(set0, linkedList0);
      Set<Integer> set1 = setUniqueList0.asSet();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(linkedList0, set1);
      // Undeclared exception!
      try { 
        setUniqueList1.retainAll(set1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      Object object0 = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        setUniqueList1.addAll((-3), (Collection<?>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      Object object0 = null;
      int int0 = 0;
      LinkedList<String> linkedList2 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList((List<String>) linkedList2);
      // Undeclared exception!
      try { 
        setUniqueList2.retainAll(setUniqueList3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        setUniqueList2.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((Collection<?>) linkedList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      linkedList0.add((Object) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      setUniqueList2.removeAll(hashSet0);
      setUniqueList1.clear();
      setUniqueList2.indexOf(setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList2.set(0, setUniqueList1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(0);
      linkedList0.offerLast(integer1);
      linkedList0.pollFirst();
      Integer integer2 = new Integer((-3));
      setUniqueList0.add(integer2);
      LinkedList<SetUniqueList<Object>> linkedList1 = new LinkedList<SetUniqueList<Object>>();
      HashSet<SetUniqueList<Object>> hashSet0 = new HashSet<SetUniqueList<Object>>();
      SetUniqueList<SetUniqueList<Object>> setUniqueList1 = new SetUniqueList<SetUniqueList<Object>>(linkedList1, hashSet0);
      SetUniqueList<SetUniqueList<Object>> setUniqueList2 = SetUniqueList.setUniqueList((List<SetUniqueList<Object>>) setUniqueList1);
      SetUniqueList<SetUniqueList<Object>> setUniqueList3 = SetUniqueList.setUniqueList((List<SetUniqueList<Object>>) setUniqueList2);
      setUniqueList3.iterator();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList4 = SetUniqueList.setUniqueList((List<Object>) linkedList2);
      SetUniqueList<Object> setUniqueList5 = SetUniqueList.setUniqueList((List<Object>) setUniqueList4);
      setUniqueList5.containsAll(linkedList0);
      LinkedList<UnmodifiableList<Object>> linkedList3 = new LinkedList<UnmodifiableList<Object>>();
      LinkedHashSet<UnmodifiableList<Object>> linkedHashSet0 = new LinkedHashSet<UnmodifiableList<Object>>();
      // Undeclared exception!
      try { 
        setUniqueList0.removeIf((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      Integer integer0 = new Integer(0);
      setUniqueList1.remove((Object) integer0);
      setUniqueList2.add((Object) null);
      setUniqueList1.asSet();
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<HashSet<Object>>) linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(hashSet0);
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      HashSet<Object> hashSet1 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet1);
      hashSet1.add("");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.and(predicate2);
      setUniqueList2.removeIf(predicate3);
      setUniqueList1.addAll(0, (Collection<?>) hashSet1);
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>(0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList3 = new SetUniqueList<LinkedHashSet<Object>>(linkedList1, linkedHashSet1);
      ListIterator<LinkedHashSet<Object>> listIterator0 = setUniqueList3.listIterator();
      assertFalse(listIterator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      Set<String> set0 = setUniqueList0.asSet();
      SetUniqueList<String> setUniqueList1 = new SetUniqueList<String>(setUniqueList0, set0);
      int int0 = 0;
      SetUniqueList<String> setUniqueList2 = SetUniqueList.setUniqueList((List<String>) setUniqueList1);
      Predicate<String> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate0.or(predicate1);
      // Undeclared exception!
      try { 
        setUniqueList2.removeIf(predicate2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.set.UnmodifiableSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      Integer integer0 = new Integer(0);
      setUniqueList1.remove((Object) integer0);
      setUniqueList2.contains(setUniqueList2);
      setUniqueList1.asSet();
      // Undeclared exception!
      try { 
        setUniqueList0.subList((-1952), (-28));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1952
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.clear();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) setUniqueList1;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) setUniqueList1;
      objectArray0[3] = (Object) setUniqueList1;
      objectArray0[4] = (Object) hashSet0;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ListIterator<HashSet<String>> listIterator0 = (ListIterator<HashSet<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(listIterator0).next();
      LinkedHashSet<HashSet<String>> linkedHashSet1 = new LinkedHashSet<HashSet<String>>();
      SetUniqueList.SetListListIterator<HashSet<String>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<String>>(listIterator0, linkedHashSet1);
      SetUniqueList.SetListIterator<HashSet<String>> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<HashSet<String>>(setUniqueList_SetListListIterator0, linkedHashSet1);
      HashSet<String> hashSet1 = setUniqueList_SetListIterator0.next();
      objectArray0[5] = (Object) hashSet1;
      objectArray0[6] = (Object) setUniqueList1;
      objectArray0[7] = (Object) linkedList0;
      setUniqueList1.toArray(objectArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      SetUniqueList<String> setUniqueList2 = new SetUniqueList<String>(linkedList1, linkedHashSet2);
      setUniqueList2.parallelStream();
      int int0 = 0;
      List<String> list0 = setUniqueList2.subList(0, 0);
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList(list0);
      SetUniqueList<String> setUniqueList4 = SetUniqueList.setUniqueList((List<String>) setUniqueList3);
      linkedList1.push("");
      String string0 = "Kb39K4/ tl)qp4r";
      // Undeclared exception!
      try { 
        setUniqueList4.subList(0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      HashSet<String> hashSet0 = new HashSet<String>();
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList1, hashSet0);
      hashSet0.add("~|2/wkQ5k_%f");
      SetUniqueList<String> setUniqueList1 = new SetUniqueList<String>(setUniqueList0, hashSet0);
      linkedList0.add((Object) setUniqueList1);
      linkedList0.add((Object) linkedHashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      boolean boolean0 = setUniqueList2.retainAll(linkedHashSet0);
      boolean boolean1 = setUniqueList2.remove((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList0);
      HashSet<HashSet<String>> hashSet0 = new HashSet<HashSet<String>>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedList0.add((HashSet<String>) linkedHashSet0);
      SetUniqueList<HashSet<String>> setUniqueList1 = new SetUniqueList<HashSet<String>>(setUniqueList0, hashSet0);
      boolean boolean0 = setUniqueList1.addAll((Collection<? extends HashSet<String>>) setUniqueList0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListIterator<HashSet<String>> listIterator0 = (ListIterator<HashSet<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      LinkedHashSet<HashSet<String>> linkedHashSet0 = new LinkedHashSet<HashSet<String>>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      linkedHashSet0.add(linkedHashSet1);
      SetUniqueList.SetListListIterator<HashSet<String>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<String>>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.add(linkedHashSet1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      setUniqueList_SetListListIterator0.forEachRemaining(consumer0);
      SetUniqueList.SetListIterator<HashSet<String>> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<HashSet<String>>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListIterator0.remove();
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(linkedHashSet1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      hashSet0.add(linkedList0);
      linkedList0.add(hashSet0);
      SetUniqueList<HashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<Object>>) linkedList0);
      // Undeclared exception!
      try { 
        setUniqueList0.containsAll(linkedList0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      List<String> list0 = setUniqueList0.decorated();
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("");
      SetUniqueList<String> setUniqueList1 = new SetUniqueList<String>(list0, hashSet0);
      SetUniqueList<String> setUniqueList2 = new SetUniqueList<String>(setUniqueList1, hashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      setUniqueList2.sort(comparator0);
      setUniqueList2.listIterator(0);
      LinkedList<HashSet<String>> linkedList1 = new LinkedList<HashSet<String>>();
      linkedList1.add(hashSet0);
      SetUniqueList<HashSet<String>> setUniqueList3 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList1);
      setUniqueList3.add((-3260), hashSet0);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      int int0 = (-636);
      Integer integer0 = new Integer((-636));
      linkedList0.add(integer0);
      int int1 = (-246);
      Integer integer1 = new Integer((-246));
      hashSet0.add(integer1);
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, hashSet0);
      int int2 = 0;
      setUniqueList0.remove(0);
      int int3 = (-2357);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-2357), (Collection<? extends Integer>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2357, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(linkedList0, hashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList2 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList1, hashSet0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(0);
      setUniqueList1.add(linkedHashSet0);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList3 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      setUniqueList3.removeAll(linkedList1);
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList4 = SetUniqueList.setUniqueList((List<Object>) linkedList2);
      SetUniqueList<Object> setUniqueList5 = new SetUniqueList<Object>(setUniqueList4, linkedHashSet0);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, (Set<Integer>) null);
      setUniqueList_SetListListIterator0.next();
      setUniqueList5.add(0, (Object) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<HashSet<Object>> hashSet0 = new HashSet<HashSet<Object>>();
      HashSet<Object> hashSet1 = new HashSet<Object>();
      linkedList0.offerLast(hashSet1);
      SetUniqueList<HashSet<Object>> setUniqueList0 = new SetUniqueList<HashSet<Object>>(linkedList0, hashSet0);
      SetUniqueList<HashSet<Object>> setUniqueList1 = new SetUniqueList<HashSet<Object>>(setUniqueList0, hashSet0);
      setUniqueList1.removeAll(setUniqueList0);
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      HashSet<Integer> hashSet2 = new HashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet2);
      setUniqueList_SetListListIterator0.next();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList2 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      Iterator<String> iterator0 = setUniqueList2.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      hashSet0.add(linkedList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      hashSet0.add(linkedList0);
      Integer integer0 = new Integer(0);
      setUniqueList1.add((Object) integer0);
      setUniqueList1.listIterator(0);
      assertEquals(2, hashSet0.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      linkedList0.add("");
      List<String> list0 = setUniqueList0.decorated();
      linkedList0.add("");
      linkedList0.addLast("");
      Set<String> set0 = setUniqueList0.asSet();
      SetUniqueList<String> setUniqueList1 = new SetUniqueList<String>(list0, set0);
      setUniqueList1.containsAll(linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList2 = null;
      try {
        setUniqueList2 = new SetUniqueList<Object>((List<Object>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.iterator();
      ListIterator<LinkedHashSet<Integer>> listIterator0 = (ListIterator<LinkedHashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Integer>>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.next();
      SetUniqueList.SetListIterator<LinkedHashSet<Integer>> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<LinkedHashSet<Integer>>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListIterator0.remove();
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet1 = new LinkedHashSet<LinkedHashSet<Object>>(linkedList1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(linkedList1, linkedHashSet1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList2 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList3 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList2, linkedHashSet1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList4 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList3, linkedHashSet1);
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      boolean boolean0 = setUniqueList4.add(linkedHashSet2);
      assertFalse(linkedHashSet1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, linkedHashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      // Undeclared exception!
      try { 
        setUniqueList2.subList(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, linkedHashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      SetUniqueList<Object> setUniqueList3 = SetUniqueList.setUniqueList((List<Object>) setUniqueList2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) setUniqueList1);
      setUniqueList0.add((Object) "");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      // Undeclared exception!
      try { 
        setUniqueList2.addAll(1091, (Collection<?>) setUniqueList3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1091, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) setUniqueList0);
      setUniqueList0.listIterator();
      setUniqueList1.removeAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, hashSet0);
      setUniqueList_SetListListIterator0.previousIndex();
      setUniqueList_SetListListIterator0.add(hashSet0);
      String string0 = "Ga2@4}ZlbVD*^AVT$C'";
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set("Ga2@4}ZlbVD*^AVT$C'");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet0);
      Integer integer0 = new Integer(0);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.add(linkedHashSet0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      LinkedHashSet<LinkedHashSet<Object>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Object>>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      linkedList0.add(linkedHashSet1);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = new SetUniqueList<LinkedHashSet<Object>>(linkedList0, linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet2 = new LinkedHashSet<Object>();
      linkedList0.add(linkedHashSet2);
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(setUniqueList0, linkedHashSet0);
      setUniqueList1.indexOf("&,7B~B/\"W{");
      setUniqueList1.listIterator();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      linkedList1.add((Object) linkedHashSet2);
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, linkedHashSet2);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.clear();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) setUniqueList1;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) setUniqueList1;
      objectArray0[3] = (Object) setUniqueList1;
      objectArray0[4] = (Object) hashSet0;
      ListIterator<HashSet<String>> listIterator0 = (ListIterator<HashSet<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      LinkedHashSet<HashSet<String>> linkedHashSet0 = new LinkedHashSet<HashSet<String>>();
      SetUniqueList.SetListListIterator<HashSet<String>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<String>>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<HashSet<String>> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<HashSet<String>>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListIterator0.next();
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) setUniqueList1;
      objectArray0[7] = (Object) linkedList0;
      setUniqueList1.toArray(objectArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      SetUniqueList<String> setUniqueList2 = new SetUniqueList<String>(linkedList1, linkedHashSet1);
      setUniqueList2.parallelStream();
      List<String> list0 = setUniqueList2.subList(0, 0);
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList(list0);
      SetUniqueList<String> setUniqueList4 = SetUniqueList.setUniqueList((List<String>) setUniqueList3);
      linkedList1.push("");
      // Undeclared exception!
      try { 
        setUniqueList4.add(0, "Kb39K4/ tl)qp4r");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Set<Integer> set0 = null;
      setUniqueList0.subList(0, 0);
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedList0.retainAll(linkedHashSet0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.toArray();
      int int0 = 1;
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        setUniqueList0.add(1, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<LinkedHashSet<Object>> linkedList0 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList0 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        setUniqueList0.set(1876, linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1876, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<HashSet<String>> linkedList0 = new LinkedList<HashSet<String>>();
      SetUniqueList<HashSet<String>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<String>>) linkedList0);
      setUniqueList0.listIterator();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) linkedList1);
      setUniqueList1.iterator();
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = new Integer(1351);
      linkedHashSet0.add(integer0);
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.previous();
      LinkedList<LinkedHashSet<Object>> linkedList2 = new LinkedList<LinkedHashSet<Object>>();
      HashSet<LinkedHashSet<Object>> hashSet0 = new HashSet<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList2 = new SetUniqueList<LinkedHashSet<Object>>(linkedList2, hashSet0);
      setUniqueList2.listIterator();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList((List<String>) linkedList3);
      SetUniqueList<String> setUniqueList4 = SetUniqueList.setUniqueList((List<String>) setUniqueList3);
      SetUniqueList<String> setUniqueList5 = SetUniqueList.setUniqueList((List<String>) setUniqueList4);
      List<String> list0 = setUniqueList5.decorated();
      HashSet<String> hashSet1 = new HashSet<String>();
      SetUniqueList<String> setUniqueList6 = new SetUniqueList<String>(list0, hashSet1);
      // Undeclared exception!
      try { 
        setUniqueList6.remove(1351);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1351, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList0.subList(1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      Set<String> set0 = setUniqueList0.asSet();
      SetUniqueList<String> setUniqueList1 = new SetUniqueList<String>(linkedList0, set0);
      // Undeclared exception!
      try { 
        setUniqueList1.set(1, "f%,^0* k&dtC^9Ho");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      ListIterator<LinkedHashSet<Integer>> listIterator0 = (ListIterator<LinkedHashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      LinkedHashSet<LinkedHashSet<Integer>> linkedHashSet0 = new LinkedHashSet<LinkedHashSet<Integer>>();
      SetUniqueList.SetListListIterator<LinkedHashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<LinkedHashSet<Integer>>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.previous();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      setUniqueList0.removeIf(predicate2);
      ListIterator<Object> listIterator1 = setUniqueList0.listIterator();
      assertFalse(listIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      SetUniqueList<Integer> setUniqueList1 = SetUniqueList.setUniqueList((List<Integer>) setUniqueList0);
      setUniqueList1.contains("org.apache.commons.collections4.list.AbstractSerializableListDecorator");
      // Undeclared exception!
      try { 
        setUniqueList0.remove((-778));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -778, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet0);
      setUniqueList_SetListListIterator0.remove();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      linkedList0.addAll(0, (Collection<?>) setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      boolean boolean0 = setUniqueList1.containsAll(hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ListIterator<HashSet<String>> listIterator0 = (ListIterator<HashSet<String>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(listIterator0).next();
      doReturn(0).when(listIterator0).nextIndex();
      SetUniqueList.SetListListIterator<HashSet<String>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<String>>(listIterator0, (Set<HashSet<String>>) null);
      setUniqueList_SetListListIterator0.nextIndex();
      setUniqueList_SetListListIterator0.next();
      HashSet<String> hashSet0 = setUniqueList_SetListListIterator0.next();
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, (Set<Object>) null);
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator1 = new SetUniqueList.SetListListIterator<Object>(setUniqueList_SetListListIterator0, (Set<Object>) null);
      LinkedList<HashSet<Integer>> linkedList1 = new LinkedList<HashSet<Integer>>();
      SetUniqueList<HashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<Integer>>) linkedList1);
      SetUniqueList<HashSet<Integer>> setUniqueList1 = SetUniqueList.setUniqueList((List<HashSet<Integer>>) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList1.listIterator(1457);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1457, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      hashSet0.add(setUniqueList1);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      setUniqueList2.addAll((Collection<?>) setUniqueList0);
      // Undeclared exception!
      try { 
        setUniqueList0.listIterator(2717);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2717, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("SSBdC");
      ListIterator<String> listIterator0 = linkedList0.listIterator(0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, linkedHashSet0);
      SetUniqueList.SetListIterator<String> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<String>(setUniqueList_SetListListIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.nextIndex();
      setUniqueList_SetListIterator0.next();
      setUniqueList_SetListIterator0.remove();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      ListIterator<Object> listIterator1 = linkedList1.listIterator(0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListIterator<Object> setUniqueList_SetListIterator1 = new SetUniqueList.SetListIterator<Object>(listIterator1, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      SetUniqueList<Object> setUniqueList3 = new SetUniqueList<Object>(setUniqueList2, hashSet0);
      setUniqueList3.clear();
      assertTrue(setUniqueList3.equals((Object)setUniqueList1));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      linkedList0.parallelStream();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, linkedHashSet0);
      setUniqueList0.remove((Object) linkedList0);
      setUniqueList0.createSetBasedOnList(linkedHashSet0, linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>(setUniqueList0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList1, hashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      SetUniqueList<Object> setUniqueList3 = SetUniqueList.setUniqueList((List<Object>) setUniqueList2);
      setUniqueList3.listIterator();
      setUniqueList1.addAll(0, (Collection<?>) setUniqueList0);
      setUniqueList1.listIterator(0);
      boolean boolean0 = setUniqueList3.addAll((Collection<?>) setUniqueList0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList1);
      Predicate.isEqual((Object) null);
      boolean boolean1 = setUniqueList1.removeIf(predicate0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.listIterator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      ListIterator<String> listIterator0 = linkedList1.listIterator();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      Set<String> set0 = setUniqueList0.asSet();
      SetUniqueList.SetListListIterator<String> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<String>(listIterator0, set0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(linkedList1, linkedHashSet0);
      Set<Integer> set0 = setUniqueList0.createSetBasedOnList(linkedHashSet0, setUniqueList1);
      Set<Integer> set1 = setUniqueList0.createSetBasedOnList(set0, setUniqueList1);
      SetUniqueList<Integer> setUniqueList2 = new SetUniqueList<Integer>(linkedList0, set1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      setUniqueList2.toArray(stringArray0);
      int int0 = 1327;
      // Undeclared exception!
      try { 
        setUniqueList2.addAll(1327, (Collection<? extends Integer>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1327, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.spliterator();
      Set<Integer> set0 = null;
      // Undeclared exception!
      try { 
        setUniqueList0.createSetBasedOnList((Set<Integer>) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList0 = SetUniqueList.setUniqueList((List<String>) linkedList0);
      String string0 = "";
      setUniqueList0.add("");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(linkedList1, linkedHashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      SetUniqueList<Object> setUniqueList3 = SetUniqueList.setUniqueList((List<Object>) setUniqueList2);
      SetUniqueList<Object> setUniqueList4 = new SetUniqueList<Object>(setUniqueList3, linkedHashSet0);
      linkedHashSet0.add(linkedList1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      setUniqueList3.forEach(consumer0);
      setUniqueList4.toArray();
      setUniqueList3.createSetBasedOnList(linkedHashSet0, setUniqueList2);
      int int0 = (-3423);
      // Undeclared exception!
      try { 
        setUniqueList4.add((-3423), (Object) linkedHashSet0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      ListIterator<Integer> listIterator0 = setUniqueList0.listIterator();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      SetUniqueList.SetListIterator<Integer> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Integer>(listIterator0, linkedHashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, hashSet0);
      Set<Integer> set0 = setUniqueList0.createSetBasedOnList(hashSet0, linkedList0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, hashSet0);
      setUniqueList_SetListListIterator0.nextIndex();
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.set(listIterator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashSet<String> hashSet0 = new HashSet<String>();
      SetUniqueList<String> setUniqueList0 = new SetUniqueList<String>(linkedList0, hashSet0);
      boolean boolean0 = setUniqueList0.addAll((Collection<? extends String>) linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set<Integer> set0 = null;
      SetUniqueList<Integer> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<Integer>(linkedList0, (Set<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      setUniqueList0.contains(linkedList0);
      boolean boolean0 = setUniqueList0.add((Object) "'@]");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SetUniqueList<HashSet<Object>> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<HashSet<Object>>((List<HashSet<Object>>) null, (Set<HashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Object>(listIterator0, hashSet0);
      SetUniqueList.SetListIterator<Object> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Object>(setUniqueList_SetListListIterator0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Iterator<Integer> iterator0 = setUniqueList0.iterator();
      assertNotNull(iterator0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      SetUniqueList.SetListIterator<Integer> setUniqueList_SetListIterator0 = new SetUniqueList.SetListIterator<Integer>(iterator0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ListIterator<HashSet<Object>> listIterator0 = (ListIterator<HashSet<Object>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<HashSet<Object>> linkedHashSet0 = new LinkedHashSet<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedHashSet0.add(hashSet0);
      SetUniqueList.SetListListIterator<HashSet<Object>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<Object>>(listIterator0, linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      setUniqueList_SetListListIterator0.add(linkedHashSet1);
      List<SetUniqueList.SetListListIterator<Object>> list0 = null;
      LinkedHashSet<SetUniqueList.SetListListIterator<Object>> linkedHashSet2 = new LinkedHashSet<SetUniqueList.SetListListIterator<Object>>();
      SetUniqueList<HashSet<Object>> setUniqueList0 = null;
      try {
        setUniqueList0 = new SetUniqueList<HashSet<Object>>((List<HashSet<Object>>) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Integer integer0 = new Integer((-636));
      linkedList0.add(integer0);
      Integer integer1 = new Integer((-246));
      hashSet0.add(integer1);
      SetUniqueList<Integer> setUniqueList0 = new SetUniqueList<Integer>(linkedList0, hashSet0);
      setUniqueList0.remove(0);
      // Undeclared exception!
      try { 
        setUniqueList0.addAll((-2357), (Collection<? extends Integer>) hashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2357, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Integer integer0 = new Integer((-3));
      Integer integer1 = new Integer((-3));
      setUniqueList0.add(integer1);
      LinkedList<SetUniqueList<Object>> linkedList1 = new LinkedList<SetUniqueList<Object>>();
      HashSet<SetUniqueList<Object>> hashSet0 = new HashSet<SetUniqueList<Object>>();
      SetUniqueList<SetUniqueList<Object>> setUniqueList1 = new SetUniqueList<SetUniqueList<Object>>(linkedList1, hashSet0);
      SetUniqueList<SetUniqueList<Object>> setUniqueList2 = SetUniqueList.setUniqueList((List<SetUniqueList<Object>>) setUniqueList1);
      SetUniqueList<SetUniqueList<Object>> setUniqueList3 = SetUniqueList.setUniqueList((List<SetUniqueList<Object>>) setUniqueList2);
      setUniqueList3.iterator();
      LinkedList<Object> linkedList2 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList4 = SetUniqueList.setUniqueList((List<Object>) linkedList2);
      setUniqueList4.containsAll(linkedList0);
      assertEquals(1, linkedList0.size());
      
      LinkedList<UnmodifiableList<Object>> linkedList3 = new LinkedList<UnmodifiableList<Object>>();
      SetUniqueList<UnmodifiableList<Object>> setUniqueList5 = SetUniqueList.setUniqueList((List<UnmodifiableList<Object>>) linkedList3);
      LinkedHashSet<UnmodifiableList<Object>> linkedHashSet0 = new LinkedHashSet<UnmodifiableList<Object>>();
      SetUniqueList<UnmodifiableList<Object>> setUniqueList6 = new SetUniqueList<UnmodifiableList<Object>>(setUniqueList5, linkedHashSet0);
      boolean boolean0 = setUniqueList6.containsAll(hashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ListIterator<HashSet<Integer>> listIterator0 = (ListIterator<HashSet<Integer>>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      LinkedHashSet<HashSet<Integer>> linkedHashSet0 = new LinkedHashSet<HashSet<Integer>>();
      SetUniqueList.SetListListIterator<HashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<Integer>>(listIterator0, linkedHashSet0);
      setUniqueList_SetListListIterator0.remove();
      setUniqueList_SetListListIterator0.add((HashSet<Integer>) null);
      List<LinkedHashSet<String>> list0 = null;
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<LinkedHashSet<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1733));
      linkedList0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        setUniqueList0.sort(comparator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ListIterator does not support set
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList$SetListListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1733));
      linkedList0.add(integer0);
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      setUniqueList0.listIterator();
      LinkedList<LinkedHashSet<Object>> linkedList1 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList1 = null;
      try {
        setUniqueList1 = new SetUniqueList<LinkedHashSet<Object>>(linkedList1, (Set<LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Set must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      linkedList0.add(hashSet0);
      int int0 = (-1);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      hashSet0.add(linkedList1);
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList1, hashSet0);
      hashSet0.remove("org.apache.commons.collections4.list.AbstractSerializableListDecorator");
      linkedList1.offerLast(setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, hashSet0);
      hashSet0.retainAll(setUniqueList0);
      Integer integer0 = new Integer(0);
      setUniqueList1.remove((Object) integer0);
      setUniqueList2.add((Object) null);
      setUniqueList2.asSet();
      int int1 = (-1931);
      // Undeclared exception!
      try { 
        setUniqueList0.subList((-1931), (-28));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1931
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<HashSet<Object>> linkedList0 = new LinkedList<HashSet<Object>>();
      HashSet<HashSet<Object>> hashSet0 = new HashSet<HashSet<Object>>();
      HashSet<Object> hashSet1 = new HashSet<Object>();
      linkedList0.offerLast(hashSet1);
      linkedList0.add(hashSet1);
      SetUniqueList<HashSet<Object>> setUniqueList0 = new SetUniqueList<HashSet<Object>>(linkedList0, hashSet0);
      hashSet0.stream();
      SetUniqueList<HashSet<Object>> setUniqueList1 = new SetUniqueList<HashSet<Object>>(setUniqueList0, hashSet0);
      setUniqueList1.removeAll(setUniqueList0);
      Integer integer0 = new Integer((-1571));
      ListIterator<Integer> listIterator0 = (ListIterator<Integer>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(listIterator0).next();
      HashSet<Integer> hashSet2 = new HashSet<Integer>();
      SetUniqueList.SetListListIterator<Integer> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<Integer>(listIterator0, hashSet2);
      setUniqueList_SetListListIterator0.next();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList2 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      setUniqueList2.toArray();
      setUniqueList2.iterator();
      setUniqueList2.add("org.apache.commons.collections4.set.AbstractSerializableSetDecorator");
      setUniqueList2.retainAll(linkedList0);
      LinkedList<LinkedHashSet<Object>> linkedList2 = new LinkedList<LinkedHashSet<Object>>();
      SetUniqueList<LinkedHashSet<Object>> setUniqueList3 = SetUniqueList.setUniqueList((List<LinkedHashSet<Object>>) linkedList2);
      ListIterator<Object> listIterator1 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      SetUniqueList.SetListListIterator<Object> setUniqueList_SetListListIterator1 = new SetUniqueList.SetListListIterator<Object>(listIterator1, hashSet1);
      setUniqueList3.contains(setUniqueList_SetListListIterator1);
      // Undeclared exception!
      try { 
        setUniqueList2.set((-1571), "Set must not be null");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1571, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      SetUniqueList<Object> setUniqueList0 = SetUniqueList.setUniqueList((List<Object>) linkedList0);
      SetUniqueList<Object> setUniqueList1 = SetUniqueList.setUniqueList((List<Object>) setUniqueList0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      SetUniqueList<Object> setUniqueList2 = new SetUniqueList<Object>(setUniqueList1, linkedHashSet0);
      setUniqueList2.listIterator();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      SetUniqueList<String> setUniqueList3 = SetUniqueList.setUniqueList((List<String>) linkedList1);
      Set<Object> set0 = setUniqueList1.createSetBasedOnList(linkedHashSet0, setUniqueList2);
      setUniqueList3.containsAll(set0);
      setUniqueList3.retainAll(linkedHashSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "#JAnn^WV");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      setUniqueList2.removeIf(predicate2);
      // Undeclared exception!
      try { 
        SetUniqueList.setUniqueList((List<HashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // List must not be null
         //
         verifyException("org.apache.commons.collections4.list.SetUniqueList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      SetUniqueList<Object> setUniqueList0 = new SetUniqueList<Object>(linkedList0, hashSet0);
      linkedList0.add((Object) setUniqueList0);
      SetUniqueList<Object> setUniqueList1 = new SetUniqueList<Object>(setUniqueList0, hashSet0);
      SetUniqueList<Object> setUniqueList2 = SetUniqueList.setUniqueList((List<Object>) setUniqueList1);
      setUniqueList2.removeAll(hashSet0);
      setUniqueList2.indexOf(setUniqueList0);
      Object object0 = new Object();
      setUniqueList0.iterator();
      linkedList0.push(setUniqueList0);
      hashSet0.add(object0);
      // Undeclared exception!
      try { 
        setUniqueList2.set(0, setUniqueList1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<HashSet<Integer>> linkedList0 = new LinkedList<HashSet<Integer>>();
      SetUniqueList<HashSet<Integer>> setUniqueList0 = SetUniqueList.setUniqueList((List<HashSet<Integer>>) linkedList0);
      HashSet<HashSet<Integer>> hashSet0 = new HashSet<HashSet<Integer>>();
      SetUniqueList<HashSet<Integer>> setUniqueList1 = new SetUniqueList<HashSet<Integer>>(setUniqueList0, hashSet0);
      ListIterator<HashSet<Integer>> listIterator0 = setUniqueList1.listIterator(0);
      SetUniqueList.SetListListIterator<HashSet<Integer>> setUniqueList_SetListListIterator0 = new SetUniqueList.SetListListIterator<HashSet<Integer>>(listIterator0, hashSet0);
      // Undeclared exception!
      try { 
        setUniqueList_SetListListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SetUniqueList<Integer> setUniqueList0 = SetUniqueList.setUniqueList((List<Integer>) linkedList0);
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      Set<Integer> set0 = setUniqueList0.createSetBasedOnList(hashSet0, linkedList0);
      Set<Integer> set1 = setUniqueList0.createSetBasedOnList(set0, linkedList0);
      Set<Integer> set2 = setUniqueList0.createSetBasedOnList(set1, linkedList0);
      SetUniqueList<Integer> setUniqueList1 = new SetUniqueList<Integer>(linkedList0, set2);
      boolean boolean0 = setUniqueList1.retainAll(set2);
      assertFalse(boolean0);
      assertNotSame(set2, set1);
      
      LinkedHashSet<HashSet<Object>> linkedHashSet0 = new LinkedHashSet<HashSet<Object>>();
      HashSet<Object> hashSet1 = new HashSet<Object>(4286);
      Integer integer0 = new Integer(4286);
      boolean boolean1 = hashSet1.add(integer0);
      assertFalse(boolean1 == boolean0);
  }
}
