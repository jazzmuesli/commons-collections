/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:50:39 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.apache.commons.collections4.list.TreeList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TreeList_ESTest extends TreeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      boolean boolean1 = treeList0.addAll((Collection<?>) linkedList0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = treeList0.toArray();
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertNotNull(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerLast("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offerFirst("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean3 = linkedList0.retainAll(treeList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = linkedList0.add(object0);
      assertTrue(linkedList0.contains(object0));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        treeList0.get((-1248));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1248, size=3
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      treeList_TreeListIterator0.remove();
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      
      integerArray0[5] = null;
      integerArray0[6] = null;
      Integer[] integerArray1 = treeList0.toArray(integerArray0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray1.length);
      assertEquals(7, integerArray0.length);
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        treeList0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = treeList0.contains((Object) null);
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
      
      treeList0.add(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      
      Integer integer0 = treeList0.set(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNull(integer0);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      
      treeList_TreeListIterator0.set(integer1);
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      treeList_TreeListIterator0.checkModCount();
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      Stream<Integer> stream0 = treeList0.stream();
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotNull(stream0);
      
      Integer integer2 = treeList_TreeListIterator0.previous();
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      
      boolean boolean1 = treeList_TreeListIterator0.hasNext();
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      boolean boolean2 = treeList1.addAll(0, (Collection<?>) treeList0);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ListIterator<Object> listIterator0 = treeList1.listIterator();
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      boolean boolean3 = treeList1.remove((Object) null);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = treeList1.containsAll(treeList0);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      boolean boolean5 = treeList1.remove((Object) null);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      
      Stream<Integer> stream1 = treeList0.parallelStream();
      assertTrue(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertFalse(stream1.equals((Object)stream0));
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      assertTrue(treeList0.contains(0));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator1.previousIndex());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals(0, treeList_TreeListIterator1.nextIndex());
      assertEquals(2, treeList1.size());
      assertNotNull(treeList_TreeListIterator1);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      
      boolean boolean1 = treeList0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerLast("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) "tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offerFirst("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean3 = linkedList0.retainAll(treeList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = linkedList0.add(object0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "tree inconsistent!");
      assertNotNull(predicate0);
      
      boolean boolean5 = treeList0.removeIf(predicate0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertFalse(treeList0.contains("tree inconsistent!"));
      assertEquals(4, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      
      // Undeclared exception!
      try { 
        treeList0.get((-1224));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1224, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer(917);
      assertNotNull(integer0);
      assertEquals(917, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(917));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Integer) null);
      assertTrue(linkedList0.contains(917));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertTrue(linkedList0.contains(917));
      assertTrue(treeList0.contains(917));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(917));
      assertTrue(treeList0.contains(917));
      assertFalse(treeList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      Object object0 = treeList_TreeListIterator0.next();
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(917));
      assertTrue(treeList0.contains(917));
      assertFalse(treeList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertNotNull(object0);
      assertEquals(917, object0);
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertTrue(linkedList0.contains(917));
      assertTrue(treeList0.contains(917));
      assertFalse(treeList0.contains(0));
      assertEquals(2, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      TreeList<String> treeList2 = new TreeList<String>(treeList1);
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      assertTrue(treeList2.equals((Object)treeList1));
      
      Iterator<String> iterator0 = treeList2.iterator();
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertNotSame(treeList1, treeList2);
      assertNotSame(treeList2, treeList1);
      assertNotNull(iterator0);
      assertTrue(treeList1.equals((Object)treeList2));
      assertTrue(treeList2.equals((Object)treeList1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = treeList0.contains((Object) null);
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
      
      treeList0.add(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      
      Integer integer0 = treeList0.set(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNull(integer0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Stream<Integer> stream0 = treeList0.stream();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotNull(stream0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      boolean boolean1 = treeList1.addAll(0, (Collection<?>) treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ListIterator<Object> listIterator0 = treeList1.listIterator();
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      boolean boolean2 = treeList1.remove((Object) null);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = treeList1.containsAll(treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      boolean boolean4 = treeList1.remove((Object) null);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList1.size());
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      Stream<Integer> stream1 = treeList0.parallelStream();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertFalse(stream1.equals((Object)stream0));
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList1.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertTrue(treeList_TreeListIterator0.hasNext());
      
      Object object0 = treeList0.remove(1);
      assertFalse(linkedList0.contains(1));
      assertFalse(treeList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      treeList_TreeListIterator0.add(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      LinkedList linkedList1 = (LinkedList)treeList0.remove(1);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, linkedList1.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("org.apache.commons.collections4.list.TreeList$1");
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertTrue(treeList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      List<String> list0 = treeList0.subList(0, 0);
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertTrue(treeList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertFalse(list0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Iterator<String> iterator0 = treeList0.iterator();
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertTrue(treeList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(iterator0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, (-3303));
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertTrue(treeList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-3304), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-3303), treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      TreeList<Object> treeList1 = new TreeList<Object>();
      assertFalse(treeList1.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      Object[] objectArray0 = treeList1.toArray();
      assertFalse(treeList1.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(0, treeList1.size());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      int int0 = treeList0.indexOf("org.apache.commons.collections4.list.TreeList$1");
      assertTrue(linkedList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertTrue(treeList0.contains("org.apache.commons.collections4.list.TreeList$1"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        treeList1.get((-3303));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-3303, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<Object> treeList1 = new TreeList<Object>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      treeList1.add(0, (Object) null);
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList1.size());
      
      Object[] objectArray0 = treeList1.toArray();
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList1.size());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList1.size());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      Object object0 = treeList_TreeListIterator0.next();
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList1.size());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertNull(object0);
      
      int int0 = treeList0.lastIndexOf((Object) null);
      assertEquals(0, treeList0.size());
      assertEquals((-1), int0);
      
      TreeList<Integer> treeList2 = new TreeList<Integer>(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Integer>(treeList2, (-1));
      assertFalse(linkedList0.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList2.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-2), treeList_TreeListIterator1.previousIndex());
      assertEquals((-1), treeList_TreeListIterator1.nextIndex());
      assertNotNull(treeList_TreeListIterator1);
      
      treeList_TreeListIterator1.checkModCount();
      assertFalse(linkedList0.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList2.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-2), treeList_TreeListIterator1.previousIndex());
      assertEquals((-1), treeList_TreeListIterator1.nextIndex());
      
      int int1 = treeList_TreeListIterator1.nextIndex();
      assertFalse(linkedList0.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList2.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-2), treeList_TreeListIterator1.previousIndex());
      assertEquals((-1), treeList_TreeListIterator1.nextIndex());
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        treeList0.listIterator(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      boolean boolean1 = treeList0.retainAll(treeList1);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = treeList0.addAll((Collection<?>) linkedList0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.add((Object) null);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      
      Object object0 = treeList0.remove(1);
      assertFalse(linkedList0.contains(1));
      assertFalse(treeList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) treeList0);
      assertEquals(0, treeList0.size());
      assertNotNull(predicate0);
      
      Predicate<Integer> predicate1 = predicate0.negate();
      assertEquals(0, treeList0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      assertEquals(0, treeList0.size());
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Integer> predicate3 = predicate1.negate();
      assertEquals(0, treeList0.size());
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Integer integer0 = new Integer(1583);
      assertNotNull(integer0);
      assertEquals(1583, (int)integer0);
      
      boolean boolean0 = treeList0.isEmpty();
      assertFalse(treeList0.contains(integer0));
      assertEquals(0, treeList0.size());
      assertTrue(boolean0);
      
      treeList0.clear();
      assertFalse(treeList0.contains(integer0));
      assertEquals(0, treeList0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TreeList<String> treeList1 = new TreeList<String>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList1.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      assertSame(unaryOperator1, unaryOperator0);
      assertNotNull(unaryOperator1);
      
      Function<Object, Object> function0 = Function.identity();
      assertNotNull(function0);
      
      treeList1.replaceAll(unaryOperator0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList1.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList1.size());
      assertSame(unaryOperator0, unaryOperator1);
      
      String string0 = linkedList0.pollLast();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean2 = treeList1.addAll((Collection<? extends String>) linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertTrue(treeList1.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList1.size());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      TreeList<Object> treeList2 = new TreeList<Object>(treeList0);
      assertFalse(treeList0.contains(integer0));
      assertFalse(treeList2.contains(1583));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      
      int int0 = (-2623);
      // Undeclared exception!
      try { 
        treeList2.set((-2623), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-2623, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = treeList0.add((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) "Un:66F{q]K$lLLFC8");
      assertTrue(linkedList0.contains("Un:66F{q]K$lLLFC8"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = treeList0.addAll((Collection<?>) linkedList0);
      assertTrue(linkedList0.contains("Un:66F{q]K$lLLFC8"));
      assertTrue(treeList0.contains("Un:66F{q]K$lLLFC8"));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = treeList0.size();
      assertTrue(linkedList0.contains("Un:66F{q]K$lLLFC8"));
      assertTrue(treeList0.contains("Un:66F{q]K$lLLFC8"));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(2, int0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      Iterator<Integer> iterator0 = treeList1.iterator();
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList1.size());
      assertNotNull(iterator0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        treeList0.add((-1), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1, size=2
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      Stream<String> stream0 = treeList0.parallelStream();
      assertEquals(0, treeList0.size());
      assertNotNull(stream0);
      
      boolean boolean0 = treeList0.add("");
      assertTrue(treeList0.contains(""));
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertTrue(treeList0.contains(""));
      assertTrue(treeList1.contains(""));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      treeList1.add(0, (Object) integer0);
      assertTrue(treeList0.contains(""));
      assertTrue(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      
      Object[] objectArray0 = treeList0.toArray();
      assertTrue(treeList0.contains(""));
      assertEquals(1, treeList0.size());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Object[] objectArray1 = treeList0.toArray();
      assertTrue(treeList0.contains(""));
      assertEquals(1, treeList0.size());
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(1, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addFirst("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<String> treeList1 = new TreeList<String>(treeList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertTrue(treeList1.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      ListIterator<String> listIterator0 = treeList1.listIterator(1);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertTrue(treeList1.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList1, treeList0);
      assertNotNull(listIterator0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
      
      TreeList<Integer> treeList2 = new TreeList<Integer>();
      assertFalse(treeList2.contains(1));
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      treeList2.sort(comparator0);
      assertFalse(treeList2.contains(1));
      assertEquals(0, treeList2.size());
      
      // Undeclared exception!
      try { 
        treeList2.set(1, (Integer) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 0;
      List<String> list0 = treeList0.subList(0, 0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int int1 = 0;
      ListIterator<String> listIterator0 = treeList0.listIterator(0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean1 = treeList0.retainAll(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ListIterator<String> listIterator1 = treeList0.listIterator();
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(listIterator1.hasPrevious());
      assertTrue(listIterator1.hasNext());
      assertNotSame(listIterator1, listIterator0);
      assertNotNull(listIterator1);
      assertFalse(listIterator1.equals((Object)listIterator0));
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set("2J6,n,2=`7$S");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "";
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(string0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertNotNull(treeList0);
      
      ListIterator<Object> listIterator0 = treeList0.listIterator();
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        treeList0.subList((-348), 20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -348
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      // Undeclared exception!
      try { 
        treeList0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      String string0 = "";
      treeList0.add(0, (Object) "");
      assertFalse(treeList0.contains(0));
      assertTrue(treeList0.contains(""));
      assertEquals(1, treeList0.size());
      
      int int0 = treeList0.lastIndexOf("");
      assertFalse(treeList0.contains(0));
      assertTrue(treeList0.contains(""));
      assertEquals(1, treeList0.size());
      assertEquals(0, int0);
      
      int int1 = 275;
      // Undeclared exception!
      try { 
        treeList0.remove(275);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:275, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 2;
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      String string0 = "@g5bowOD9mbY";
      boolean boolean0 = treeList1.add("@g5bowOD9mbY");
      assertTrue(treeList1.contains("@g5bowOD9mbY"));
      assertEquals(1, treeList1.size());
      assertTrue(boolean0);
      
      int int1 = 1;
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 1);
      assertTrue(treeList1.contains("@g5bowOD9mbY"));
      assertEquals(1, treeList1.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      treeList_TreeListIterator0.add("");
      assertTrue(treeList1.contains("@g5bowOD9mbY"));
      assertEquals(2, treeList1.size());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 560;
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 560);
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(560, treeList_TreeListIterator0.nextIndex());
      assertEquals(559, treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      ListIterator<String> listIterator0 = treeList1.listIterator(0);
      assertEquals(0, treeList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = null;
      linkedList0.addFirst((String) null);
      assertEquals(1, linkedList0.size());
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, (-509));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals((-510), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-509), treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string1 = "";
      boolean boolean0 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.forEachRemaining(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 1579);
      assertFalse(treeList0.contains(1579));
      assertEquals(0, treeList0.size());
      assertEquals(1579, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1578, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertFalse(treeList0.contains(1579));
      assertEquals(0, treeList0.size());
      assertEquals(1579, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1578, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(1579, int0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      assertFalse(treeList1.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      assertTrue(treeList2.equals((Object)treeList1));
      
      Integer integer0 = new Integer(975);
      assertNotNull(integer0);
      assertEquals(975, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = treeList1.add(integer0);
      assertTrue(treeList1.contains(integer0));
      assertFalse(treeList1.contains(int0));
      assertEquals(1, treeList1.size());
      assertNotSame(treeList1, treeList2);
      assertTrue(boolean0);
      assertFalse(treeList1.equals((Object)treeList2));
      assertFalse(integer0.equals((Object)int0));
      
      TreeList<Integer> treeList3 = new TreeList<Integer>(treeList2);
      assertTrue(treeList1.contains(integer0));
      assertFalse(treeList1.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertFalse(treeList3.contains(int0));
      assertEquals(1, treeList1.size());
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotNull(treeList3);
      assertFalse(treeList1.equals((Object)treeList2));
      assertFalse(treeList2.equals((Object)treeList1));
      assertFalse(treeList3.equals((Object)treeList1));
      assertTrue(treeList3.equals((Object)treeList2));
      
      boolean boolean1 = treeList0.addAll((Collection<?>) treeList3);
      assertFalse(treeList0.contains(1579));
      assertTrue(treeList1.contains(integer0));
      assertFalse(treeList1.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertFalse(treeList3.contains(int0));
      assertEquals(0, treeList0.size());
      assertEquals(1, treeList1.size());
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotSame(treeList1, treeList2);
      assertNotSame(treeList1, treeList3);
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList2, treeList1);
      assertNotSame(treeList3, treeList2);
      assertNotSame(treeList3, treeList1);
      assertFalse(boolean1);
      assertFalse(treeList1.equals((Object)treeList2));
      assertFalse(treeList1.equals((Object)treeList3));
      assertTrue(treeList2.equals((Object)treeList3));
      assertFalse(treeList2.equals((Object)treeList1));
      assertFalse(treeList3.equals((Object)treeList1));
      assertTrue(treeList3.equals((Object)treeList2));
      assertFalse(boolean1 == boolean0);
      
      TreeList<String> treeList4 = new TreeList<String>();
      assertEquals(0, treeList4.size());
      assertNotNull(treeList4);
      
      treeList3.clear();
      assertTrue(treeList1.contains(integer0));
      assertFalse(treeList1.contains(int0));
      assertFalse(treeList2.contains(int0));
      assertFalse(treeList3.contains(int0));
      assertEquals(1, treeList1.size());
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotSame(treeList1, treeList2);
      assertNotSame(treeList1, treeList3);
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList2, treeList1);
      assertNotSame(treeList3, treeList2);
      assertNotSame(treeList3, treeList1);
      assertFalse(treeList1.equals((Object)treeList2));
      assertFalse(treeList1.equals((Object)treeList3));
      assertTrue(treeList2.equals((Object)treeList3));
      assertFalse(treeList2.equals((Object)treeList1));
      assertFalse(treeList3.equals((Object)treeList1));
      assertTrue(treeList3.equals((Object)treeList2));
      
      // Undeclared exception!
      try { 
        treeList4.listIterator((-2181));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-2181, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<Integer> treeList0 = new TreeList<Integer>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals(0, int0);
      
      TreeList<Object> treeList1 = new TreeList<Object>();
      assertFalse(treeList1.contains(0));
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList1, (-3445));
      assertFalse(treeList1.contains((-3445)));
      assertEquals(0, treeList1.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertEquals((-3446), treeList_TreeListIterator1.previousIndex());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-3445), treeList_TreeListIterator1.nextIndex());
      assertNotNull(treeList_TreeListIterator1);
      
      treeList_TreeListIterator1.checkModCount();
      assertFalse(treeList1.contains((-3445)));
      assertEquals(0, treeList1.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertEquals((-3446), treeList_TreeListIterator1.previousIndex());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-3445), treeList_TreeListIterator1.nextIndex());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
      
      treeList_TreeListIterator0.checkModCount();
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList1, treeList0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = treeList0.add((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      int int0 = treeList0.size();
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(1, int0);
      
      int int1 = (-1);
      // Undeclared exception!
      try { 
        treeList0.add((-1), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1, size=1
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      Stream<Object> stream0 = treeList0.parallelStream();
      assertEquals(0, treeList0.size());
      assertNotNull(stream0);
      
      int int0 = treeList0.size();
      assertEquals(0, treeList0.size());
      assertEquals(0, int0);
      
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      treeList1.add(0, "Already at start of list.");
      assertTrue(treeList1.contains("Already at start of list."));
      assertEquals(1, treeList1.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Already at start of list."));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = treeList1.addAll((Collection<? extends String>) linkedList0);
      assertTrue(treeList1.contains("Already at start of list."));
      assertFalse(linkedList0.contains("Already at start of list."));
      assertEquals(1, treeList1.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = null;
      try {
        treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>((TreeList<Integer>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>(treeList0);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      TreeList<Integer> treeList2 = new TreeList<Integer>(treeList1);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList2, 0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertFalse(treeList2.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList0.equals((Object)treeList2));
      assertTrue(treeList1.equals((Object)treeList0));
      assertTrue(treeList1.equals((Object)treeList2));
      assertTrue(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
      
      boolean boolean0 = treeList_TreeListIterator0.hasPrevious();
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertFalse(treeList2.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotSame(treeList0, treeList2);
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList1, treeList2);
      assertNotSame(treeList1, treeList0);
      assertNotSame(treeList2, treeList1);
      assertNotSame(treeList2, treeList0);
      assertFalse(boolean0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList0.equals((Object)treeList2));
      assertTrue(treeList1.equals((Object)treeList0));
      assertTrue(treeList1.equals((Object)treeList2));
      assertTrue(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((String) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 1595);
      assertTrue(linkedList0.contains(""));
      assertTrue(treeList0.contains(""));
      assertEquals(2, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1595, treeList_TreeListIterator0.nextIndex());
      assertEquals(1594, treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.add((String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1595, size=2
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 2;
      treeList0.clear();
      assertEquals(0, treeList0.size());
      
      boolean boolean0 = treeList0.add("R/o3v5<l#50riM");
      assertTrue(treeList0.contains("R/o3v5<l#50riM"));
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 2);
      assertTrue(treeList0.contains("R/o3v5<l#50riM"));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 2.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      boolean boolean0 = treeList0.addAll((Collection<?>) treeList1);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList1, treeList0);
      assertFalse(boolean0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<String> treeList1 = new TreeList<String>(treeList0);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      Object[] objectArray0 = treeList1.toArray();
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList1, treeList0);
      assertNotNull(objectArray0);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
      assertEquals(0, objectArray0.length);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, (-1));
      assertEquals(0, treeList0.size());
      assertEquals((-2), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      assertTrue(treeList0.equals((Object)treeList1));
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      // Undeclared exception!
      try { 
        treeList0.remove(2429);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2429, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 2856;
      Stream<String> stream0 = treeList0.stream();
      assertEquals(0, treeList0.size());
      assertNotNull(stream0);
      
      ListIterator<String> listIterator0 = treeList0.listIterator();
      assertEquals(0, treeList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        treeList0.set(2856, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2856, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      treeList0.replaceAll(unaryOperator0);
      assertEquals(0, treeList0.size());
      
      boolean boolean0 = treeList0.add((Object) "Invalid index:");
      assertTrue(treeList0.contains("Invalid index:"));
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      boolean boolean1 = treeList0.retainAll(treeList1);
      assertFalse(treeList0.contains("Invalid index:"));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = 2;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList0.forEach(consumer0);
      assertFalse(treeList0.contains("Invalid index:"));
      assertEquals(0, treeList0.size());
      
      // Undeclared exception!
      try { 
        treeList0.add(2, (Object) "WQj%SXMdh*+tn)fCA /");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:2, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, (-967));
      assertEquals(0, treeList1.size());
      assertEquals((-968), treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-967), treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) treeList0);
      assertEquals(0, treeList0.size());
      assertNotNull(predicate0);
      
      Predicate<Integer> predicate1 = predicate0.negate();
      assertEquals(0, treeList0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      assertEquals(0, treeList0.size());
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Integer> predicate3 = predicate1.negate();
      assertEquals(0, treeList0.size());
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Integer integer0 = new Integer(1583);
      assertNotNull(integer0);
      assertEquals(1583, (int)integer0);
      
      boolean boolean0 = treeList0.add(integer0);
      assertTrue(treeList0.contains(1583));
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = treeList0.removeIf(predicate1);
      assertFalse(treeList0.contains(1583));
      assertEquals(0, treeList0.size());
      assertNotSame(predicate1, predicate3);
      assertTrue(boolean1);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertTrue(boolean1 == boolean0);
      
      treeList0.clear();
      assertFalse(treeList0.contains(1583));
      assertEquals(0, treeList0.size());
      
      // Undeclared exception!
      try { 
        treeList0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:0, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = linkedList0.addAll((Collection<? extends String>) treeList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add("");
      assertTrue(linkedList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 2471);
      assertTrue(linkedList0.contains(""));
      assertFalse(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(2471, treeList_TreeListIterator0.nextIndex());
      assertEquals(2470, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      boolean boolean2 = treeList_TreeListIterator0.hasNext();
      assertTrue(linkedList0.contains(""));
      assertFalse(treeList0.contains(""));
      assertEquals(1, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(2471, treeList_TreeListIterator0.nextIndex());
      assertEquals(2470, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Collection<String> collection0 = null;
      TreeList<Object> treeList0 = null;
      try {
        treeList0 = new TreeList<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 1;
      Spliterator<Object> spliterator0 = treeList0.spliterator();
      assertEquals(0, treeList0.size());
      assertNotNull(spliterator0);
      
      String string0 = "";
      TreeList<Object> treeList1 = new TreeList<Object>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      treeList1.clear();
      assertEquals(0, treeList1.size());
      assertNotSame(treeList1, treeList0);
      assertTrue(treeList1.equals((Object)treeList0));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean0 = predicate2.test(treeList1);
      assertFalse(treeList1.contains(""));
      assertEquals(0, treeList1.size());
      assertNotSame(treeList1, treeList0);
      assertFalse(boolean0);
      assertTrue(treeList1.equals((Object)treeList0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean1 = treeList1.removeIf(predicate2);
      assertFalse(treeList1.contains(""));
      assertEquals(0, treeList1.size());
      assertNotSame(treeList1, treeList0);
      assertFalse(boolean1);
      assertTrue(treeList1.equals((Object)treeList0));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        treeList1.get(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = treeList0.size();
      assertEquals(0, treeList0.size());
      assertEquals(0, int0);
      
      TreeList<Integer> treeList1 = new TreeList<Integer>();
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      int int1 = treeList1.indexOf(treeList0);
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      treeList1.clear();
      assertFalse(treeList1.contains(int0));
      assertEquals(0, treeList1.size());
      
      TreeList<Object> treeList2 = new TreeList<Object>(treeList0);
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList2, 0);
      assertFalse(treeList2.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList2.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      int int2 = treeList_TreeListIterator0.previousIndex();
      assertFalse(treeList2.contains(0));
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList2.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, (-1));
      assertFalse(treeList0.contains((-1)));
      assertEquals(0, treeList0.size());
      assertEquals((-2), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      boolean boolean0 = treeList_TreeListIterator0.hasNext();
      assertFalse(treeList0.contains((-1)));
      assertEquals(0, treeList0.size());
      assertEquals((-2), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.nextIndex());
      assertTrue(boolean0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList0, (-1));
      assertFalse(treeList0.contains((-1)));
      assertEquals(0, treeList0.size());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-1), treeList_TreeListIterator1.nextIndex());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertEquals((-2), treeList_TreeListIterator1.previousIndex());
      assertNotNull(treeList_TreeListIterator1);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList<String> treeList1 = new TreeList<String>(treeList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      assertTrue(treeList1.equals((Object)treeList0));
      
      TreeList<String> treeList2 = new TreeList<String>(treeList1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      assertTrue(treeList0.equals((Object)treeList1));
      assertTrue(treeList1.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
      
      boolean boolean0 = treeList0.add(",adhvu'~XPBv(n{F;a=");
      assertFalse(linkedList0.contains(",adhvu'~XPBv(n{F;a="));
      assertTrue(treeList0.contains(",adhvu'~XPBv(n{F;a="));
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList0, treeList2);
      assertTrue(boolean0);
      assertFalse(treeList0.equals((Object)treeList1));
      assertFalse(treeList0.equals((Object)treeList2));
      
      TreeList<String> treeList3 = new TreeList<String>(treeList2);
      assertFalse(linkedList0.contains(",adhvu'~XPBv(n{F;a="));
      assertTrue(treeList0.contains(",adhvu'~XPBv(n{F;a="));
      assertFalse(treeList1.contains(",adhvu'~XPBv(n{F;a="));
      assertFalse(treeList2.contains(",adhvu'~XPBv(n{F;a="));
      assertFalse(treeList3.contains(",adhvu'~XPBv(n{F;a="));
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotNull(treeList3);
      assertFalse(treeList0.equals((Object)treeList1));
      assertFalse(treeList0.equals((Object)treeList2));
      assertTrue(treeList1.equals((Object)treeList2));
      assertFalse(treeList1.equals((Object)treeList0));
      assertFalse(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
      assertTrue(treeList3.equals((Object)treeList2));
      assertTrue(treeList3.equals((Object)treeList1));
      assertFalse(treeList3.equals((Object)treeList0));
      
      boolean boolean1 = treeList3.addAll((Collection<? extends String>) treeList0);
      assertFalse(linkedList0.contains(",adhvu'~XPBv(n{F;a="));
      assertTrue(treeList0.contains(",adhvu'~XPBv(n{F;a="));
      assertFalse(treeList1.contains(",adhvu'~XPBv(n{F;a="));
      assertFalse(treeList2.contains(",adhvu'~XPBv(n{F;a="));
      assertTrue(treeList3.contains(",adhvu'~XPBv(n{F;a="));
      assertEquals(0, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertEquals(0, treeList1.size());
      assertEquals(0, treeList2.size());
      assertEquals(1, treeList3.size());
      assertNotSame(treeList0, treeList1);
      assertNotSame(treeList0, treeList2);
      assertNotSame(treeList0, treeList3);
      assertNotSame(treeList1, treeList2);
      assertNotSame(treeList1, treeList3);
      assertNotSame(treeList1, treeList0);
      assertNotSame(treeList2, treeList0);
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList2, treeList1);
      assertNotSame(treeList3, treeList1);
      assertNotSame(treeList3, treeList2);
      assertNotSame(treeList3, treeList0);
      assertTrue(boolean1);
      assertFalse(treeList0.equals((Object)treeList1));
      assertFalse(treeList0.equals((Object)treeList2));
      assertTrue(treeList0.equals((Object)treeList3));
      assertFalse(treeList1.equals((Object)treeList3));
      assertTrue(treeList1.equals((Object)treeList2));
      assertFalse(treeList1.equals((Object)treeList0));
      assertFalse(treeList2.equals((Object)treeList0));
      assertTrue(treeList2.equals((Object)treeList1));
      assertFalse(treeList2.equals((Object)treeList3));
      assertFalse(treeList3.equals((Object)treeList1));
      assertTrue(treeList3.equals((Object)treeList0));
      assertFalse(treeList3.equals((Object)treeList2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TreeList<String> treeList0 = new TreeList<String>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No element at index 0.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = 44;
      Integer[] integerArray0 = new Integer[1];
      int int1 = (-1624);
      Integer integer0 = new Integer((-1624));
      assertNotNull(integer0);
      assertEquals((-1624), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = treeList0.toArray(integerArray0);
      assertFalse(treeList0.contains((-1624)));
      assertEquals(0, treeList0.size());
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      Stream<Object> stream0 = treeList0.parallelStream();
      assertFalse(treeList0.contains((-1624)));
      assertEquals(0, treeList0.size());
      assertNotNull(stream0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 44);
      assertFalse(treeList0.contains(44));
      assertEquals(0, treeList0.size());
      assertEquals(43, treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(44, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TreeList<Object> treeList0 = new TreeList<Object>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = treeList0.add((Object) integer0);
      assertTrue(treeList0.contains((-1)));
      assertEquals(1, treeList0.size());
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)int0));
      
      Object[] objectArray0 = treeList0.toArray();
      assertTrue(treeList0.contains((-1)));
      assertEquals(1, treeList0.size());
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      TreeList<String> treeList1 = new TreeList<String>();
      assertEquals(0, treeList1.size());
      assertNotNull(treeList1);
      
      ListIterator<String> listIterator0 = treeList1.listIterator();
      assertEquals(0, treeList1.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      TreeList<Integer> treeList2 = new TreeList<Integer>();
      assertFalse(treeList2.contains((-1)));
      assertEquals(0, treeList2.size());
      assertNotNull(treeList2);
      
      TreeList<Integer> treeList3 = new TreeList<Integer>(treeList2);
      assertFalse(treeList2.contains((-1)));
      assertFalse(treeList3.contains((-1)));
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotNull(treeList3);
      assertTrue(treeList3.equals((Object)treeList2));
      
      Iterator<Integer> iterator0 = treeList3.iterator();
      assertFalse(treeList2.contains((-1)));
      assertFalse(treeList3.contains((-1)));
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList3, treeList2);
      assertNotNull(iterator0);
      assertTrue(treeList2.equals((Object)treeList3));
      assertTrue(treeList3.equals((Object)treeList2));
      
      boolean boolean1 = treeList3.retainAll(treeList2);
      assertFalse(treeList2.contains((-1)));
      assertFalse(treeList3.contains((-1)));
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList3, treeList2);
      assertFalse(boolean1);
      assertTrue(treeList2.equals((Object)treeList3));
      assertTrue(treeList3.equals((Object)treeList2));
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray1 = treeList3.toArray();
      assertFalse(treeList2.contains((-1)));
      assertFalse(treeList3.contains((-1)));
      assertEquals(0, treeList2.size());
      assertEquals(0, treeList3.size());
      assertNotSame(treeList2, treeList3);
      assertNotSame(treeList3, treeList2);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertTrue(treeList2.equals((Object)treeList3));
      assertTrue(treeList3.equals((Object)treeList2));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(0, objectArray1.length);
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList1, 0);
      assertEquals(0, treeList1.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.set("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean0 = treeList0.contains((Object) null);
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
      
      treeList0.add(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      
      Integer integer0 = treeList0.set(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNull(integer0);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      treeList_TreeListIterator0.checkModCount();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      
      Stream<Integer> stream0 = treeList0.stream();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotNull(stream0);
      
      Integer integer1 = treeList_TreeListIterator0.previous();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertNull(integer1);
      
      boolean boolean1 = treeList_TreeListIterator0.hasNext();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      TreeList<Object> treeList1 = new TreeList<Object>(treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList1);
      
      boolean boolean2 = treeList1.addAll(0, (Collection<?>) treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ListIterator<Object> listIterator0 = treeList1.listIterator();
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      boolean boolean3 = treeList1.remove((Object) null);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = treeList1.add((Object) treeList0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(2, treeList1.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      boolean boolean5 = treeList1.remove((Object) null);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals(1, treeList1.size());
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      Stream<Integer> stream1 = treeList0.parallelStream();
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertFalse(stream1.equals((Object)stream0));
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList1, 0);
      assertFalse(treeList0.contains(0));
      assertFalse(treeList1.contains(0));
      assertEquals(1, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator1.previousIndex());
      assertEquals(0, treeList_TreeListIterator1.nextIndex());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals(1, treeList1.size());
      assertNotNull(treeList_TreeListIterator1);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator1.previous();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Already at start of list.
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      Object object0 = null;
      boolean boolean0 = treeList0.contains((Object) null);
      assertEquals(0, treeList0.size());
      assertFalse(boolean0);
      
      int int0 = 0;
      treeList0.add(0, (Integer) null);
      assertFalse(treeList0.contains(0));
      assertEquals(1, treeList0.size());
      
      int int1 = 0;
      Integer integer0 = treeList0.set(0, (Integer) null);
      assertFalse(treeList0.contains(int0));
      assertEquals(1, treeList0.size());
      assertNull(integer0);
      
      TreeList.TreeListIterator<Integer> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Integer>(treeList0, 0);
      assertFalse(treeList0.contains(int0));
      assertEquals(1, treeList0.size());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerLast("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add((Object) "tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.offerFirst("tree inconsistent!");
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertNotNull(treeList0);
      
      boolean boolean3 = linkedList0.retainAll(treeList0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertTrue(treeList0.contains("tree inconsistent!"));
      assertEquals(3, linkedList0.size());
      assertEquals(3, treeList0.size());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = linkedList0.add(object0);
      assertTrue(linkedList0.contains("tree inconsistent!"));
      assertEquals(4, linkedList0.size());
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      // Undeclared exception!
      try { 
        treeList0.get((-1224));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:-1224, size=3
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      assertEquals(0, treeList0.size());
      assertNotNull(treeList0);
      
      treeList0.clear();
      assertEquals(0, treeList0.size());
      
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 44);
      assertEquals(0, treeList0.size());
      assertEquals(43, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(44, treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      int int0 = treeList_TreeListIterator0.nextIndex();
      assertEquals(0, treeList0.size());
      assertEquals(43, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(44, treeList_TreeListIterator0.nextIndex());
      assertEquals(44, int0);
      
      // Undeclared exception!
      try { 
        treeList0.subList(44, 44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 44
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertTrue(treeList_TreeListIterator0.hasNext());
      assertFalse(treeList_TreeListIterator0.hasPrevious());
      assertEquals((-1), treeList_TreeListIterator0.previousIndex());
      assertEquals(0, treeList_TreeListIterator0.nextIndex());
      assertNotNull(treeList_TreeListIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      treeList_TreeListIterator0.forEachRemaining(consumer0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(0, treeList_TreeListIterator0.previousIndex());
      assertEquals(1, treeList_TreeListIterator0.nextIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      integerArray0[1] = null;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = null;
      Integer[] integerArray1 = treeList0.toArray(integerArray0);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(7, integerArray0.length);
      assertEquals(7, integerArray1.length);
      
      treeList_TreeListIterator0.add((Object) null);
      assertFalse(linkedList0.contains(0));
      assertFalse(treeList0.contains(0));
      assertEquals(1, linkedList0.size());
      assertEquals(2, treeList0.size());
      assertEquals(2, treeList_TreeListIterator0.nextIndex());
      assertFalse(treeList_TreeListIterator0.hasNext());
      assertEquals(1, treeList_TreeListIterator0.previousIndex());
      assertTrue(treeList_TreeListIterator0.hasPrevious());
      
      Object object0 = treeList0.remove(1);
      assertFalse(linkedList0.contains(1));
      assertFalse(treeList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertEquals(1, treeList0.size());
      assertNull(object0);
      
      TreeList.TreeListIterator<Object> treeList_TreeListIterator1 = new TreeList.TreeListIterator<Object>(treeList0, 1);
      assertFalse(linkedList0.contains(1));
      assertFalse(treeList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertEquals(0, treeList_TreeListIterator1.previousIndex());
      assertTrue(treeList_TreeListIterator1.hasPrevious());
      assertFalse(treeList_TreeListIterator1.hasNext());
      assertEquals(1, treeList_TreeListIterator1.nextIndex());
      assertEquals(1, treeList0.size());
      assertNotNull(treeList_TreeListIterator1);
      
      Object object1 = treeList_TreeListIterator1.previous();
      assertFalse(linkedList0.contains(1));
      assertFalse(treeList0.contains(1));
      assertEquals(1, linkedList0.size());
      assertFalse(treeList_TreeListIterator1.hasPrevious());
      assertTrue(treeList_TreeListIterator1.hasNext());
      assertEquals((-1), treeList_TreeListIterator1.previousIndex());
      assertEquals(0, treeList_TreeListIterator1.nextIndex());
      assertEquals(1, treeList0.size());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      TreeList<Object> treeList0 = new TreeList<Object>(linkedList0);
      TreeList.TreeListIterator<Object> treeList_TreeListIterator0 = new TreeList.TreeListIterator<Object>(treeList0, 0);
      TreeList<Object> treeList1 = new TreeList<Object>();
      treeList_TreeListIterator0.add((Object) null);
      boolean boolean0 = treeList0.addAll((Collection<?>) linkedList0);
      assertEquals(3, treeList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TreeList<String> treeList0 = new TreeList<String>();
      int int0 = 1;
      TreeList.TreeListIterator<String> treeList_TreeListIterator0 = new TreeList.TreeListIterator<String>(treeList0, 1);
      // Undeclared exception!
      try { 
        treeList_TreeListIterator0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.TreeList$TreeListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TreeList<Integer> treeList0 = new TreeList<Integer>();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) treeList0);
      Predicate<Integer> predicate1 = predicate0.negate();
      predicate1.negate();
      Integer integer0 = new Integer(1583);
      treeList0.add(integer0);
      treeList0.removeIf(predicate1);
      treeList0.clear();
      int int0 = 0;
      Integer integer1 = new Integer(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      TreeList<String> treeList1 = new TreeList<String>(linkedList0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      treeList1.replaceAll(unaryOperator0);
      linkedList0.pollLast();
      treeList1.addAll((Collection<? extends String>) linkedList0);
      TreeList<Object> treeList2 = new TreeList<Object>(treeList0);
      // Undeclared exception!
      try { 
        treeList2.set(1583, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index:1583, size=0
         //
         verifyException("org.apache.commons.collections4.list.TreeList", e);
      }
  }
}
