/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:32:24 GMT 2019
 */

package org.apache.commons.collections4.list;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.collections4.list.AbstractLinkedList;
import org.apache.commons.collections4.list.CursorableLinkedList;
import org.apache.commons.collections4.list.NodeCachingLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractLinkedList_ESTest extends AbstractLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<InputStream> cursorableLinkedList1 = new CursorableLinkedList<InputStream>(cursorableLinkedList0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertNotNull(cursorableLinkedList1);
      assertTrue(cursorableLinkedList1.equals((Object)cursorableLinkedList0));
      
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 16);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = cursorableLinkedList1.add((InputStream) bufferedInputStream0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList1.isEmpty());
      assertEquals(1, cursorableLinkedList1.size());
      assertNotSame(cursorableLinkedList0, cursorableLinkedList1);
      assertNotSame(cursorableLinkedList1, cursorableLinkedList0);
      assertTrue(boolean0);
      assertFalse(cursorableLinkedList0.equals((Object)cursorableLinkedList1));
      assertFalse(cursorableLinkedList1.equals((Object)cursorableLinkedList0));
      
      boolean boolean1 = cursorableLinkedList0.equals(cursorableLinkedList1);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList1.isEmpty());
      assertEquals(1, cursorableLinkedList1.size());
      assertNotSame(cursorableLinkedList0, cursorableLinkedList1);
      assertNotSame(cursorableLinkedList1, cursorableLinkedList0);
      assertFalse(boolean1);
      assertFalse(cursorableLinkedList0.equals((Object)cursorableLinkedList1));
      assertFalse(cursorableLinkedList1.equals((Object)cursorableLinkedList0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = cursorableLinkedList0.add(integer0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertTrue(boolean0);
      assertTrue(cursorableLinkedList0.contains(1));
      
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      assertTrue(cursorableLinkedList0.contains(1));
      assertFalse(cursorableLinkedList0.contains(0));
      
      Integer integer1 = cursorableLinkedList_Cursor0.next();
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(cursorableLinkedList0.contains(1));
      assertFalse(cursorableLinkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      List<String> list0 = nodeCachingLinkedList0.subList(0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList<Object> cursorableLinkedList1 = new CursorableLinkedList<Object>(cursorableLinkedList0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(cursorableLinkedList1);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = cursorableLinkedList1.createHeaderNode();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList1.isEmpty());
      assertEquals(0, cursorableLinkedList1.size());
      assertNotNull(abstractLinkedList_Node0);
      
      cursorableLinkedList1.removeNode(abstractLinkedList_Node0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(cursorableLinkedList1.isEmpty());
      assertEquals((-1), cursorableLinkedList1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Object>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Object>>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<LinkedList<Object>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Object>>();
      assertNotNull(abstractLinkedList_Node0);
      
      nodeCachingLinkedList0.addNodeAfter(abstractLinkedList_Node0, (LinkedList<Object>) null);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>(cursorableLinkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.add(0, (Object) cursorableLinkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractLinkedList.Node<InputStream> abstractLinkedList_Node0 = new AbstractLinkedList.Node<InputStream>();
      assertNotNull(abstractLinkedList_Node0);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      abstractLinkedList_Node0.setValue(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<MockFileInputStream> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<MockFileInputStream>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.LinkedSubListIterator<MockFileInputStream> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<MockFileInputStream>(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubListIterator0.hasPrevious();
      assertEquals(0, linkedList0.size());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      int int0 = abstractLinkedList_LinkedSubList0.size();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, int0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>(nodeCachingLinkedList0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      ListIterator<Integer> listIterator0 = abstractLinkedList_LinkedSubList0.listIterator(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Locale> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale>(cursorableLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      abstractLinkedList_LinkedSubList0.checkModCount();
      assertEquals(0, linkedList0.size());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CursorableLinkedList<AbstractLinkedList.Node<Integer>> cursorableLinkedList0 = new CursorableLinkedList<AbstractLinkedList.Node<Integer>>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<AbstractLinkedList.Node<Integer>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<AbstractLinkedList.Node<Integer>>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      AbstractLinkedList.Node<Integer> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Integer>();
      assertNotNull(abstractLinkedList_Node0);
      
      abstractLinkedList_LinkedSubList0.add(0, abstractLinkedList_Node0);
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(cursorableLinkedList0.contains(abstractLinkedList_Node0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(abstractLinkedList_Node0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      AbstractLinkedList.LinkedSubListIterator<Integer> abstractLinkedList_LinkedSubListIterator0 = new AbstractLinkedList.LinkedSubListIterator<Integer>(abstractLinkedList_LinkedSubList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, abstractLinkedList_LinkedSubListIterator0.nextIndex());
      assertEquals((-1), abstractLinkedList_LinkedSubListIterator0.previousIndex());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasNext());
      assertFalse(abstractLinkedList_LinkedSubListIterator0.hasPrevious());
      assertNotNull(abstractLinkedList_LinkedSubListIterator0);
      assertFalse(cursorableLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedSubListIterator0.set((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NodeCachingLinkedList<LinkedList<Integer>> nodeCachingLinkedList0 = new NodeCachingLinkedList<LinkedList<Integer>>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedListIterator<LinkedList<Integer>> abstractLinkedList_LinkedListIterator0 = new AbstractLinkedList.LinkedListIterator<LinkedList<Integer>>(nodeCachingLinkedList0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasNext());
      assertFalse(abstractLinkedList_LinkedListIterator0.hasPrevious());
      assertEquals((-1), abstractLinkedList_LinkedListIterator0.previousIndex());
      assertEquals(0, abstractLinkedList_LinkedListIterator0.nextIndex());
      assertNotNull(abstractLinkedList_LinkedListIterator0);
      
      // Undeclared exception!
      try { 
        abstractLinkedList_LinkedListIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CursorableLinkedList<MockFileInputStream> cursorableLinkedList0 = new CursorableLinkedList<MockFileInputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<MockFileInputStream> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<MockFileInputStream>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      boolean boolean0 = cursorableLinkedList_Cursor0.hasPrevious();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      boolean boolean0 = cursorableLinkedList_Cursor0.hasNext();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Integer> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Integer>(cursorableLinkedList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList_Cursor0);
      assertFalse(cursorableLinkedList0.contains(0));
      
      try { 
        cursorableLinkedList_Cursor0.getLastNodeReturned();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<String> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<String>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      cursorableLinkedList_Cursor0.checkModCount();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      CursorableLinkedList.Cursor<Locale.LanguageRange> cursorableLinkedList_Cursor0 = new CursorableLinkedList.Cursor<Locale.LanguageRange>(cursorableLinkedList0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList_Cursor0);
      
      cursorableLinkedList_Cursor0.add((Locale.LanguageRange) null);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NodeCachingLinkedList<NodeCachingLinkedList<String>> nodeCachingLinkedList0 = new NodeCachingLinkedList<NodeCachingLinkedList<String>>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedListIterator<NodeCachingLinkedList<String>> abstractLinkedList_LinkedListIterator0 = null;
      try {
        abstractLinkedList_LinkedListIterator0 = new AbstractLinkedList.LinkedListIterator<NodeCachingLinkedList<String>>(nodeCachingLinkedList0, 3204);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (3204) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorableLinkedList<LinkedList<Locale.LanguageRange>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Locale.LanguageRange>>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>> abstractLinkedList_Node0 = new AbstractLinkedList.Node<LinkedList<Locale.LanguageRange>>();
      assertNotNull(abstractLinkedList_Node0);
      
      cursorableLinkedList0.updateNode(abstractLinkedList_Node0, linkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(cursorableLinkedList0.contains(linkedList0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CursorableLinkedList<Integer> cursorableLinkedList0 = new CursorableLinkedList<Integer>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      cursorableLinkedList0.removeAllNodes();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.init();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CursorableLinkedList<String> cursorableLinkedList0 = new CursorableLinkedList<String>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<String> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<String>(cursorableLinkedList0, 0, 0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add("+Jt'/(N4SPoOWuO8U");
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(cursorableLinkedList0.contains("+Jt'/(N4SPoOWuO8U"));
      assertTrue(abstractLinkedList_LinkedSubList0.contains("+Jt'/(N4SPoOWuO8U"));
      
      boolean boolean1 = abstractLinkedList_LinkedSubList0.addAll(0, (Collection<? extends String>) cursorableLinkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(2, cursorableLinkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(cursorableLinkedList0.contains("+Jt'/(N4SPoOWuO8U"));
      assertTrue(abstractLinkedList_LinkedSubList0.contains("+Jt'/(N4SPoOWuO8U"));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Yp");
      assertNotNull(locale_LanguageRange0);
      
      boolean boolean0 = linkedList0.add(locale_LanguageRange0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      
      CursorableLinkedList<Locale.LanguageRange> cursorableLinkedList0 = new CursorableLinkedList<Locale.LanguageRange>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(cursorableLinkedList0.contains(locale_LanguageRange0));
      
      int int0 = cursorableLinkedList0.size();
      assertEquals(1, linkedList0.size());
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, int0);
      assertTrue(linkedList0.contains(locale_LanguageRange0));
      assertTrue(cursorableLinkedList0.contains(locale_LanguageRange0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>((-756));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      File file0 = MockFile.createTempFile("org.apache.commons.collections4.list.NodeCachingLinkedList", "org.apache.commons.collections4.list.NodeCachingLinkedList");
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("org.apache.commons.collections4.list.NodeCachingLinkedList0org.apache.commons.collections4.list.NodeCachingLinkedList", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/org.apache.commons.collections4.list.NodeCachingLinkedList0org.apache.commons.collections4.list.NodeCachingLinkedList", file0.toString());
      assertFalse(file0.isHidden());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = nodeCachingLinkedList0.add(mockFileInputStream0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals("/tmp", file0.getParent());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertEquals("org.apache.commons.collections4.list.NodeCachingLinkedList0org.apache.commons.collections4.list.NodeCachingLinkedList", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertFalse(file0.isDirectory());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals("/tmp/org.apache.commons.collections4.list.NodeCachingLinkedList0org.apache.commons.collections4.list.NodeCachingLinkedList", file0.toString());
      assertFalse(file0.isHidden());
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(boolean0);
      assertTrue(nodeCachingLinkedList0.contains(mockFileInputStream0));
      
      MockFileInputStream mockFileInputStream1 = nodeCachingLinkedList0.removeFirst();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, mockFileInputStream1.available());
      assertSame(mockFileInputStream1, mockFileInputStream0);
      assertNotNull(mockFileInputStream1);
      assertFalse(nodeCachingLinkedList0.contains(mockFileInputStream0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>((-68));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = nodeCachingLinkedList0.add((InputStream) pipedInputStream0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean0);
      
      PipedInputStream pipedInputStream1 = (PipedInputStream)nodeCachingLinkedList0.remove(0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, pipedInputStream1.available());
      assertSame(pipedInputStream1, pipedInputStream0);
      assertNotNull(pipedInputStream1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(20);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(20));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = nodeCachingLinkedList0.add(integer0);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertTrue(boolean0);
      assertFalse(nodeCachingLinkedList0.contains(20));
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      
      ListIterator<Integer> listIterator0 = nodeCachingLinkedList0.listIterator();
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals(1, nodeCachingLinkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(nodeCachingLinkedList0.contains(20));
      assertTrue(nodeCachingLinkedList0.contains(integer0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 6);
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue(linkedListArray0[4], linkedListArray0[0]);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(boolean0);
      assertEquals(6, linkedListArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NodeCachingLinkedList<InputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<InputStream>((-68));
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>("s|mK&}[A'w");
      assertNotNull(abstractLinkedList_Node0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      boolean boolean0 = nodeCachingLinkedList0.isEqualValue(abstractLinkedList_Node0, pipedInputStream0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CursorableLinkedList<AbstractLinkedList.Node<Integer>> cursorableLinkedList0 = new CursorableLinkedList<AbstractLinkedList.Node<Integer>>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      boolean boolean0 = cursorableLinkedList0.isEmpty();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.Node<Locale> abstractLinkedList_Node0 = cursorableLinkedList0.getNode(0, true);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_Node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add((String) null);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean0);
      
      String string0 = nodeCachingLinkedList0.getLast();
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CursorableLinkedList<LinkedList<String>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<String>>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      AbstractLinkedList.LinkedSubList<LinkedList<String>> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<LinkedList<String>>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      ListIterator<LinkedList<String>> listIterator0 = cursorableLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CursorableLinkedList<MockFileInputStream> cursorableLinkedList0 = new CursorableLinkedList<MockFileInputStream>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(cursorableLinkedList0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<MockFileInputStream> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<MockFileInputStream>(cursorableLinkedList0, 0, 0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      Iterator<MockFileInputStream> iterator0 = nodeCachingLinkedList0.createSubListIterator(abstractLinkedList_LinkedSubList0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray((InputStream[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NodeCachingLinkedList<Locale.LanguageRange> nodeCachingLinkedList0 = new NodeCachingLinkedList<Locale.LanguageRange>((-361));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      LinkedList<Integer>[] linkedListArray0 = (LinkedList<Integer>[]) Array.newInstance(LinkedList.class, 6);
      nodeCachingLinkedList0.size = (-361);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals((-361), nodeCachingLinkedList0.size());
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray(linkedListArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -361
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>((-2545));
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.subList((-2545), 1264);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2545
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.removeNode((AbstractLinkedList.Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      AbstractLinkedList.LinkedSubList<Locale> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Locale>(cursorableLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(linkedList0.contains(locale0));
      assertFalse(cursorableLinkedList0.contains(locale0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(locale0));
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(locale0));
      assertTrue(cursorableLinkedList0.contains(locale0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(locale0));
      
      boolean boolean1 = abstractLinkedList_LinkedSubList0.add(locale0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, cursorableLinkedList0.size());
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.contains(locale0));
      assertTrue(cursorableLinkedList0.contains(locale0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(locale0));
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.removeAll(abstractLinkedList_LinkedSubList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CursorableLinkedList<MockFileInputStream> cursorableLinkedList0 = new CursorableLinkedList<MockFileInputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.listIterator((-2552));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (-2552) less than zero.
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>();
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.size = (-1);
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertEquals((-1), nodeCachingLinkedList0.size());
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.iterator();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (0) greater than the size of the list (-1).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.doWriteObject((ObjectOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.doReadObject((ObjectInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<MockFileInputStream> linkedList0 = new LinkedList<MockFileInputStream>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.LinkedSubList<MockFileInputStream> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<MockFileInputStream>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.createSubListListIterator(abstractLinkedList_LinkedSubList0, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (1) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CursorableLinkedList<MockFileInputStream> cursorableLinkedList0 = new CursorableLinkedList<MockFileInputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(cursorableLinkedList0);
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.createSubListIterator((AbstractLinkedList.LinkedSubList<MockFileInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList$LinkedSubListIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CursorableLinkedList<Locale> cursorableLinkedList0 = new CursorableLinkedList<Locale>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addNodeBefore((AbstractLinkedList.Node<Locale>) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NodeCachingLinkedList<Object> nodeCachingLinkedList0 = new NodeCachingLinkedList<Object>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      AbstractLinkedList.Node<Object> abstractLinkedList_Node0 = new AbstractLinkedList.Node<Object>((Object) null);
      assertNotNull(abstractLinkedList_Node0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addNode(abstractLinkedList_Node0, abstractLinkedList_Node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CursorableLinkedList<MockFileInputStream> cursorableLinkedList0 = new CursorableLinkedList<MockFileInputStream>();
      assertTrue(cursorableLinkedList0.isEmpty());
      assertEquals(0, cursorableLinkedList0.size());
      assertNotNull(cursorableLinkedList0);
      
      // Undeclared exception!
      try { 
        cursorableLinkedList0.addAll(0, (Collection<? extends MockFileInputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NodeCachingLinkedList<MockFileInputStream> nodeCachingLinkedList0 = new NodeCachingLinkedList<MockFileInputStream>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.addAll(16, (Collection<? extends MockFileInputStream>) nodeCachingLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Couldn't get the node: index (16) greater than the size of the list (0).
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      nodeCachingLinkedList0.header = null;
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.add((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CursorableLinkedList<LinkedList<Locale.LanguageRange>> cursorableLinkedList0 = new CursorableLinkedList<LinkedList<Locale.LanguageRange>>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = cursorableLinkedList0.add(linkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(1, cursorableLinkedList0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(cursorableLinkedList0.contains(linkedList0));
      
      boolean boolean1 = cursorableLinkedList0.add(linkedList0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(2, cursorableLinkedList0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(cursorableLinkedList0.contains(linkedList0));
      
      LinkedList<Locale.LanguageRange> linkedList1 = cursorableLinkedList0.get(0);
      assertFalse(cursorableLinkedList0.isEmpty());
      assertEquals(2, cursorableLinkedList0.size());
      assertEquals(0, linkedList1.size());
      assertSame(linkedList1, linkedList0);
      assertNotNull(linkedList1);
      assertTrue(cursorableLinkedList0.contains(linkedList1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = abstractLinkedList_LinkedSubList0.add(integer0);
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(nodeCachingLinkedList0.contains(integer0));
      assertTrue(abstractLinkedList_LinkedSubList0.contains(integer0));
      
      boolean boolean1 = nodeCachingLinkedList0.addAll(0, (Collection<? extends Integer>) abstractLinkedList_LinkedSubList0);
      assertEquals(2, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(nodeCachingLinkedList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NodeCachingLinkedList<Integer> nodeCachingLinkedList0 = new NodeCachingLinkedList<Integer>(0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      
      AbstractLinkedList.LinkedSubList<Integer> abstractLinkedList_LinkedSubList0 = new AbstractLinkedList.LinkedSubList<Integer>(nodeCachingLinkedList0, 0, 0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(abstractLinkedList_LinkedSubList0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
      
      boolean boolean0 = nodeCachingLinkedList0.addAll(0, (Collection<? extends Integer>) abstractLinkedList_LinkedSubList0);
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(nodeCachingLinkedList0.contains(0));
      assertFalse(abstractLinkedList_LinkedSubList0.contains(0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CursorableLinkedList<InputStream> cursorableLinkedList0 = new CursorableLinkedList<InputStream>();
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertNotNull(cursorableLinkedList0);
      
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = cursorableLinkedList0.toArray(objectArray0);
      assertEquals(0, cursorableLinkedList0.size());
      assertTrue(cursorableLinkedList0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      assertEquals(0, objectArray0.length);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>(31);
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertEquals(0, nodeCachingLinkedList0.size());
      assertNotNull(nodeCachingLinkedList0);
      
      Locale[] localeArray0 = new Locale[2];
      AbstractLinkedList.Node<String> abstractLinkedList_Node0 = new AbstractLinkedList.Node<String>();
      assertNotNull(abstractLinkedList_Node0);
      
      nodeCachingLinkedList0.addNodeBefore(abstractLinkedList_Node0, "Xl@<");
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertFalse(nodeCachingLinkedList0.contains("Xl@<"));
      
      nodeCachingLinkedList0.header = abstractLinkedList_Node0;
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        nodeCachingLinkedList0.toArray(localeArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.String
         //
         verifyException("org.apache.commons.collections4.list.AbstractLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NodeCachingLinkedList<String> nodeCachingLinkedList0 = new NodeCachingLinkedList<String>();
      assertEquals(0, nodeCachingLinkedList0.size());
      assertTrue(nodeCachingLinkedList0.isEmpty());
      assertNotNull(nodeCachingLinkedList0);
      
      boolean boolean0 = nodeCachingLinkedList0.add("");
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(nodeCachingLinkedList0.contains(""));
      
      boolean boolean1 = nodeCachingLinkedList0.contains("");
      assertEquals(1, nodeCachingLinkedList0.size());
      assertFalse(nodeCachingLinkedList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(nodeCachingLinkedList0.contains(""));
  }
}
