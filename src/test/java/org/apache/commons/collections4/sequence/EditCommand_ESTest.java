/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:20:05 GMT 2019
 */

package org.apache.commons.collections4.sequence;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.sequence.CommandVisitor;
import org.apache.commons.collections4.sequence.DeleteCommand;
import org.apache.commons.collections4.sequence.InsertCommand;
import org.apache.commons.collections4.sequence.ReplacementsFinder;
import org.apache.commons.collections4.sequence.ReplacementsHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EditCommand_ESTest extends EditCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      InsertCommand<Integer> insertCommand0 = new InsertCommand<Integer>(integer0);
      ReplacementsHandler<Integer> replacementsHandler0 = (ReplacementsHandler<Integer>) mock(ReplacementsHandler.class, new ViolatedAssumptionAnswer());
      ReplacementsFinder<Integer> replacementsFinder0 = new ReplacementsFinder<Integer>(replacementsHandler0);
      insertCommand0.accept(replacementsFinder0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      InsertCommand<Integer> insertCommand0 = new InsertCommand<Integer>(integer0);
      Integer integer1 = insertCommand0.getObject();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DeleteCommand<Object> deleteCommand0 = new DeleteCommand<Object>("");
      // Undeclared exception!
      try { 
        deleteCommand0.accept((CommandVisitor<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.sequence.DeleteCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DeleteCommand<String> deleteCommand0 = new DeleteCommand<String>((String) null);
      String string0 = deleteCommand0.getObject();
      assertNull(string0);
  }
}
