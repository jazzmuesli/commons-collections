/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:07:11 GMT 2019
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.multimap.TransformedMultiValuedMap;
import org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractMultiValuedMapDecorator_ESTest extends AbstractMultiValuedMapDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiValuedMap<Integer, Object> multiValuedMap0 = (MultiValuedMap<Integer, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).remove(any());
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(multiValuedMap0, transformer0, transformer0);
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap1 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer1, (Transformer<? super Object, ?>) transformer1);
      transformedMultiValuedMap0.size();
      transformedMultiValuedMap1.remove(transformedMultiValuedMap0);
      Transformer<Object, Integer> transformer2 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = new TransformedMultiValuedMap<String, String>(multiValuedMap0, transformer0, transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap1 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<String, String>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super String, ? extends String>) transformer1);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap1.putAll((MultiValuedMap<? extends String, ? extends String>) transformedMultiValuedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.TransformedMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "b!l>?4izth";
      MultiValuedMap<Object, String> multiValuedMap0 = (MultiValuedMap<Object, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Map) null).when(multiValuedMap0).asMap();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(false).when(multiValuedMap0).removeMapping(any() , any());
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      Transformer<Object, Object> transformer2 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer3 = null;
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<Object, String>(transformedMultiValuedMap0, transformer2, (Transformer<? super String, ? extends String>) null);
      String string1 = "";
      transformedMultiValuedMap0.removeMapping("", (Object) null);
      transformedMultiValuedMap1.asMap();
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, String>) transformedMultiValuedMap1, (Transformer<? super Object, ?>) null, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      doReturn((Collection) null).when(multiValuedMap0).values();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = new TransformedMultiValuedMap<String, String>(multiValuedMap0, transformer0, transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap1 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<String, String>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super String, ? extends String>) transformer1);
      transformedMultiValuedMap1.values();
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer3 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, String>) transformedMultiValuedMap1, (Transformer<? super String, ? extends String>) transformer2, (Transformer<? super String, ? extends String>) transformer3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiValuedMap<String, Object> multiValuedMap0 = (MultiValuedMap<String, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = null;
      TransformedMultiValuedMap<String, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<String, Object>(multiValuedMap0, (Transformer<? super String, ? extends String>) null, (Transformer<? super Object, ?>) null);
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, Object>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) null, (Transformer<? super Object, ?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiValuedMap<Integer, Integer> multiValuedMap0 = (MultiValuedMap<Integer, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn((Set) null).when(multiValuedMap0).keySet();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      transformedMultiValuedMap0.keySet();
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer1, (Transformer<? super Integer, ? extends Integer>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer0 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiValuedMap<Integer, String> multiValuedMap0 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      Transformer<Integer, Integer> transformer2 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, String>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer2, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiValuedMap<Object, Integer> multiValuedMap0 = (MultiValuedMap<Object, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Object, Integer> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Object, Integer>(multiValuedMap0, transformer0, transformer0);
      UnmodifiableMultiValuedMap<Object, Integer> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<?, ? extends Integer>) transformedMultiValuedMap0);
      Transformer<Object, Object> transformer1 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer2 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1));
      Iterable<Integer> iterable0 = (Iterable<Integer>) mock(Iterable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        unmodifiableMultiValuedMap0.putAll((Object) integer0, (Iterable<? extends Integer>) iterable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.UnmodifiableMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiValuedMap<String, Integer> multiValuedMap0 = (MultiValuedMap<String, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer0 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = new TransformedMultiValuedMap<String, String>(multiValuedMap0, transformer0, transformer0);
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, String>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super String, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiValuedMap<Object, String> multiValuedMap0 = (MultiValuedMap<Object, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn((Collection) null).when(multiValuedMap0).get(any());
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<Object, String>(transformedMultiValuedMap0, transformer2, transformer2);
      Transformer<Object, Object> transformer3 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<String, String> transformer4 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      transformedMultiValuedMap0.get("Five");
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, String>) transformedMultiValuedMap1, (Transformer<? super Object, ?>) transformer3, (Transformer<? super String, ? extends String>) transformer4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<String, String>(transformedMultiValuedMap0, transformer1, transformer1);
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer3 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, String>) transformedMultiValuedMap1, (Transformer<? super String, ? extends String>) transformer2, (Transformer<? super String, ? extends String>) transformer3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiValuedMap<Object, String> multiValuedMap0 = (MultiValuedMap<Object, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiValuedMap<Integer, String> multiValuedMap0 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer0 = null;
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) null, (Transformer<? super String, ? extends String>) transformer1);
      UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ?>) transformedMultiValuedMap0);
      // Undeclared exception!
      try { 
        transformedMultiValuedMap0.putAll((Map<? extends Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Map must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.TransformedMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiValuedMap<Integer, String> multiValuedMap0 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(multiValuedMap0).toString();
      doReturn((MultiSet) null).when(multiValuedMap0).keys();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      Transformer<Integer, Integer> transformer2 = null;
      Transformer<Object, String> transformer3 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<Integer, String>(transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) null, transformer3);
      UnmodifiableMultiValuedMap<Integer, String> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends Integer, ? extends String>) transformedMultiValuedMap1);
      Transformer<String, String> transformer4 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        unmodifiableMultiValuedMap0.keys();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiValuedMap<Integer, Object> multiValuedMap0 = (MultiValuedMap<Integer, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Integer, Integer> transformer0 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Object> transformer1 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Object, ?>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiValuedMap<Integer, String> multiValuedMap0 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiValuedMap<String, Integer> multiValuedMap0 = (MultiValuedMap<String, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiValuedMap<Integer, Object> multiValuedMap0 = (MultiValuedMap<Integer, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn((Collection) null).when(multiValuedMap0).remove(any());
      doReturn(0, 0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap0 = new TransformedMultiValuedMap<Integer, Object>(multiValuedMap0, transformer0, transformer0);
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Object> transformedMultiValuedMap1 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<Integer, Object>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer1, (Transformer<? super Object, ?>) transformer1);
      transformedMultiValuedMap0.size();
      transformedMultiValuedMap1.remove(transformedMultiValuedMap0);
      Transformer<Object, Integer> transformer2 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Object>) transformedMultiValuedMap1, (Transformer<? super Integer, ? extends Integer>) transformer2, (Transformer<? super Object, ?>) transformer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiValuedMap<String, Object> multiValuedMap0 = (MultiValuedMap<String, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer0 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = new TransformedMultiValuedMap<String, String>(multiValuedMap0, transformer0, transformer0);
      transformedMultiValuedMap0.clear();
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, String>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super String, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiValuedMap<Object, Object> multiValuedMap0 = (MultiValuedMap<Object, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null, (Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer0 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
      transformedMultiValuedMap0.entries();
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer1).transform(anyString());
      TransformedMultiValuedMap<String, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<String, String>(transformedMultiValuedMap0, transformer1, transformer1);
      transformedMultiValuedMap1.transformKey("iTWK0c{blD~n@[0iS:");
      Transformer<Object, String> transformer2 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, String>) transformedMultiValuedMap1, (Transformer<? super String, ? extends String>) transformer2, (Transformer<? super String, ? extends String>) transformer2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<String, String> transformer1 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiValuedMap<Integer, String> multiValuedMap0 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiValuedMap<String, Object> multiValuedMap0 = (MultiValuedMap<String, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer0 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Object> transformer1 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super Object, ?>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, LinkedList<Object>> transformer1 = (Transformer<Object, LinkedList<Object>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, LinkedList<Object>>) null, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super LinkedList<Object>, ? extends LinkedList<Object>>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MultiValuedMap must not be null.
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMapDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super String, ? extends String>) transformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Integer, Integer> transformer2 = (Transformer<Integer, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      int int0 = 1384;
      Integer integer0 = new Integer(1384);
      MultiValuedMap<String, Integer> multiValuedMap0 = (MultiValuedMap<String, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<String, String> transformer3 = (Transformer<String, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Integer, Integer> transformer4 = null;
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap0, (Transformer<? super String, ? extends String>) transformer3, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiValuedMap<Object, String> multiValuedMap0 = (MultiValuedMap<Object, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Map) null).when(multiValuedMap0).asMap();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(false).when(multiValuedMap0).removeMapping(any() , any());
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super String, ? extends String>) transformer1);
      Transformer<Object, Object> transformer2 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Transformer<Object, String> transformer3 = null;
      TransformedMultiValuedMap<Object, String> transformedMultiValuedMap1 = new TransformedMultiValuedMap<Object, String>(transformedMultiValuedMap0, transformer2, (Transformer<? super String, ? extends String>) null);
      transformedMultiValuedMap0.removeMapping("", (Object) null);
      transformedMultiValuedMap1.asMap();
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Object, String>) transformedMultiValuedMap1, (Transformer<? super Object, ?>) null, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiValuedMap<String, String> multiValuedMap0 = (MultiValuedMap<String, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      UnmodifiableMultiValuedMap<String, Object> unmodifiableMultiValuedMap0 = UnmodifiableMultiValuedMap.unmodifiableMultiValuedMap((MultiValuedMap<? extends String, ?>) multiValuedMap0);
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap((MultiValuedMap<String, Object>) unmodifiableMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer0, (Transformer<? super Object, ?>) transformer0);
      Transformer<Object, String> transformer1 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<String, Object>) transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) transformer1, (Transformer<? super Object, ?>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiValuedMap<String, Object> multiValuedMap0 = (MultiValuedMap<String, Object>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      TransformedMultiValuedMap<String, Object> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super String, ? extends String>) null, (Transformer<? super Object, ?>) transformer0);
      transformedMultiValuedMap0.transformValue((Object) null);
      Transformer<Object, Object> transformer1 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<String, Object> transformedMultiValuedMap1 = new TransformedMultiValuedMap<String, Object>(transformedMultiValuedMap0, (Transformer<? super String, ? extends String>) null, transformer1);
      MultiValuedMap<Integer, String> multiValuedMap1 = (MultiValuedMap<Integer, String>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(multiValuedMap1).entries();
      doReturn(false).when(multiValuedMap1).isEmpty();
      doReturn(0).when(multiValuedMap1).size();
      Transformer<Object, Integer> transformer2 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap(multiValuedMap1, (Transformer<? super Integer, ? extends Integer>) transformer2, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiValuedMap<Integer, Integer> multiValuedMap0 = (MultiValuedMap<Integer, Integer>) mock(MultiValuedMap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(multiValuedMap0).toString();
      doReturn((Collection) null).when(multiValuedMap0).entries();
      doReturn(false).when(multiValuedMap0).isEmpty();
      doReturn(0).when(multiValuedMap0).size();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformedMultiValuedMap<Integer, Integer> transformedMultiValuedMap0 = TransformedMultiValuedMap.transformingMap(multiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer0, (Transformer<? super Integer, ? extends Integer>) transformer0);
      Transformer<Object, Integer> transformer1 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TransformedMultiValuedMap.transformedMap((MultiValuedMap<Integer, Integer>) transformedMultiValuedMap0, (Transformer<? super Integer, ? extends Integer>) transformer1, (Transformer<? super Integer, ? extends Integer>) transformer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.AbstractMultiValuedMap", e);
      }
  }
}
