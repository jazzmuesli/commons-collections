/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:17:23 GMT 2019
 */

package org.apache.commons.collections4.multimap;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.collections4.MultiSet;
import org.apache.commons.collections4.MultiValuedMap;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ArrayListValuedHashMap_ESTest extends ArrayListValuedHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      ArrayListValuedHashMap<Object, LinkedList<String>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, LinkedList<String>>(0);
      arrayListValuedHashMap0.createCollection();
      ArrayListValuedHashMap<String, String> arrayListValuedHashMap1 = new ArrayListValuedHashMap<String, String>();
      ArrayList<String> arrayList0 = arrayListValuedHashMap1.createCollection();
      ArrayListValuedHashMap<String, String> arrayListValuedHashMap2 = new ArrayListValuedHashMap<String, String>(0);
      arrayListValuedHashMap1.putAll((MultiValuedMap<? extends String, ? extends String>) arrayListValuedHashMap2);
      arrayListValuedHashMap1.putAll("", (Iterable<? extends String>) arrayList0);
      ArrayListValuedHashMap<String, String> arrayListValuedHashMap3 = new ArrayListValuedHashMap<String, String>();
      Map<String, Collection<String>> map0 = arrayListValuedHashMap3.asMap();
      arrayListValuedHashMap1.putAll((MultiValuedMap<? extends String, ? extends String>) arrayListValuedHashMap3);
      arrayListValuedHashMap1.createCollection();
      ArrayListValuedHashMap<Object, Collection<String>> arrayListValuedHashMap4 = new ArrayListValuedHashMap<Object, Collection<String>>(0, 0);
      arrayListValuedHashMap3.setMap(map0);
      arrayListValuedHashMap4.trimToSize();
      arrayListValuedHashMap3.wrappedCollection("");
      arrayListValuedHashMap4.createCollection();
      ArrayListValuedHashMap<Object, String> arrayListValuedHashMap5 = null;
      try {
        arrayListValuedHashMap5 = new ArrayListValuedHashMap<Object, String>(arrayListValuedHashMap3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Integer>, Collection<Object>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Collection<Object>>();
      ArrayListValuedHashMap<LinkedList<Integer>, Collection<Object>> arrayListValuedHashMap1 = new ArrayListValuedHashMap<LinkedList<Integer>, Collection<Object>>(arrayListValuedHashMap0);
      ArrayList<Collection<Object>> arrayList0 = arrayListValuedHashMap1.createCollection();
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap2 = new ArrayListValuedHashMap<Object, Object>(0);
      arrayListValuedHashMap2.containsMapping(arrayList0, arrayListValuedHashMap1);
      arrayListValuedHashMap2.containsValue(arrayListValuedHashMap1);
      arrayListValuedHashMap2.clear();
      arrayListValuedHashMap2.createCollection();
      arrayListValuedHashMap1.values();
      ArrayListValuedHashMap<Object, String> arrayListValuedHashMap3 = new ArrayListValuedHashMap<Object, String>(0, 0);
      arrayListValuedHashMap3.keys();
      arrayListValuedHashMap3.put(arrayList0, ")YJ1wf$");
      ArrayList<String> arrayList1 = arrayListValuedHashMap3.createCollection();
      arrayListValuedHashMap3.trimToSize();
      ArrayListValuedHashMap<String, Object> arrayListValuedHashMap4 = new ArrayListValuedHashMap<String, Object>(0, 0);
      arrayListValuedHashMap4.trimToSize();
      arrayListValuedHashMap4.size();
      arrayListValuedHashMap4.createCollection();
      ArrayListValuedHashMap<Object, Collection<Object>> arrayListValuedHashMap5 = new ArrayListValuedHashMap<Object, Collection<Object>>(0, 1806);
      arrayListValuedHashMap5.trimToSize();
      ArrayListValuedHashMap<String, String> arrayListValuedHashMap6 = new ArrayListValuedHashMap<String, String>();
      ArrayList<String> arrayList2 = arrayListValuedHashMap6.createCollection();
      assertNotSame(arrayList2, arrayList1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayListValuedHashMap<Collection<Object>, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<Object>, Integer>(0);
      arrayListValuedHashMap0.entries();
      ArrayListValuedHashMap<Integer, String> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Integer, String>();
      ArrayListValuedHashMap<Integer, Object> arrayListValuedHashMap2 = new ArrayListValuedHashMap<Integer, Object>(arrayListValuedHashMap1);
      Integer integer0 = new Integer(504);
      arrayListValuedHashMap2.wrappedCollection(integer0);
      arrayListValuedHashMap2.trimToSize();
      ArrayListValuedHashMap<Integer, LinkedList<Object>> arrayListValuedHashMap3 = new ArrayListValuedHashMap<Integer, LinkedList<Object>>();
      arrayListValuedHashMap3.clear();
      arrayListValuedHashMap3.trimToSize();
      ArrayListValuedHashMap<String, Collection<Object>> arrayListValuedHashMap4 = new ArrayListValuedHashMap<String, Collection<Object>>(0);
      arrayListValuedHashMap4.createCollection();
      arrayListValuedHashMap4.createCollection();
      ArrayListValuedHashMap<LinkedList<Integer>, Integer> arrayListValuedHashMap5 = new ArrayListValuedHashMap<LinkedList<Integer>, Integer>();
      arrayListValuedHashMap5.keys();
      Map<LinkedList<Integer>, Collection<Integer>> map0 = arrayListValuedHashMap5.asMap();
      arrayListValuedHashMap5.trimToSize();
      ArrayListValuedHashMap<Collection<Object>, String> arrayListValuedHashMap6 = new ArrayListValuedHashMap<Collection<Object>, String>();
      arrayListValuedHashMap6.trimToSize();
      ArrayListValuedHashMap<String, String> arrayListValuedHashMap7 = new ArrayListValuedHashMap<String, String>(3, 3);
      arrayListValuedHashMap7.trimToSize();
      ArrayListValuedHashMap<Collection<Integer>, Collection<Object>> arrayListValuedHashMap8 = new ArrayListValuedHashMap<Collection<Integer>, Collection<Object>>();
      arrayListValuedHashMap8.createCollection();
      arrayListValuedHashMap7.createCollection();
      ArrayListValuedHashMap<Object, Collection<Integer>> arrayListValuedHashMap9 = new ArrayListValuedHashMap<Object, Collection<Integer>>(map0);
      ArrayList<Collection<Integer>> arrayList0 = arrayListValuedHashMap9.createCollection();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Collection<Object>> arrayListValuedHashMap0 = null;
      try {
        arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Collection<Object>>((MultiValuedMap<? extends Integer, ? extends Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.ArrayListValuedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayListValuedHashMap<Collection<Object>, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<Object>, Object>();
      ObjectOutputStream objectOutputStream0 = mock(ObjectOutputStream.class, new ViolatedAssumptionAnswer());
      arrayListValuedHashMap0.doWriteObject(objectOutputStream0);
      ArrayListValuedHashMap<String, Collection<Object>> arrayListValuedHashMap1 = null;
      try {
        arrayListValuedHashMap1 = new ArrayListValuedHashMap<String, Collection<Object>>((Map<? extends String, ? extends Collection<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.ArrayListValuedHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-1);
      ArrayListValuedHashMap<Collection<Object>, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<Object>, Integer>((-1));
      ArrayListValuedHashMap<LinkedList<Integer>, ArrayList<Object>> arrayListValuedHashMap1 = new ArrayListValuedHashMap<LinkedList<Integer>, ArrayList<Object>>((-1));
      arrayListValuedHashMap1.mapIterator();
      arrayListValuedHashMap1.remove(arrayListValuedHashMap0);
      // Undeclared exception!
      try { 
        arrayListValuedHashMap1.createCollection();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3862;
      ArrayListValuedHashMap<LinkedList<Integer>, String> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, String>(3862);
      arrayListValuedHashMap0.entries();
      arrayListValuedHashMap0.asMap();
      ArrayListValuedHashMap<ArrayList<Object>, Collection<Object>> arrayListValuedHashMap1 = null;
      try {
        arrayListValuedHashMap1 = new ArrayListValuedHashMap<ArrayList<Object>, Collection<Object>>((-917), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -917
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayListValuedHashMap<LinkedList<Integer>, Collection<Integer>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<LinkedList<Integer>, Collection<Integer>>();
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Object, Object>(1, 1);
      arrayListValuedHashMap1.createCollection();
      arrayListValuedHashMap1.trimToSize();
      assertTrue(arrayListValuedHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayListValuedHashMap<String, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Integer>();
      ArrayListValuedHashMap<String, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<String, Integer>(arrayListValuedHashMap0);
      arrayListValuedHashMap1.trimToSize();
      assertNotSame(arrayListValuedHashMap0, arrayListValuedHashMap1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayListValuedHashMap<Object, LinkedList<String>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Object, LinkedList<String>>();
      arrayListValuedHashMap0.trimToSize();
      assertTrue(arrayListValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayListValuedHashMap<String, Collection<Object>> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Collection<Object>>();
      assertTrue(arrayListValuedHashMap0.isEmpty());
      
      ArrayList<Collection<Object>> arrayList0 = arrayListValuedHashMap0.createCollection();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayListValuedHashMap<String, Integer> arrayListValuedHashMap0 = new ArrayListValuedHashMap<String, Integer>(0);
      assertTrue(arrayListValuedHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayListValuedHashMap<Integer, Object> arrayListValuedHashMap0 = new ArrayListValuedHashMap<Integer, Object>(3, 3);
      ArrayList<Object> arrayList0 = arrayListValuedHashMap0.createCollection();
      ArrayListValuedHashMap<Collection<Object>, Integer> arrayListValuedHashMap1 = new ArrayListValuedHashMap<Collection<Object>, Integer>(3);
      arrayListValuedHashMap1.trimToSize();
      arrayListValuedHashMap1.values();
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap2 = new ArrayListValuedHashMap<Object, Object>(arrayListValuedHashMap0);
      MultiSet<Object> multiSet0 = arrayListValuedHashMap2.keys();
      arrayListValuedHashMap1.get(multiSet0);
      Integer integer0 = new Integer(3);
      arrayListValuedHashMap1.put(arrayList0, integer0);
      arrayListValuedHashMap1.trimToSize();
      ArrayListValuedHashMap<Object, Object> arrayListValuedHashMap3 = new ArrayListValuedHashMap<Object, Object>();
      assertTrue(arrayListValuedHashMap3.equals((Object)arrayListValuedHashMap2));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayListValuedHashMap<Collection<Object>, String> arrayListValuedHashMap0 = null;
      try {
        arrayListValuedHashMap0 = new ArrayListValuedHashMap<Collection<Object>, String>((Map<? extends Collection<Object>, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.multimap.ArrayListValuedHashMap", e);
      }
  }
}
