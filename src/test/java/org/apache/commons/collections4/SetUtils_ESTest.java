/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:43:31 GMT 2019
 */

package org.apache.commons.collections4;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.NavigableSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;
import org.apache.commons.collections4.ClosureUtilsTest;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.SetUtils;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class SetUtils_ESTest extends SetUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<Predicate<Object>> linkedHashSet0 = new LinkedHashSet<Predicate<Object>>();
      Transformer<Object, Predicate<Object>> transformer0 = (Transformer<Object, Predicate<Object>>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      Set<Predicate<Object>> set0 = SetUtils.transformedSet((Set<Predicate<Object>>) linkedHashSet0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) transformer0);
      SetUtils.SetView<Predicate<Object>> setUtils_SetView0 = SetUtils.union((Set<? extends Predicate<Object>>) linkedHashSet0, (Set<? extends Predicate<Object>>) set0);
      assertNotNull(setUtils_SetView0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      ClosureUtilsTest.MockTransformer<Integer> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Integer>();
      SortedSet<Integer> sortedSet0 = SetUtils.transformedSortedSet((SortedSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) closureUtilsTest_MockTransformer0);
      assertTrue(sortedSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Set<String> set0 = SetUtils.unmodifiableSet(stringArray0);
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      boolean boolean0 = SetUtils.isEqualSet(set0, treeSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUtils.SetView<String> setUtils_SetView0 = SetUtils.union((Set<? extends String>) linkedHashSet0, (Set<? extends String>) linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView1 = SetUtils.difference((Set<?>) setUtils_SetView0, (Set<?>) linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView2 = SetUtils.intersection((Set<?>) setUtils_SetView1, (Set<?>) linkedHashSet0);
      assertTrue(setUtils_SetView2.equals((Object)setUtils_SetView1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TreeSet<NonePredicate<Object>> treeSet0 = new TreeSet<NonePredicate<Object>>();
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      SortedSet<NonePredicate<Object>> sortedSet0 = SetUtils.predicatedSortedSet((SortedSet<NonePredicate<Object>>) treeSet0, (Predicate<? super NonePredicate<Object>>) predicate0);
      SetUtils.SetView<NonePredicate<Object>> setUtils_SetView0 = SetUtils.disjunction((Set<? extends NonePredicate<Object>>) treeSet0, (Set<? extends NonePredicate<Object>>) sortedSet0);
      assertNotNull(setUtils_SetView0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedHashSet<TruePredicate<Integer>> linkedHashSet0 = new LinkedHashSet<TruePredicate<Integer>>();
      SetUtils.SetView<Predicate<Integer>> setUtils_SetView0 = SetUtils.intersection((Set<? extends Predicate<Integer>>) linkedHashSet0, (Set<? extends Predicate<Integer>>) linkedHashSet0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) setUtils_SetView0, comparator0);
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>(predicate0, predicate0);
      TreeSet<Predicate<Object>> treeSet0 = new TreeSet<Predicate<Object>>();
      SetUtils.SetView<Predicate<Object>> setUtils_SetView1 = SetUtils.intersection((Set<? extends Predicate<Object>>) treeSet0, (Set<? extends Predicate<Object>>) treeSet0);
      Set<Predicate<Object>> set0 = SetUtils.predicatedSet((Set<Predicate<Object>>) setUtils_SetView1, (Predicate<? super Predicate<Object>>) andPredicate0);
      assertFalse(set0.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SetUtils.SetView<String> setUtils_SetView0 = SetUtils.union((Set<? extends String>) linkedHashSet0, (Set<? extends String>) linkedHashSet0);
      SetUtils.SetView<Object> setUtils_SetView1 = SetUtils.difference((Set<?>) setUtils_SetView0, (Set<?>) linkedHashSet0);
      int int0 = setUtils_SetView1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Set<Integer> set0 = SetUtils.emptySet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) set0, (Set<? extends Integer>) set0);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      setUtils_SetView0.copyInto(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, (Collection<?>) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Set<Object> set0 = SetUtils.emptyIfNull((Set<Object>) linkedHashSet0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<TruePredicate<Integer>> linkedHashSet0 = new LinkedHashSet<TruePredicate<Integer>>();
      TruePredicate<Integer> truePredicate0 = (TruePredicate<Integer>) mock(TruePredicate.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(truePredicate0).toString();
      linkedHashSet0.add(truePredicate0);
      Set<TruePredicate<Integer>> set0 = SetUtils.emptyIfNull((Set<TruePredicate<Integer>>) linkedHashSet0);
      assertTrue(set0.contains(truePredicate0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSortedSet((SortedSet<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableSet((Set<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.unmodifiableNavigableSet((NavigableSet<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SortedSet<String> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.transformedSortedSet(sortedSet0, (Transformer<? super String, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClosureUtilsTest.MockTransformer<Integer> closureUtilsTest_MockTransformer0 = new ClosureUtilsTest.MockTransformer<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.transformedSet((Set<Integer>) null, (Transformer<? super Integer, ? extends Integer>) closureUtilsTest_MockTransformer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.transformedNavigableSet((NavigableSet<Integer>) treeSet0, (Transformer<? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Transformer must not be null
         //
         verifyException("org.apache.commons.collections4.collection.TransformedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSortedSet((SortedSet<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.synchronizedSet((Set<LinkedHashSet<Predicate<Object>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Integer integer0 = new Integer(0);
      treeSet0.add(integer0);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Object>) treeSet0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(comparator0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<Integer>) treeSet0, (Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("+N");
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<String> predicate0 = OnePredicate.onePredicate((Predicate<? super String>[]) predicateArray0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSortedSet((SortedSet<String>) treeSet0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '+N' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@2' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashSet<String> hashSet0 = SetUtils.hashSet(stringArray0);
      Object object0 = new Object();
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0, defaultEquator0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedSet((Set<String>) hashSet0, (Predicate<? super String>) equalPredicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object 'null' - Predicate 'org.apache.commons.collections4.functors.EqualPredicate@1' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      treeSet0.add("H");
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) predicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      treeSet0.add("0OKE_O!q/&3Ow~R|=");
      SortedSet<Predicate<Object>> sortedSet0 = SetUtils.emptySortedSet();
      Predicate<String> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super String>>) sortedSet0);
      // Undeclared exception!
      try { 
        SetUtils.predicatedNavigableSet((NavigableSet<String>) treeSet0, (Predicate<? super String>) predicate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot add Object '0OKE_O!q/&3Ow~R|=' - Predicate 'org.apache.commons.collections4.functors.FalsePredicate@4' rejected it
         //
         verifyException("org.apache.commons.collections4.collection.PredicatedCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.orderedSet((Set<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Collection must not be null.
         //
         verifyException("org.apache.commons.collections4.collection.AbstractCollectionDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<String> set0 = SetUtils.unmodifiableSet((String[]) null);
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[19];
      Set<String> set0 = SetUtils.unmodifiableSet(stringArray0);
      // Undeclared exception!
      try { 
        SetUtils.union((Set<?>) set0, (Set<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.union((Set<? extends Integer>) null, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      boolean boolean0 = SetUtils.isEqualSet(linkedHashSet0, (Collection<?>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SortedSet<String> sortedSet0 = SetUtils.emptySortedSet();
      boolean boolean0 = SetUtils.isEqualSet((Collection<?>) null, sortedSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Set<Object> set0 = SetUtils.emptySet();
      NonePredicate<Object>[] nonePredicateArray0 = (NonePredicate<Object>[]) Array.newInstance(NonePredicate.class, 0);
      HashSet<NonePredicate<Object>> hashSet0 = SetUtils.hashSet(nonePredicateArray0);
      Set<Predicate<Object>> set1 = SetUtils.unmodifiableSet((Set<? extends Predicate<Object>>) hashSet0);
      boolean boolean0 = SetUtils.isEqualSet(set1, set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      boolean boolean0 = SetUtils.isEqualSet(sortedSet0, linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashSet<String> hashSet0 = SetUtils.hashSet(stringArray0);
      // Undeclared exception!
      try { 
        SetUtils.intersection((Set<? extends String>) null, (Set<? extends String>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashSet<LinkedHashSet<Object>> hashSet0 = SetUtils.hashSet((LinkedHashSet<Object>[]) null);
      assertNull(hashSet0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "$VALUES";
      Set<String> set0 = SetUtils.unmodifiableSet(stringArray0);
      int int0 = SetUtils.hashCodeForSet((Collection<String>) set0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Set<String> set0 = SetUtils.unmodifiableSet(stringArray0);
      assertNotNull(set0);
      
      int int0 = SetUtils.hashCodeForSet((Collection<String>) set0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = SetUtils.hashCodeForSet((Collection<Object>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Set<NonePredicate<String>> set0 = SetUtils.emptyIfNull((Set<NonePredicate<String>>) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<? extends Integer>) treeSet0, (Set<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.disjunction((Set<? extends Predicate<Object>>) null, (Set<? extends Predicate<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SortedSet<LinkedHashSet<Object>> sortedSet0 = SetUtils.emptySortedSet();
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends LinkedHashSet<Object>>) sortedSet0, (Set<? extends LinkedHashSet<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        SetUtils.difference((Set<? extends String>) null, (Set<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Sets must not be null.
         //
         verifyException("org.apache.commons.collections4.SetUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.intersection((Set<? extends Integer>) sortedSet0, (Set<? extends Integer>) sortedSet0);
      Iterator<Integer> iterator0 = setUtils_SetView0.iterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SortedSet<Integer> sortedSet0 = SetUtils.emptySortedSet();
      SetUtils.SetView<Integer> setUtils_SetView0 = SetUtils.union((Set<? extends Integer>) sortedSet0, (Set<? extends Integer>) sortedSet0);
      Set<Integer> set0 = setUtils_SetView0.toSet();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Predicate<Object> predicate0 = UniquePredicate.uniquePredicate();
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      SortedSet<Object> sortedSet0 = SetUtils.predicatedNavigableSet((NavigableSet<Object>) treeSet0, (Predicate<? super Object>) predicate0);
      assertEquals(0, sortedSet0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TreeSet<NonePredicate<Object>> treeSet0 = new TreeSet<NonePredicate<Object>>();
      Set<NonePredicate<Object>> set0 = SetUtils.synchronizedSet((Set<NonePredicate<Object>>) treeSet0);
      assertEquals(0, set0.size());
  }
}
