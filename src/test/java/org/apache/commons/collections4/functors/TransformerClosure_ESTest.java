/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:17:04 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TransformerClosure_ESTest extends TransformerClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      Transformer<? super Object, ?> transformer0 = transformerClosure0.getTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      Transformer<Object, Integer> transformer0 = InvokerTransformer.invokerTransformer("58VrMu&", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        transformerClosure0.execute(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '58VrMu&' on 'class java.lang.Class' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TransformerClosure<Integer> transformerClosure0 = new TransformerClosure<Integer>((Transformer<? super Integer, ?>) null);
      // Undeclared exception!
      try { 
        transformerClosure0.execute((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Closure<Integer> closure0 = TransformerClosure.transformerClosure((Transformer<? super Integer, ?>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<String> transformerClosure0 = new TransformerClosure<String>(transformer0);
      transformerClosure0.execute((String) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Transformer<Object, String> transformer0 = ConstantTransformer.nullTransformer();
      TransformerClosure<String> transformerClosure0 = new TransformerClosure<String>(transformer0);
      Transformer<? super String, ?> transformer1 = transformerClosure0.getTransformer();
      assertNotNull(transformer1);
  }
}
