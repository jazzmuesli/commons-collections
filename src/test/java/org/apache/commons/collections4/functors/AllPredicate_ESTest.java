/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:57:13 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AllPredicate_ESTest extends AllPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Predicate<Object> predicate0 = ExceptionPredicate.exceptionPredicate();
      predicateArray0[0] = predicate0;
      AllPredicate<NullIsExceptionPredicate<String>> allPredicate0 = new AllPredicate<NullIsExceptionPredicate<String>>(predicateArray0);
      NullIsExceptionPredicate<String> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<String>(predicate0);
      // Undeclared exception!
      try { 
        allPredicate0.evaluate(nullIsExceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionPredicate invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray1[0] = (Predicate<Object>) nonePredicate0;
      AllPredicate<UniquePredicate<InstanceofPredicate>> allPredicate0 = new AllPredicate<UniquePredicate<InstanceofPredicate>>(predicateArray1);
      UniquePredicate<InstanceofPredicate> uniquePredicate0 = new UniquePredicate<InstanceofPredicate>();
      // Undeclared exception!
      allPredicate0.evaluate(uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) nonePredicate0, (Predicate<? super Object>) nonePredicate0);
      predicateArray0[0] = predicate0;
      AllPredicate<Integer> allPredicate0 = new AllPredicate<Integer>(predicateArray0);
      Integer integer0 = new Integer(2443);
      // Undeclared exception!
      try { 
        allPredicate0.evaluate(integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Predicate<? super Boolean>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      linkedList0.add((InstanceofPredicate) null);
      // Undeclared exception!
      try { 
        AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Integer integer0 = new Integer(2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray1[0] = (Predicate<Object>) allPredicate0;
      predicateArray1[1] = predicateArray0[0];
      predicateArray1[2] = (Predicate<Object>) allPredicate0;
      predicateArray1[3] = predicate0;
      predicateArray1[4] = (Predicate<Object>) allPredicate0;
      predicateArray1[5] = predicate0;
      predicateArray1[6] = (Predicate<Object>) allPredicate0;
      predicateArray1[7] = (Predicate<Object>) allPredicate0;
      predicateArray1[8] = predicate0;
      AllPredicate<AllPredicate<Integer>> allPredicate1 = new AllPredicate<AllPredicate<Integer>>(predicateArray1);
      AllPredicate<Integer> allPredicate2 = new AllPredicate<Integer>(predicateArray1);
      boolean boolean0 = allPredicate1.evaluate(allPredicate2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      predicateArray0[0] = predicate0;
      AllPredicate<NotPredicate<InstanceofPredicate>> allPredicate0 = new AllPredicate<NotPredicate<InstanceofPredicate>>(predicateArray0);
      NotPredicate<InstanceofPredicate> notPredicate0 = new NotPredicate<InstanceofPredicate>(predicateArray0[3]);
      boolean boolean0 = allPredicate0.evaluate(notPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Integer integer0 = new Integer(2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 9);
      predicateArray1[0] = predicateArray0[0];
      predicateArray1[1] = predicate0;
      predicateArray1[2] = (Predicate<Object>) allPredicate0;
      AllPredicate<AllPredicate<Integer>> allPredicate1 = new AllPredicate<AllPredicate<Integer>>(predicateArray1);
      AllPredicate<Integer> allPredicate2 = new AllPredicate<Integer>(predicateArray1);
      // Undeclared exception!
      try { 
        allPredicate1.evaluate(allPredicate2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.AllPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      linkedList0.offerLast(instanceofPredicate0);
      Predicate<FalsePredicate<NullIsFalsePredicate>> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super FalsePredicate<NullIsFalsePredicate>>>) linkedList0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.add(instanceofPredicate0);
      Predicate<FalsePredicate<NullIsFalsePredicate>> predicate0 = AllPredicate.allPredicate((Collection<? extends Predicate<? super FalsePredicate<NullIsFalsePredicate>>>) linkedList0);
      assertTrue(linkedList0.contains(predicate0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Integer integer0 = new Integer(2);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Predicate<Object> predicate0 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[0] = predicate0;
      Predicate<Boolean> predicate1 = AllPredicate.allPredicate((Predicate<? super Boolean>[]) predicateArray0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<EqualPredicate<IdentityPredicate>> predicate0 = AllPredicate.allPredicate((Predicate<? super EqualPredicate<IdentityPredicate>>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AllPredicate<Boolean> allPredicate0 = new AllPredicate<Boolean>((Predicate<? super Boolean>[]) null);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) allPredicate0);
      predicateArray0[0] = predicate0;
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[1] = (Predicate<Object>) uniquePredicate0;
      predicateArray0[2] = predicateArray0[1];
      predicateArray0[3] = predicate0;
      predicateArray0[4] = predicate0;
      predicateArray0[5] = (Predicate<Object>) uniquePredicate0;
      Predicate<TransformedPredicate<Integer>> predicate1 = AllPredicate.allPredicate((Predicate<? super TransformedPredicate<Integer>>[]) predicateArray0);
      assertNotNull(predicate1);
  }
}
