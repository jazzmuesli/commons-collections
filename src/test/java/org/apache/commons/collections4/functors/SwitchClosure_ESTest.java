/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:49:17 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.functors.UniquePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SwitchClosure_ESTest extends SwitchClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      closureArray0[0] = closure0;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      closureArray0[1] = (Closure<Object>) chainedClosure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      ForClosure<Object> forClosure0 = new ForClosure<Object>(4392, closure0);
      closureArray0[4] = (Closure<Object>) forClosure0;
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super SwitchClosure<Transformer<Object, Boolean>>>[]) predicateArray0, (Closure<? super SwitchClosure<Transformer<Object, Boolean>>>[]) closureArray0, (Closure<? super SwitchClosure<Transformer<Object, Boolean>>>) closureArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[1] = predicate1;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = ForClosure.forClosure(0, (Closure<? super Object>) closureArray0[0]);
      closureArray0[1] = closure0;
      SwitchClosure<TransformerPredicate<Object>> switchClosure0 = new SwitchClosure<TransformerPredicate<Object>>(predicateArray0, closureArray0, closure0);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("1", classArray0, predicateArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      switchClosure0.execute(transformerPredicate0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      SwitchClosure<WhileClosure<String>> switchClosure0 = new SwitchClosure<WhileClosure<String>>((Predicate<? super WhileClosure<String>>[]) null, closureArray0, closureArray0[0]);
      Predicate<? super WhileClosure<String>>[] predicateArray0 = switchClosure0.getPredicates();
      assertNull(predicateArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      SwitchClosure<SwitchClosure<InstanceofPredicate>> switchClosure0 = new SwitchClosure<SwitchClosure<InstanceofPredicate>>(predicateArray0, closureArray0, transformerClosure0);
      Predicate<? super SwitchClosure<InstanceofPredicate>>[] predicateArray1 = switchClosure0.getPredicates();
      assertEquals(2, predicateArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<ExceptionPredicate<InstanceofPredicate>> switchClosure0 = new SwitchClosure<ExceptionPredicate<InstanceofPredicate>>(predicateArray0, (Closure<? super ExceptionPredicate<InstanceofPredicate>>[]) null, closure0);
      Closure<? super ExceptionPredicate<InstanceofPredicate>>[] closureArray0 = switchClosure0.getClosures();
      assertNull(closureArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      Object object0 = new Object();
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate(object0);
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      IfClosure<Boolean> ifClosure0 = new IfClosure<Boolean>(predicate0, closure0, closure0);
      SwitchClosure<Boolean> switchClosure0 = new SwitchClosure<Boolean>(predicateArray0, closureArray0, ifClosure0);
      Closure<? super Boolean>[] closureArray1 = switchClosure0.getClosures();
      assertEquals(1, closureArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super Object>[]) predicateArray0, (Closure<? super Object>[]) closureArray0, (Closure<? super Object>) closure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      SwitchClosure<ExceptionPredicate<InstanceofPredicate>> switchClosure0 = new SwitchClosure<ExceptionPredicate<InstanceofPredicate>>(predicateArray0, (Closure<? super ExceptionPredicate<InstanceofPredicate>>[]) null, closure0);
      ExceptionPredicate<InstanceofPredicate> exceptionPredicate0 = (ExceptionPredicate<InstanceofPredicate>) mock(ExceptionPredicate.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        switchClosure0.execute(exceptionPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) integer0, comparator0);
      predicateArray0[1] = predicate1;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      SwitchClosure<TransformerPredicate<Object>> switchClosure0 = new SwitchClosure<TransformerPredicate<Object>>(predicateArray0, closureArray0, closureArray0[0]);
      Class<InstanceofPredicate>[] classArray0 = (Class<InstanceofPredicate>[]) Array.newInstance(Class.class, 2);
      InvokerTransformer<Object, Boolean> invokerTransformer0 = new InvokerTransformer<Object, Boolean>("1", classArray0, predicateArray0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(invokerTransformer0);
      // Undeclared exception!
      try { 
        switchClosure0.execute(transformerPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      SwitchClosure<UniquePredicate<Object>> switchClosure0 = new SwitchClosure<UniquePredicate<Object>>(predicateArray0, closureArray0, closure0);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      switchClosure0.execute(uniquePredicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Predicate<ExceptionPredicate<Object>>, Closure<ExceptionPredicate<Object>>> hashMap0 = new HashMap<Predicate<ExceptionPredicate<Object>>, Closure<ExceptionPredicate<Object>>>();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      UniquePredicate<Object> uniquePredicate0 = new UniquePredicate<Object>();
      predicateArray0[2] = (Predicate<Object>) uniquePredicate0;
      Predicate<ExceptionPredicate<Object>> predicate0 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super ExceptionPredicate<Object>>) predicateArray0[2]);
      Closure<ExceptionPredicate<Object>> closure0 = ExceptionClosure.exceptionClosure();
      hashMap0.put(predicate0, closure0);
      Closure<ExceptionPredicate<Object>> closure1 = SwitchClosure.switchClosure((Map<Predicate<ExceptionPredicate<Object>>, Closure<ExceptionPredicate<Object>>>) hashMap0);
      assertFalse(closure1.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate and closure map must not be null
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<AllPredicate<Boolean>> closure0 = SwitchClosure.switchClosure((Predicate<? super AllPredicate<Boolean>>[]) predicateArray0, (Closure<? super AllPredicate<Boolean>>[]) closureArray0, (Closure<? super AllPredicate<Boolean>>) null);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 2);
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicate0, predicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      predicateArray0[1] = predicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>((Transformer<? super Object, ?>) null);
      closureArray0[0] = (Closure<Object>) transformerClosure0;
      closureArray0[1] = closureArray0[0];
      Closure<Boolean> closure0 = SwitchClosure.switchClosure((Predicate<? super Boolean>[]) predicateArray0, (Closure<? super Boolean>[]) closureArray0, (Closure<? super Boolean>) closureArray0[0]);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      predicateArray0[0] = predicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      predicateArray0[2] = predicateArray0[1];
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(allPredicate0, chainedClosure0);
      ForClosure<Object> forClosure0 = new ForClosure<Object>(3, ifClosure0);
      closureArray0[0] = (Closure<Object>) forClosure0;
      closureArray0[1] = closureArray0[0];
      closureArray0[2] = (Closure<Object>) chainedClosure0;
      closureArray0[3] = (Closure<Object>) chainedClosure0;
      closureArray0[4] = (Closure<Object>) ifClosure0;
      Predicate<Object>[] predicateArray1 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 7);
      predicateArray1[0] = predicate0;
      predicateArray1[1] = predicate0;
      predicateArray1[2] = (Predicate<Object>) allPredicate0;
      predicateArray1[3] = predicateArray0[2];
      predicateArray1[4] = (Predicate<Object>) allPredicate0;
      predicateArray1[5] = predicateArray0[0];
      NullIsFalsePredicate<Object> nullIsFalsePredicate0 = new NullIsFalsePredicate<Object>(allPredicate0);
      predicateArray1[6] = (Predicate<Object>) nullIsFalsePredicate0;
      // Undeclared exception!
      try { 
        SwitchClosure.switchClosure((Predicate<? super TransformerPredicate<Boolean>>[]) predicateArray1, (Closure<? super TransformerPredicate<Boolean>>[]) closureArray0, (Closure<? super TransformerPredicate<Boolean>>) forClosure0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The predicate and closure arrays must be the same size
         //
         verifyException("org.apache.commons.collections4.functors.SwitchClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Closure<SwitchClosure<NonePredicate<Boolean>>> closure1 = SwitchClosure.switchClosure((Predicate<? super SwitchClosure<NonePredicate<Boolean>>>[]) predicateArray0, (Closure<? super SwitchClosure<NonePredicate<Boolean>>>[]) closureArray0, (Closure<? super SwitchClosure<NonePredicate<Boolean>>>) closure0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      SwitchClosure<AllPredicate<String>> switchClosure0 = new SwitchClosure<AllPredicate<String>>(predicateArray0, closureArray0, closure0);
      Closure<? super AllPredicate<String>>[] closureArray1 = switchClosure0.getClosures();
      assertEquals(0, closureArray1.length);
  }
}
