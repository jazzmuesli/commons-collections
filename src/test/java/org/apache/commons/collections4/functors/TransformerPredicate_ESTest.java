/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:09:03 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransformerPredicate_ESTest extends TransformerPredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>((Transformer<? super Integer, Boolean>) null);
      Transformer<? super Integer, Boolean> transformer0 = transformerPredicate0.getTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<Object> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      PredicateTransformer<String> predicateTransformer0 = new PredicateTransformer<String>(predicate0);
      TransformerPredicate<String> transformerPredicate0 = new TransformerPredicate<String>(predicateTransformer0);
      boolean boolean0 = transformerPredicate0.evaluate("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(allPredicate0, allPredicate0);
      predicateArray0[0] = (Predicate<Object>) orPredicate0;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      Transformer<Object, Boolean> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) orPredicate0, (Transformer<? super Object, ? extends Boolean>) transformer0, (Transformer<? super Object, ? extends Boolean>) transformer0);
      TransformerPredicate<Predicate<Object>> transformerPredicate0 = new TransformerPredicate<Predicate<Object>>(transformer1);
      // Undeclared exception!
      try { 
        transformerPredicate0.evaluate(allPredicate0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      TransformerPredicate<Boolean> transformerPredicate0 = new TransformerPredicate<Boolean>((Transformer<? super Boolean, Boolean>) null);
      // Undeclared exception!
      try { 
        transformerPredicate0.evaluate(boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>("57AY=qmyZ)");
      predicateArray0[0] = (Predicate<Object>) identityPredicate0;
      Predicate<Object> predicate0 = NotPredicate.notPredicate((Predicate<? super Object>) identityPredicate0);
      predicateArray0[1] = predicate0;
      Transformer<Object, Boolean>[] transformerArray0 = (Transformer<Object, Boolean>[]) Array.newInstance(Transformer.class, 1);
      PredicateTransformer<Object> predicateTransformer0 = new PredicateTransformer<Object>(predicate0);
      SwitchTransformer<Object, Boolean> switchTransformer0 = new SwitchTransformer<Object, Boolean>(predicateArray0, transformerArray0, predicateTransformer0);
      TransformerPredicate<Boolean> transformerPredicate0 = new TransformerPredicate<Boolean>(switchTransformer0);
      Boolean boolean0 = new Boolean("57AY=qmyZ)");
      // Undeclared exception!
      try { 
        transformerPredicate0.evaluate(boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.collections4.functors.SwitchTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Transformer<Object, Boolean> transformer0 = InvokerTransformer.invokerTransformer("The transformer to call must not be null", (Class<?>[]) classArray0, (Object[]) classArray0);
      TransformerPredicate<Integer> transformerPredicate0 = new TransformerPredicate<Integer>(transformer0);
      // Undeclared exception!
      try { 
        transformerPredicate0.evaluate((Integer) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Boolean boolean0 = new Boolean("kQ-[e\"U9`C&");
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.constantTransformer(boolean0);
      Predicate<Transformer<Object, Boolean>> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Transformer<Object, Boolean>, Boolean>) transformer0);
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      boolean boolean1 = transformerPredicate0.evaluate(predicate0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        TransformerPredicate.transformerPredicate((Transformer<? super String, Boolean>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The transformer to call must not be null
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Factory<Boolean> factory0 = ConstantFactory.constantFactory(boolean0);
      FactoryTransformer<Object, Boolean> factoryTransformer0 = new FactoryTransformer<Object, Boolean>(factory0);
      TransformerPredicate<InstanceofPredicate> transformerPredicate0 = new TransformerPredicate<InstanceofPredicate>(factoryTransformer0);
      Transformer<? super InstanceofPredicate, Boolean> transformer0 = transformerPredicate0.getTransformer();
      assertNotNull(transformer0);
  }
}
