/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:55:30 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ConstantTransformer_ESTest extends ConstantTransformer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantTransformer<Integer, String> constantTransformer0 = new ConstantTransformer<Integer, String>(" T");
      Integer integer0 = new Integer(0);
      ConstantTransformer<Object, Integer> constantTransformer1 = new ConstantTransformer<Object, Integer>(integer0);
      ConstantTransformer.constantTransformer(constantTransformer1);
      constantTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      ConstantTransformer<Object, Object> constantTransformer1 = new ConstantTransformer<Object, Object>(constantTransformer0);
      boolean boolean0 = constantTransformer1.equals(constantTransformer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantTransformer<ConstantTransformer<Integer, String>, Integer> constantTransformer0 = new ConstantTransformer<ConstantTransformer<Integer, String>, Integer>((Integer) null);
      ConstantTransformer<Integer, String> constantTransformer1 = new ConstantTransformer<Integer, String>("");
      Integer integer0 = constantTransformer0.transform(constantTransformer1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConstantTransformer<String, Integer> constantTransformer0 = new ConstantTransformer<String, Integer>((Integer) null);
      Integer integer0 = constantTransformer0.getConstant();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConstantTransformer<Integer, Object> constantTransformer0 = new ConstantTransformer<Integer, Object>("");
      boolean boolean0 = constantTransformer0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>((Integer) null);
      constantTransformer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-229));
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      Integer integer1 = new Integer((-229));
      ConstantTransformer<String, Integer> constantTransformer1 = new ConstantTransformer<String, Integer>(integer1);
      boolean boolean0 = constantTransformer1.equals(constantTransformer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer((Integer) null);
      assertNotNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-229));
      ConstantTransformer<Integer, Integer> constantTransformer0 = new ConstantTransformer<Integer, Integer>(integer0);
      Transformer<String, Object> transformer0 = ConstantTransformer.constantTransformer((Object) constantTransformer0);
      ConstantTransformer<String, Integer> constantTransformer1 = new ConstantTransformer<String, Integer>(integer0);
      boolean boolean0 = constantTransformer1.equals(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Transformer<Object, Object> transformer0 = ConstantTransformer.nullTransformer();
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("org.apachecommons.collections4.iterators.ObjectGraphIteratorTest$Forest");
      boolean boolean0 = constantTransformer0.equals(transformer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("v");
      ConstantTransformer<Object, Object> constantTransformer1 = new ConstantTransformer<Object, Object>(constantTransformer0);
      Object object0 = constantTransformer1.getConstant();
      ConstantTransformer<String, Object> constantTransformer2 = new ConstantTransformer<String, Object>(object0);
      Object object1 = constantTransformer2.transform("v");
      assertSame(object1, object0);
  }
}
