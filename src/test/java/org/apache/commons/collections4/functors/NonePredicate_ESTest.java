/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:01:11 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class NonePredicate_ESTest extends NonePredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        NonePredicate.nonePredicate((Collection<? extends Predicate<? super NullIsTruePredicate<FalsePredicate>>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      Transformer<Object, Boolean> transformer0 = (Transformer<Object, Boolean>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(transformer0);
      predicateArray0[0] = (Predicate<Object>) transformerPredicate0;
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      NonePredicate<ComparatorPredicate<InstanceofPredicate>> nonePredicate0 = new NonePredicate<ComparatorPredicate<InstanceofPredicate>>(predicateArray0);
      ComparatorPredicate.Criterion comparatorPredicate_Criterion0 = ComparatorPredicate.Criterion.EQUAL;
      ComparatorPredicate<InstanceofPredicate> comparatorPredicate0 = new ComparatorPredicate<InstanceofPredicate>(instanceofPredicate0, (Comparator<InstanceofPredicate>) null, comparatorPredicate_Criterion0);
      // Undeclared exception!
      try { 
        nonePredicate0.evaluate(comparatorPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      predicateArray0[2] = (Predicate<Object>) anyPredicate0;
      NonePredicate<EqualPredicate<Object>> nonePredicate0 = new NonePredicate<EqualPredicate<Object>>(predicateArray0);
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0);
      // Undeclared exception!
      nonePredicate0.evaluate(equalPredicate0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      NonePredicate<NullIsTruePredicate<Object>> nonePredicate0 = new NonePredicate<NullIsTruePredicate<Object>>((Predicate<? super NullIsTruePredicate<Object>>[]) null);
      Predicate<Object> predicate0 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      // Undeclared exception!
      try { 
        nonePredicate0.evaluate(nullIsTruePredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NonePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Class<InstanceofPredicate> class1 = InstanceofPredicate.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class1);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = predicate0;
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      boolean boolean0 = nonePredicate0.evaluate(instanceofPredicate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      NonePredicate<NullPredicate<Integer>> nonePredicate0 = new NonePredicate<NullPredicate<Integer>>(predicateArray0);
      NullPredicate<Integer> nullPredicate0 = (NullPredicate<Integer>) mock(NullPredicate.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = nonePredicate0.evaluate(nullPredicate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Predicate<IdentityPredicate<AllPredicate>> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super IdentityPredicate<AllPredicate>>>) linkedList0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Integer> predicate0 = NonePredicate.nonePredicate((Predicate<? super Integer>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 5);
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[1] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[2] = (Predicate<Object>) instanceofPredicate0;
      predicateArray0[3] = (Predicate<Object>) instanceofPredicate0;
      IdentityPredicate<Object> identityPredicate0 = new IdentityPredicate<Object>((Object) null);
      predicateArray0[4] = (Predicate<Object>) identityPredicate0;
      Predicate<TransformerPredicate<Integer>> predicate0 = NonePredicate.nonePredicate((Predicate<? super TransformerPredicate<Integer>>[]) predicateArray0);
      assertNotNull(predicate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      linkedList0.offer(instanceofPredicate0);
      Predicate<NullPredicate<AndPredicate>> predicate0 = NonePredicate.nonePredicate((Collection<? extends Predicate<? super NullPredicate<AndPredicate>>>) linkedList0);
      assertNotNull(predicate0);
  }
}
