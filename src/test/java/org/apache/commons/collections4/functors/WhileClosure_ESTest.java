/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:00:47 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AndPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ClosureTransformer;
import org.apache.commons.collections4.functors.ComparatorPredicate;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.DefaultEquator;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.NOPTransformer;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class WhileClosure_ESTest extends WhileClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate0, (Closure<? super Object>) null, true);
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      
      Closure<? super Object> closure0 = whileClosure0.getClosure();
      assertTrue(whileClosure0.isDoLoop());
      assertNull(closure0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      assertNotNull(chainedClosure0);
      assertEquals(4, closureArray0.length);
      
      closureArray0[0] = (Closure<Object>) chainedClosure0;
      Transformer<Object, InstanceofPredicate> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertNotNull(closure0);
      
      closureArray0[1] = closure0;
      Closure<Object> closure1 = NOPClosure.nopClosure();
      assertNotNull(closure1);
      assertFalse(closure1.equals((Object)closure0));
      
      closureArray0[2] = closure1;
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(closure0));
      
      Closure<Object> closure2 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      assertSame(closure2, closure1);
      assertEquals(0, linkedList0.size());
      assertNotNull(closure2);
      assertFalse(linkedList0.contains(closure2));
      assertFalse(closure2.equals((Object)closure0));
      
      closureArray0[3] = closure2;
      Closure<Object> closure3 = ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
      assertNotNull(closure3);
      assertEquals(4, closureArray0.length);
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
      
      IfClosure<Object> ifClosure0 = new IfClosure<Object>((Predicate<? super Object>) null, closure3, closure1);
      assertNotNull(ifClosure0);
      assertEquals(4, closureArray0.length);
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure3));
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
      
      ForClosure<Object> forClosure0 = new ForClosure<Object>(0, ifClosure0);
      assertEquals(0, forClosure0.getCount());
      assertNotNull(forClosure0);
      assertEquals(4, closureArray0.length);
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure3));
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>((Predicate<? super Object>) null, forClosure0, true);
      assertEquals(0, forClosure0.getCount());
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertEquals(4, closureArray0.length);
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure3));
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
      
      Predicate<? super Object> predicate0 = whileClosure0.getPredicate();
      assertSame(closure1, closure2);
      assertEquals(0, forClosure0.getCount());
      assertTrue(whileClosure0.isDoLoop());
      assertNull(predicate0);
      assertEquals(4, closureArray0.length);
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure3));
      assertFalse(closure3.equals((Object)closure1));
      assertFalse(closure3.equals((Object)closure2));
      assertFalse(closure3.equals((Object)closure0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Predicate<Object> predicate0 = null;
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(transformer0);
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(closure0);
      
      WhileClosure<String> whileClosure0 = new WhileClosure<String>((Predicate<? super String>) null, closure0, true);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Closure<Object>>) null, (Closure<? super Closure<Object>>) closure0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 0);
      Predicate<Object> predicate0 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate0);
      assertEquals(0, predicateArray0.length);
      
      Closure<Object> closure0 = null;
      boolean boolean0 = true;
      WhileClosure<String> whileClosure0 = new WhileClosure<String>(predicate0, (Closure<? super String>) null, true);
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertEquals(0, predicateArray0.length);
      
      String string0 = ")tj$=V%";
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Closure<Object>>) predicate0, (Closure<? super Closure<Object>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 3);
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>(predicateArray0);
      assertNotNull(onePredicate0);
      assertEquals(3, predicateArray0.length);
      
      predicateArray0[0] = (Predicate<Object>) onePredicate0;
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      assertNotNull(predicate0);
      
      predicateArray0[1] = predicate0;
      LinkedList<InstanceofPredicate> linkedList0 = new LinkedList<InstanceofPredicate>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate1 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      predicateArray0[2] = predicate1;
      Predicate<Object> predicate2 = OnePredicate.onePredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotSame(predicate2, predicate1);
      assertNotNull(predicate2);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      NotPredicate<Object> notPredicate0 = new NotPredicate<Object>(predicate2);
      assertNotNull(notPredicate0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<Object> predicate3 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) notPredicate0);
      assertNotSame(predicate2, predicate1);
      assertNotNull(predicate3);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate3);
      assertNotNull(nullIsTruePredicate0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      WhileClosure<Closure<Object>> whileClosure0 = new WhileClosure<Closure<Object>>(nullIsTruePredicate0, (Closure<? super Closure<Object>>) null, true);
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      WhileClosure<Transformer<Object, Boolean>> whileClosure1 = new WhileClosure<Transformer<Object, Boolean>>(predicate2, (Closure<? super Transformer<Object, Boolean>>) null, true);
      assertTrue(whileClosure1.isDoLoop());
      assertNotNull(whileClosure1);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      
      Predicate<? super Transformer<Object, Boolean>> predicate4 = whileClosure1.getPredicate();
      assertNotSame(predicate2, predicate1);
      assertTrue(whileClosure1.isDoLoop());
      assertNotNull(predicate4);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      
      Closure<Closure<Object>> closure0 = WhileClosure.whileClosure((Predicate<? super Closure<Object>>) predicate1, (Closure<? super Closure<Object>>) whileClosure0, false);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(closure0);
      assertEquals(3, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Closure<String>>) predicate1, (Closure<? super Closure<String>>) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OnePredicate<Object> onePredicate0 = new OnePredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(onePredicate0);
      
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) null);
      assertNotNull(closure0);
      
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>((Predicate<? super Object>[]) null, closureArray0, closure0);
      assertNotNull(switchClosure0);
      assertEquals(0, closureArray0.length);
      
      WhileClosure<Closure<Object>> whileClosure0 = new WhileClosure<Closure<Object>>(onePredicate0, switchClosure0, true);
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertEquals(0, closureArray0.length);
      
      boolean boolean0 = whileClosure0.isDoLoop();
      assertTrue(whileClosure0.isDoLoop());
      assertEquals(0, closureArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(closure0);
      assertFalse(linkedList0.contains(closure0));
      
      ForClosure<Object> forClosure0 = new ForClosure<Object>(1725, closure0);
      assertEquals(0, linkedList0.size());
      assertEquals(1725, forClosure0.getCount());
      assertNotNull(forClosure0);
      assertFalse(linkedList0.contains(closure0));
      
      boolean boolean0 = false;
      WhileClosure<String> whileClosure0 = new WhileClosure<String>((Predicate<? super String>) null, forClosure0, false);
      assertEquals(0, linkedList0.size());
      assertEquals(1725, forClosure0.getCount());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertFalse(linkedList0.contains(closure0));
      
      // Undeclared exception!
      try { 
        whileClosure0.execute("zPb$lpmDJaq3]f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      assertNotNull(predicate0);
      
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      assertNotNull(nullIsTruePredicate0);
      
      Closure<Object> closure0 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure0);
      
      WhileClosure<Closure<Object>> whileClosure0 = new WhileClosure<Closure<Object>>(nullIsTruePredicate0, closure0, true);
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      
      Closure<? super Closure<Object>> closure1 = whileClosure0.getClosure();
      assertTrue(whileClosure0.isDoLoop());
      assertNotNull(closure1);
      
      WhileClosure<Object> whileClosure1 = new WhileClosure<Object>(predicate0, closure0, false);
      assertFalse(whileClosure1.isDoLoop());
      assertNotNull(whileClosure1);
      
      Predicate<? super Object> predicate1 = whileClosure1.getPredicate();
      assertFalse(whileClosure1.isDoLoop());
      assertNotNull(predicate1);
      
      WhileClosure<String> whileClosure2 = new WhileClosure<String>(predicate1, closure0, false);
      assertFalse(whileClosure1.isDoLoop());
      assertFalse(whileClosure2.isDoLoop());
      assertNotNull(whileClosure2);
      
      Closure<? super String> closure2 = whileClosure2.getClosure();
      assertFalse(whileClosure1.isDoLoop());
      assertFalse(whileClosure2.isDoLoop());
      assertNotNull(closure2);
      
      WhileClosure<InstanceofPredicate> whileClosure3 = new WhileClosure<InstanceofPredicate>(nullIsTruePredicate0, closure0, false);
      assertFalse(whileClosure3.isDoLoop());
      assertNotNull(whileClosure3);
      
      Class<Object> class0 = Object.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      Predicate<Object> predicate2 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate0));
      
      // Undeclared exception!
      try { 
        whileClosure3.execute(instanceofPredicate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      assertNotNull(instanceofPredicate0);
      
      predicateArray0[0] = (Predicate<Object>) instanceofPredicate0;
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>(predicateArray0);
      assertNotNull(allPredicate0);
      assertEquals(4, predicateArray0.length);
      
      predicateArray0[1] = (Predicate<Object>) allPredicate0;
      OrPredicate<Object> orPredicate0 = new OrPredicate<Object>(predicateArray0[0], allPredicate0);
      assertNotNull(orPredicate0);
      assertEquals(4, predicateArray0.length);
      
      predicateArray0[2] = (Predicate<Object>) orPredicate0;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      predicateArray0[3] = predicate0;
      AnyPredicate<Object> anyPredicate0 = new AnyPredicate<Object>(predicateArray0);
      assertNotNull(anyPredicate0);
      assertEquals(4, predicateArray0.length);
      
      Predicate<Object> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Object>) anyPredicate0);
      assertNotNull(predicate1);
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(closure0);
      assertFalse(linkedList0.contains(closure0));
      
      Closure<Object> closure1 = ForClosure.forClosure(37, (Closure<? super Object>) closure0);
      assertEquals(0, linkedList0.size());
      assertNotNull(closure1);
      assertFalse(linkedList0.contains(closure0));
      assertFalse(closure1.equals((Object)closure0));
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicate1, closure1, false);
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(whileClosure0);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      
      Closure<Closure<Object>> closure2 = WhileClosure.whileClosure((Predicate<? super Closure<Object>>) allPredicate0, (Closure<? super Closure<Object>>) closure1, false);
      assertEquals(0, linkedList0.size());
      assertNotNull(closure2);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      
      Closure<? super Object> closure3 = whileClosure0.getClosure();
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(closure3);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      
      WhileClosure<String> whileClosure1 = new WhileClosure<String>(predicate1, closure3, true);
      assertTrue(whileClosure1.isDoLoop());
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(whileClosure1);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      
      Closure<? super String> closure4 = whileClosure1.getClosure();
      assertTrue(whileClosure1.isDoLoop());
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(closure4);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure1.equals((Object)closure0));
      
      Transformer<Object, String> transformer0 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      assertNotNull(transformerClosure0);
      
      Predicate<Object> predicate2 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicateArray0[1]);
      assertNotNull(predicate2);
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      transformerClosure0.execute(orPredicate0);
      assertEquals(4, predicateArray0.length);
      
      Predicate<Object> predicate3 = OrPredicate.orPredicate((Predicate<? super Object>) predicate2, (Predicate<? super Object>) predicateArray0[0]);
      assertNotNull(predicate3);
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      
      Closure<Object> closure5 = WhileClosure.whileClosure((Predicate<? super Object>) predicateArray0[2], (Closure<? super Object>) transformerClosure0, false);
      assertNotNull(closure5);
      assertEquals(4, predicateArray0.length);
      assertFalse(closure5.equals((Object)closure1));
      assertFalse(closure5.equals((Object)closure0));
      
      Closure<? super String> closure6 = whileClosure1.getClosure();
      assertSame(closure6, closure4);
      assertTrue(whileClosure1.isDoLoop());
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(closure6);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure0.equals((Object)closure5));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure5));
      
      WhileClosure<Integer> whileClosure2 = new WhileClosure<Integer>(predicate0, whileClosure0, false);
      assertFalse(whileClosure2.isDoLoop());
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(whileClosure2);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure0.equals((Object)closure5));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure5));
      
      Predicate<? super Integer> predicate4 = whileClosure2.getPredicate();
      assertFalse(whileClosure2.isDoLoop());
      assertEquals(0, linkedList0.size());
      assertFalse(whileClosure0.isDoLoop());
      assertNotNull(predicate4);
      assertFalse(linkedList0.contains(closure0));
      assertEquals(4, predicateArray0.length);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(closure0.equals((Object)closure1));
      assertFalse(closure0.equals((Object)closure5));
      assertFalse(closure1.equals((Object)closure0));
      assertFalse(closure1.equals((Object)closure5));
      
      // Undeclared exception!
      whileClosure0.execute("org.apache.commons.collections4.functors.NullIsExceptionPredicate");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(object0);
      assertNotNull(equalPredicate0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 1);
      predicateArray0[0] = (Predicate<Object>) equalPredicate0;
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 1);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(closure0);
      
      IfClosure<Object> ifClosure0 = new IfClosure<Object>(predicateArray0[0], closure0, closure0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(ifClosure0);
      assertEquals(1, predicateArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DefaultEquator<Object> defaultEquator0 = DefaultEquator.defaultEquator();
      assertNotNull(defaultEquator0);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      
      EqualPredicate<Object> equalPredicate1 = new EqualPredicate<Object>(object1, defaultEquator0);
      assertNotNull(equalPredicate1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(object1.equals((Object)object0));
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      Closure<Object> closure1 = hashMap0.put(equalPredicate1, ifClosure0);
      assertNotSame(object1, object0);
      assertNotSame(equalPredicate1, equalPredicate0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(closure1);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertEquals(1, predicateArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      Closure<Object> closure2 = IfClosure.ifClosure((Predicate<? super Object>) equalPredicate0, (Closure<? super Object>) ifClosure0);
      assertNotSame(object0, object1);
      assertNotSame(equalPredicate0, equalPredicate1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(closure2);
      assertEquals(1, predicateArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(equalPredicate0.equals((Object)equalPredicate1));
      assertFalse(closure2.equals((Object)closure0));
      
      closureArray0[0] = closure2;
      SwitchClosure<Object> switchClosure0 = new SwitchClosure<Object>(predicateArray0, closureArray0, ifClosure0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(switchClosure0);
      assertEquals(1, predicateArray0.length);
      assertEquals(1, closureArray0.length);
      assertFalse(closure0.equals((Object)closure2));
      
      Closure<Closure<Object>> closure3 = WhileClosure.whileClosure((Predicate<? super Closure<Object>>) equalPredicate0, (Closure<? super Closure<Object>>) switchClosure0, false);
      assertNotSame(object0, object1);
      assertNotSame(equalPredicate0, equalPredicate1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(closure3);
      assertEquals(1, predicateArray0.length);
      assertEquals(1, closureArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(equalPredicate0.equals((Object)equalPredicate1));
      assertFalse(closure0.equals((Object)closure2));
      
      WhileClosure<Object> whileClosure0 = new WhileClosure<Object>(predicateArray0[0], ifClosure0, false);
      assertFalse(whileClosure0.isDoLoop());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(whileClosure0);
      assertEquals(1, predicateArray0.length);
      assertFalse(closure0.equals((Object)closure2));
      
      Integer integer0 = new Integer(1583);
      assertNotNull(integer0);
      assertEquals(1583, (int)integer0);
      
      whileClosure0.execute(integer0);
      assertFalse(whileClosure0.isDoLoop());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(1, predicateArray0.length);
      assertFalse(closure0.equals((Object)closure2));
      
      Closure<String> closure4 = WhileClosure.whileClosure((Predicate<? super String>) predicateArray0[0], (Closure<? super String>) whileClosure0, false);
      assertFalse(whileClosure0.isDoLoop());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(closure4);
      assertEquals(1, predicateArray0.length);
      assertFalse(closure0.equals((Object)closure2));
      
      WhileClosure<Integer> whileClosure1 = new WhileClosure<Integer>(predicateArray0[0], closure2, false);
      assertFalse(whileClosure1.isDoLoop());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(whileClosure1);
      assertEquals(1, predicateArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(equalPredicate0.equals((Object)equalPredicate1));
      assertFalse(closure0.equals((Object)closure2));
      assertFalse(closure2.equals((Object)closure0));
      
      Predicate<? super Integer> predicate0 = whileClosure1.getPredicate();
      assertNotSame(object0, object1);
      assertNotSame(equalPredicate0, equalPredicate1);
      assertFalse(whileClosure1.isDoLoop());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(predicate0);
      assertEquals(1, predicateArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(equalPredicate0.equals((Object)equalPredicate1));
      assertFalse(closure0.equals((Object)closure2));
      assertFalse(closure2.equals((Object)closure0));
      
      Closure<Object> closure5 = ExceptionClosure.exceptionClosure();
      assertNotNull(closure5);
      assertFalse(closure5.equals((Object)closure2));
      assertFalse(closure5.equals((Object)closure0));
      
      WhileClosure<Transformer<String, Integer>> whileClosure2 = new WhileClosure<Transformer<String, Integer>>(equalPredicate1, closure5, false);
      assertFalse(whileClosure2.isDoLoop());
      assertNotNull(whileClosure2);
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(closure5.equals((Object)closure2));
      assertFalse(closure5.equals((Object)closure0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      
      boolean boolean0 = whileClosure2.isDoLoop();
      assertNotSame(object1, object0);
      assertNotSame(equalPredicate1, equalPredicate0);
      assertFalse(whileClosure2.isDoLoop());
      assertEquals((-1), DefaultEquator.HASHCODE_NULL);
      assertFalse(closure5.equals((Object)closure2));
      assertFalse(closure5.equals((Object)closure0));
      assertFalse(object1.equals((Object)object0));
      assertFalse(equalPredicate1.equals((Object)equalPredicate0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AndPredicate<Object> andPredicate0 = new AndPredicate<Object>((Predicate<? super Object>) null, (Predicate<? super Object>) null);
      assertNotNull(andPredicate0);
      
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(closure0);
      
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Object>) null, (Closure<? super Object>) closure0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) "");
      Integer integer0 = new Integer(0);
      ConstantFactory<Integer> constantFactory0 = new ConstantFactory<Integer>(integer0);
      FactoryTransformer<Object, Integer> factoryTransformer0 = new FactoryTransformer<Object, Integer>(constantFactory0);
      factoryTransformer0.transform(predicate0);
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) factoryTransformer0);
      WhileClosure<Boolean> whileClosure0 = new WhileClosure<Boolean>(predicate0, closure0, true);
      PredicateTransformer<Closure<Object>> predicateTransformer0 = new PredicateTransformer<Closure<Object>>(predicate0);
      Boolean boolean0 = predicateTransformer0.transform(closure0);
      whileClosure0.execute(boolean0);
      WhileClosure<Object> whileClosure1 = new WhileClosure<Object>(predicate0, closure0, true);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      Predicate<Object> predicate1 = ComparatorPredicate.comparatorPredicate((Object) "", comparator0);
      Closure<Closure<Object>> closure1 = WhileClosure.whileClosure((Predicate<? super Closure<Object>>) predicate1, (Closure<? super Closure<Object>>) closure0, true);
      whileClosure1.execute(boolean0);
      whileClosure0.getClosure();
      WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, true);
      WhileClosure<Closure<Object>> whileClosure2 = new WhileClosure<Closure<Object>>(predicate0, closure1, true);
      // Undeclared exception!
      whileClosure2.execute(closure0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1319));
      Predicate<Object> predicate0 = IdentityPredicate.identityPredicate((Object) integer0);
      NOPClosure.nopClosure();
      Transformer<Object, Object> transformer0 = NOPTransformer.nopTransformer();
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(transformer0);
      // Undeclared exception!
      try { 
        WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure must not be null
         //
         verifyException("org.apache.commons.collections4.functors.WhileClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExceptionPredicate.exceptionPredicate();
      Object object0 = new Object();
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 6);
      // Undeclared exception!
      try { 
        AnyPredicate.anyPredicate((Predicate<? super Object>[]) predicateArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate array must not contain a null predicate, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }
}
