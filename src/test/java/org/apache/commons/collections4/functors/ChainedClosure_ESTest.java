/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:56:42 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.functors.ChainedClosure;
import org.apache.commons.collections4.functors.ExceptionClosure;
import org.apache.commons.collections4.functors.ForClosure;
import org.apache.commons.collections4.functors.IfClosure;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.NOPClosure;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.TruePredicate;
import org.apache.commons.collections4.functors.WhileClosure;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ChainedClosure_ESTest extends ChainedClosure_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ChainedClosure<ChainedClosure<Boolean>> chainedClosure0 = new ChainedClosure<ChainedClosure<Boolean>>((Closure<? super ChainedClosure<Boolean>>[]) null);
      Closure<? super ChainedClosure<Boolean>>[] closureArray0 = chainedClosure0.getClosures();
      assertNull(closureArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      ChainedClosure<ExceptionClosure<String>> chainedClosure0 = new ChainedClosure<ExceptionClosure<String>>(closureArray0);
      Closure<? super ExceptionClosure<String>>[] closureArray1 = chainedClosure0.getClosures();
      assertEquals(0, closureArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 2);
      Closure<Object> closure0 = NOPClosure.nopClosure();
      closureArray0[0] = closure0;
      Closure<Object> closure1 = ExceptionClosure.exceptionClosure();
      closureArray0[1] = closure1;
      ChainedClosure<Object> chainedClosure0 = new ChainedClosure<Object>(closureArray0);
      // Undeclared exception!
      try { 
        chainedClosure0.execute(closure1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionClosure invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 4);
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      closureArray0[0] = closure0;
      Predicate<Object> predicate0 = TruePredicate.truePredicate();
      Closure<Object> closure1 = WhileClosure.whileClosure((Predicate<? super Object>) predicate0, (Closure<? super Object>) closure0, false);
      Closure<Object>[] closureArray1 = (Closure<Object>[]) Array.newInstance(Closure.class, 6);
      closureArray1[0] = closureArray0[0];
      closureArray1[1] = closure0;
      closureArray1[2] = closure1;
      ChainedClosure<ExceptionClosure<String>> chainedClosure0 = new ChainedClosure<ExceptionClosure<String>>(closureArray1);
      ExceptionClosure<String> exceptionClosure0 = (ExceptionClosure<String>) mock(ExceptionClosure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      chainedClosure0.execute(exceptionClosure0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ChainedClosure<ChainedClosure<String>> chainedClosure0 = new ChainedClosure<ChainedClosure<String>>((Closure<? super ChainedClosure<String>>[]) null);
      // Undeclared exception!
      try { 
        chainedClosure0.execute((ChainedClosure<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 8);
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Closure<? super Object>[]) closureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The closure array must not contain a null closure, index 0 was null
         //
         verifyException("org.apache.commons.collections4.functors.FunctorUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      ChainedClosure<String> chainedClosure0 = new ChainedClosure<String>(closureArray0);
      chainedClosure0.execute("");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      linkedList0.add(closure0);
      Closure<IfClosure<ForClosure>> closure1 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super IfClosure<ForClosure>>>) linkedList0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Closure collection must not be null
         //
         verifyException("org.apache.commons.collections4.functors.ChainedClosure", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 0);
      Closure<WhileClosure<Boolean>> closure0 = ChainedClosure.chainedClosure((Closure<? super WhileClosure<Boolean>>[]) closureArray0);
      assertNotNull(closure0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Closure<Object>> linkedList0 = new LinkedList<Closure<Object>>();
      Closure<Object> closure0 = ChainedClosure.chainedClosure((Collection<? extends Closure<? super Object>>) linkedList0);
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      closureArray0[0] = closure0;
      closureArray0[1] = closure0;
      closureArray0[2] = closure0;
      closureArray0[3] = closure0;
      closureArray0[4] = closure0;
      Closure<ChainedClosure<SwitchClosure<String>>> closure1 = ChainedClosure.chainedClosure((Closure<? super ChainedClosure<SwitchClosure<String>>>[]) closureArray0);
      assertNotNull(closure1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Closure<Object>[] closureArray0 = (Closure<Object>[]) Array.newInstance(Closure.class, 5);
      ChainedClosure<InstanceofPredicate> chainedClosure0 = new ChainedClosure<InstanceofPredicate>(closureArray0);
      Closure<? super InstanceofPredicate>[] closureArray1 = chainedClosure0.getClosures();
      assertEquals(5, closureArray1.length);
  }
}
