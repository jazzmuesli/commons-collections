/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:11:37 GMT 2019
 */

package org.apache.commons.collections4.functors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NonePredicate;
import org.apache.commons.collections4.functors.NotNullPredicate;
import org.apache.commons.collections4.functors.NullIsTruePredicate;
import org.apache.commons.collections4.functors.NullPredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.OrPredicate;
import org.apache.commons.collections4.functors.PredicateTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NullIsTruePredicate_ESTest extends NullIsTruePredicate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Predicate<Object> predicate0 = NullPredicate.nullPredicate();
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = new NullIsTruePredicate<Integer>(predicate0);
      Integer integer0 = new Integer((-2808));
      boolean boolean0 = nullIsTruePredicate0.evaluate(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Transformer<Object, Boolean> transformer0 = ConstantTransformer.nullTransformer();
      Predicate<Object> predicate0 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) transformer0);
      NullIsTruePredicate<Object> nullIsTruePredicate0 = new NullIsTruePredicate<Object>(predicate0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        nullIsTruePredicate0.evaluate(integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException("org.apache.commons.collections4.functors.TransformerPredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 4);
      NonePredicate<Object> nonePredicate0 = new NonePredicate<Object>(predicateArray0);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      ConstantTransformer<Object, InstanceofPredicate> constantTransformer0 = new ConstantTransformer<Object, InstanceofPredicate>(instanceofPredicate0);
      IfTransformer<Object, InstanceofPredicate> ifTransformer0 = new IfTransformer<Object, InstanceofPredicate>(nonePredicate0, constantTransformer0, constantTransformer0);
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>(ifTransformer0, instanceofPredicate0);
      Predicate<Object> predicate0 = OrPredicate.orPredicate((Predicate<? super Object>) transformedPredicate0, (Predicate<? super Object>) instanceofPredicate0);
      predicateArray0[0] = predicate0;
      predicateArray0[1] = predicateArray0[0];
      predicateArray0[2] = (Predicate<Object>) nonePredicate0;
      predicateArray0[3] = (Predicate<Object>) transformedPredicate0;
      Predicate<Boolean> predicate1 = OnePredicate.onePredicate((Predicate<? super Boolean>[]) predicateArray0);
      NullIsTruePredicate<Boolean> nullIsTruePredicate0 = new NullIsTruePredicate<Boolean>(predicate1);
      PredicateTransformer<Transformer<Object, String>> predicateTransformer0 = new PredicateTransformer<Transformer<Object, String>>(instanceofPredicate0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      Boolean boolean0 = predicateTransformer0.transform(transformer0);
      // Undeclared exception!
      try { 
        nullIsTruePredicate0.evaluate(boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NullIsTruePredicate<InstanceofPredicate> nullIsTruePredicate0 = new NullIsTruePredicate<InstanceofPredicate>((Predicate<? super InstanceofPredicate>) null);
      Class<String> class0 = String.class;
      InstanceofPredicate instanceofPredicate0 = new InstanceofPredicate(class0);
      // Undeclared exception!
      try { 
        nullIsTruePredicate0.evaluate(instanceofPredicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Predicate<Object> predicate0 = NotNullPredicate.notNullPredicate();
      NullIsTruePredicate<Integer> nullIsTruePredicate0 = new NullIsTruePredicate<Integer>(predicate0);
      boolean boolean0 = nullIsTruePredicate0.evaluate((Integer) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Transformer<Integer, Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Predicate must not be null
         //
         verifyException("org.apache.commons.collections4.functors.NullIsTruePredicate", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Predicate<Object> predicate0 = FalsePredicate.falsePredicate();
      Predicate<Integer> predicate1 = NullIsTruePredicate.nullIsTruePredicate((Predicate<? super Integer>) predicate0);
      assertNotNull(predicate1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NullIsTruePredicate<Transformer<Object, String>> nullIsTruePredicate0 = new NullIsTruePredicate<Transformer<Object, String>>((Predicate<? super Transformer<Object, String>>) null);
      Predicate<? super Transformer<Object, String>>[] predicateArray0 = nullIsTruePredicate0.getPredicates();
      assertEquals(1, predicateArray0.length);
  }
}
