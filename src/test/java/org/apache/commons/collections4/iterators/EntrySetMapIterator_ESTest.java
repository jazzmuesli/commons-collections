/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:00:05 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EntrySetMapIterator_ESTest extends EntrySetMapIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      hashMap0.put((Object) null, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> entrySetMapIterator0 = new EntrySetMapIterator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.setValue((AbstractMap.SimpleImmutableEntry<Integer, Object>) null);
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put((String) null, (Integer) null);
      EntrySetMapIterator<String, Integer> entrySetMapIterator0 = new EntrySetMapIterator<String, Integer>(hashMap0);
      String string0 = entrySetMapIterator0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (String) null);
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      boolean boolean0 = entrySetMapIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>(hashMap0);
      boolean boolean0 = entrySetMapIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (String) null);
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("NEo>p,#R7]P>").when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.getValue();
      assertEquals("NEo>p,#R7]P>", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, String>();
      Integer integer0 = new Integer(0);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", integer0);
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Object>(abstractMap_SimpleEntry0);
      hashMap0.put(abstractMap_SimpleImmutableEntry0, "");
      EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, String> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleImmutableEntry<Object, Object>, String>(hashMap0);
      entrySetMapIterator0.next();
      AbstractMap.SimpleImmutableEntry<Object, Object> abstractMap_SimpleImmutableEntry1 = entrySetMapIterator0.getKey();
      assertSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object> hashMap0 = new HashMap<AbstractMap.SimpleEntry<Object, Integer>, Object>();
      EntrySetMapIterator<AbstractMap.SimpleEntry<Object, Integer>, Object> entrySetMapIterator0 = new EntrySetMapIterator<AbstractMap.SimpleEntry<Object, Integer>, Object>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleEntry<String, String>> hashMap0 = new HashMap<String, AbstractMap.SimpleEntry<String, String>>();
      EntrySetMapIterator<String, AbstractMap.SimpleEntry<String, String>> entrySetMapIterator0 = new EntrySetMapIterator<String, AbstractMap.SimpleEntry<String, String>>(hashMap0);
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("?w ", "");
      hashMap0.put((String) null, abstractMap_SimpleEntry0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = null;
      try {
        entrySetMapIterator0 = new EntrySetMapIterator<Object, String>((Map<Object, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (String) null);
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> hashMap0 = new HashMap<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>();
      Integer integer0 = new Integer((-1));
      AbstractMap.SimpleEntry<Integer, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, Object>(integer0, (Object) null);
      AbstractMap.SimpleImmutableEntry<Integer, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Integer, Object>(abstractMap_SimpleEntry0);
      hashMap0.put((Object) null, abstractMap_SimpleImmutableEntry0);
      EntrySetMapIterator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>> entrySetMapIterator0 = new EntrySetMapIterator<Object, AbstractMap.SimpleImmutableEntry<Integer, Object>>(hashMap0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      Object object0 = entrySetMapIterator0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      EntrySetMapIterator<Object, String> entrySetMapIterator0 = new EntrySetMapIterator<Object, String>(hashMap0);
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>> hashMap0 = new HashMap<String, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      EntrySetMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>> entrySetMapIterator0 = new EntrySetMapIterator<String, AbstractMap.SimpleImmutableEntry<Object, Object>>(hashMap0);
      HashMap<String, AbstractMap.SimpleEntry<String, Object>> hashMap1 = new HashMap<String, AbstractMap.SimpleEntry<String, Object>>();
      EntrySetMapIterator<String, AbstractMap.SimpleEntry<String, Object>> entrySetMapIterator1 = new EntrySetMapIterator<String, AbstractMap.SimpleEntry<String, Object>>(hashMap1);
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>("", entrySetMapIterator0);
      // Undeclared exception!
      try { 
        entrySetMapIterator1.setValue(abstractMap_SimpleEntry0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator setValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(22);
      hashMap0.put(integer0, (String) null);
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.setValue((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getValue() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(22);
      hashMap0.put(integer0, (String) null);
      EntrySetMapIterator<Integer, String> entrySetMapIterator0 = new EntrySetMapIterator<Integer, String>(hashMap0);
      entrySetMapIterator0.next();
      String string0 = entrySetMapIterator0.toString();
      assertEquals("MapIterator[22=null]", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>(hashMap0);
      // Undeclared exception!
      try { 
        entrySetMapIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() can only be called once after next()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, integer0);
      EntrySetMapIterator<Integer, Object> entrySetMapIterator0 = new EntrySetMapIterator<Integer, Object>(hashMap0);
      entrySetMapIterator0.next();
      entrySetMapIterator0.remove();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      entrySetMapIterator0.reset();
  }
}
