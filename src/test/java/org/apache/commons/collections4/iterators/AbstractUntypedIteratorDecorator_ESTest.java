/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:17:50 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.collections4.iterators.SkippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractUntypedIteratorDecorator_ESTest extends AbstractUntypedIteratorDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      SkippingIterator<Integer> skippingIterator0 = new SkippingIterator<Integer>(iterator0, 0L);
      SkippingIterator<Integer> skippingIterator1 = new SkippingIterator<Integer>(skippingIterator0, 0L);
      Iterator<Object> iterator1 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(" keez+4@d/Txn!~9][,", "remove() can not be called before calling next()", (String) null, (String) null).when(iterator1).toString();
      doReturn(true, true, false, false).when(iterator1).hasNext();
      doReturn(" keez+4@d/Txn!~9][,", skippingIterator0, (Object) null, (Object) null).when(iterator1).next();
      SkippingIterator<Object> skippingIterator2 = new SkippingIterator<Object>(iterator1, 1581L);
      skippingIterator2.next();
      skippingIterator2.next();
      skippingIterator2.hasNext();
      // Undeclared exception!
      try { 
        skippingIterator2.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.SkippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iterator0).toString();
      SkippingIterator<Integer> skippingIterator0 = new SkippingIterator<Integer>(iterator0, 0L);
      Iterator<Integer> iterator1 = skippingIterator0.getIterator();
      assertSame(iterator1, iterator0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SkippingIterator<String> skippingIterator0 = null;
      try {
        skippingIterator0 = new SkippingIterator<String>((Iterator<String>) null, (-3443L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractUntypedIteratorDecorator", e);
      }
  }
}
