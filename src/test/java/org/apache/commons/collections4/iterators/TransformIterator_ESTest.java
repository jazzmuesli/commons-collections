/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:20:25 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.iterators.TransformIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class TransformIterator_ESTest extends TransformIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>();
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(transformer0).transform(any());
      TransformIterator<String, Integer> transformIterator1 = new TransformIterator<String, Integer>(transformIterator0, transformer0);
      Integer integer0 = transformIterator1.transform("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransformIterator<Object, String> transformIterator0 = new TransformIterator<Object, String>();
      Transformer<? super Object, ? extends String> transformer0 = transformIterator0.getTransformer();
      assertNull(transformer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransformIterator<Object, Integer> transformIterator0 = new TransformIterator<Object, Integer>((Iterator<?>) null, (Transformer<? super Object, ? extends Integer>) null);
      Iterator<?> iterator0 = transformIterator0.getIterator();
      assertNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>();
      // Undeclared exception!
      try { 
        transformIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.TransformIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>((Iterator<? extends String>) null, transformer0);
      // Undeclared exception!
      try { 
        transformIterator0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.TransformIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransformIterator<Object, Object> transformIterator0 = new TransformIterator<Object, Object>();
      TransformIterator<Object, Integer> transformIterator1 = new TransformIterator<Object, Integer>(transformIterator0);
      Transformer<Object, Integer> transformer0 = (Transformer<Object, Integer>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(transformer0).toString();
      TransformIterator<Integer, Object> transformIterator2 = new TransformIterator<Integer, Object>(transformIterator1, transformer0);
      Transformer<? super Integer, ?> transformer1 = transformIterator2.getTransformer();
      assertNotNull(transformer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransformIterator<Object, Integer> transformIterator0 = new TransformIterator<Object, Integer>();
      TransformIterator<Integer, String> transformIterator1 = new TransformIterator<Integer, String>(transformIterator0);
      Iterator<? extends Integer> iterator0 = transformIterator1.getIterator();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<String, Object> transformIterator1 = new TransformIterator<String, Object>(transformIterator0, transformer0);
      // Undeclared exception!
      try { 
        transformIterator1.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.TransformIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransformIterator<Object, Object> transformIterator0 = new TransformIterator<Object, Object>();
      // Undeclared exception!
      try { 
        transformIterator0.transform(transformIterator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.TransformIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransformIterator<Object, Object> transformIterator0 = new TransformIterator<Object, Object>();
      Transformer<Object, Object> transformer0 = (Transformer<Object, Object>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      transformIterator0.setTransformer(transformer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Transformer<Object, String> transformer0 = (Transformer<Object, String>) mock(Transformer.class, new ViolatedAssumptionAnswer());
      TransformIterator<String, String> transformIterator0 = new TransformIterator<String, String>((Iterator<? extends String>) null, transformer0);
      transformIterator0.setIterator((Iterator<? extends String>) null);
  }
}
