/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:46:15 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.Closure;
import org.apache.commons.collections4.Factory;
import org.apache.commons.collections4.Predicate;
import org.apache.commons.collections4.Transformer;
import org.apache.commons.collections4.functors.AllPredicate;
import org.apache.commons.collections4.functors.AnyPredicate;
import org.apache.commons.collections4.functors.CloneTransformer;
import org.apache.commons.collections4.functors.ConstantFactory;
import org.apache.commons.collections4.functors.ConstantTransformer;
import org.apache.commons.collections4.functors.EqualPredicate;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.apache.commons.collections4.functors.ExceptionTransformer;
import org.apache.commons.collections4.functors.FactoryTransformer;
import org.apache.commons.collections4.functors.FalsePredicate;
import org.apache.commons.collections4.functors.IdentityPredicate;
import org.apache.commons.collections4.functors.IfTransformer;
import org.apache.commons.collections4.functors.InstanceofPredicate;
import org.apache.commons.collections4.functors.InvokerTransformer;
import org.apache.commons.collections4.functors.MapTransformer;
import org.apache.commons.collections4.functors.NotPredicate;
import org.apache.commons.collections4.functors.NullIsExceptionPredicate;
import org.apache.commons.collections4.functors.NullIsFalsePredicate;
import org.apache.commons.collections4.functors.OnePredicate;
import org.apache.commons.collections4.functors.StringValueTransformer;
import org.apache.commons.collections4.functors.SwitchClosure;
import org.apache.commons.collections4.functors.SwitchTransformer;
import org.apache.commons.collections4.functors.TransformedPredicate;
import org.apache.commons.collections4.functors.TransformerClosure;
import org.apache.commons.collections4.functors.TransformerPredicate;
import org.apache.commons.collections4.iterators.ObjectGraphIterator;
import org.apache.commons.collections4.iterators.ObjectGraphIteratorTest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ObjectGraphIterator_ESTest extends ObjectGraphIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Transformer<Integer, Integer> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Integer) null, transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Integer) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      objectGraphIterator0.findNext((Integer) null);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertEquals(1, linkedList0.size());
      assertNotNull(iterator0);
      
      objectGraphIterator1.findNextByIterator(iterator0);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      objectGraphIterator1.forEachRemaining(consumer0);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      objectGraphIterator1.updateCurrentIterator();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(object0, (Transformer<? super Object, ?>) null);
      assertNotNull(objectGraphIterator2);
      
      boolean boolean1 = objectGraphIterator2.hasNext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Transformer<String, String> transformer1 = StringValueTransformer.stringValueTransformer();
      assertNotNull(transformer1);
      
      ObjectGraphIterator<String> objectGraphIterator3 = new ObjectGraphIterator<String>("9!_c>x|2)7l~'f~7IR", transformer1);
      assertNotNull(objectGraphIterator3);
      
      objectGraphIterator3.findNext("9!_c>x|2)7l~'f~7IR");
      objectGraphIterator1.remove();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(iterator0);
      assertEquals(0, linkedList0.size());
      assertNotNull(objectGraphIterator0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      objectGraphIterator0.findNext(integer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(iterator0);
      assertEquals(0, linkedList0.size());
      assertNotNull(objectGraphIterator1);
      assertFalse(linkedList0.contains((-1)));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator1.forEachRemaining(consumer1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      
      boolean boolean0 = objectGraphIterator1.hasNext();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      assertFalse(boolean0);
      
      objectGraphIterator1.forEachRemaining(consumer0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1)));
      
      Object object0 = objectGraphIterator1.next();
      assertEquals(0, linkedList0.size());
      assertNotNull(object0);
      assertFalse(linkedList0.contains(integer0));
      assertEquals((-1), object0);
      
      boolean boolean1 = objectGraphIterator1.hasNext();
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedList0.contains(integer0));
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>((Iterator<? extends Predicate<Object>>) null);
      assertNotNull(objectGraphIterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator0.forEachRemaining(consumer0);
      objectGraphIterator0.updateCurrentIterator();
      Predicate<Object> predicate0 = EqualPredicate.equalPredicate((Object) null);
      assertNotNull(predicate0);
      
      HashMap<Predicate<Object>, Transformer<Object, String>> hashMap0 = new HashMap<Predicate<Object>, Transformer<Object, String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Transformer<Object, Object> transformer0 = SwitchTransformer.switchTransformer((Map<? extends Predicate<? super Object>, ? extends Transformer<? super Object, ?>>) hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(transformer0);
      
      Transformer<Object, Object> transformer1 = IfTransformer.ifTransformer((Predicate<? super Object>) predicate0, (Transformer<? super Object, ?>) transformer0, (Transformer<? super Object, ?>) transformer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(transformer1);
      assertFalse(transformer1.equals((Object)transformer0));
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0, transformer1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(objectGraphIterator1);
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      
      boolean boolean0 = objectGraphIterator1.hasNext();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(transformer0.equals((Object)transformer1));
      assertFalse(transformer1.equals((Object)transformer0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("", (Transformer<? super String, ? extends String>) null);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<String> objectGraphIterator1 = new ObjectGraphIterator<String>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      Predicate<Object> predicate0 = null;
      TransformedPredicate<Object> transformedPredicate0 = new TransformedPredicate<Object>((Transformer<? super Object, ?>) null, (Predicate<? super Object>) null);
      assertNotNull(transformedPredicate0);
      
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("");
      assertNotNull(transformer0);
      
      IfTransformer<Object, Predicate<Object>> ifTransformer0 = new IfTransformer<Object, Predicate<Object>>((Predicate<? super Object>) null, transformer0, transformer0);
      assertNotNull(ifTransformer0);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator2 = new ObjectGraphIterator<Predicate<Object>>(transformedPredicate0, ifTransformer0);
      assertNotNull(objectGraphIterator2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator2.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.IfTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ObjectGraphIteratorTest.LeafFinder objectGraphIteratorTest_LeafFinder0 = new ObjectGraphIteratorTest.LeafFinder();
      assertNotNull(objectGraphIteratorTest_LeafFinder0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, objectGraphIteratorTest_LeafFinder0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIteratorTest$LeafFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "W6)JL\\}&.ot .";
      Transformer<Object, String> transformer0 = ConstantTransformer.constantTransformer("W6)JL}&.ot .");
      assertNotNull(transformer0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("Iterator remove() cannot be called at this time", transformer0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.findNextByIterator((Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Predicate<Object>> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>(iterator0);
      assertEquals(0, linkedList0.size());
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Closure<Object>> objectGraphIterator1 = new ObjectGraphIterator<Closure<Object>>((Iterator<? extends Closure<Object>>) null);
      assertNotNull(objectGraphIterator1);
      
      Transformer<Object, String> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Closure<Object> closure0 = TransformerClosure.transformerClosure((Transformer<? super Object, ?>) transformer0);
      assertNotNull(closure0);
      
      objectGraphIterator1.findNext(closure0);
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(transformer0, transformer0);
      assertNotNull(objectGraphIterator2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator2.findNextByIterator(objectGraphIterator1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ExceptionTransformer invoked
         //
         verifyException("org.apache.commons.collections4.functors.ExceptionTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "zRfaB!&7o_STCin?2P";
      FactoryTransformer<String, String> factoryTransformer0 = new FactoryTransformer<String, String>((Factory<? extends String>) null);
      assertNotNull(factoryTransformer0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("zRfaB!&7o_STCin?2P", factoryTransformer0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.updateCurrentIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("v5,ui", (Transformer<? super String, ? extends String>) null);
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.findNext("v5,ui");
      ObjectGraphIterator<String> objectGraphIterator1 = new ObjectGraphIterator<String>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertTrue(boolean0);
      
      boolean boolean1 = objectGraphIterator1.hasNext();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      objectGraphIterator1.updateCurrentIterator();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator2);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      
      Object object0 = objectGraphIterator2.next();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotNull(object0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertEquals("v5,ui", object0);
      
      ObjectGraphIterator<Object> objectGraphIterator3 = new ObjectGraphIterator<Object>("v5,ui", (Transformer<? super Object, ?>) null);
      assertNotNull(objectGraphIterator3);
      assertFalse(objectGraphIterator3.equals((Object)objectGraphIterator2));
      
      // Undeclared exception!
      try { 
        objectGraphIterator3.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantFactory<Boolean> constantFactory0 = new ConstantFactory<Boolean>((Boolean) null);
      assertNotNull(constantFactory0);
      
      FactoryTransformer<Boolean, Boolean> factoryTransformer0 = new FactoryTransformer<Boolean, Boolean>(constantFactory0);
      assertNotNull(factoryTransformer0);
      
      ObjectGraphIterator<Boolean> objectGraphIterator0 = new ObjectGraphIterator<Boolean>((Boolean) null, factoryTransformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.findNext(objectGraphIterator0);
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      Predicate<Object>[] predicateArray0 = (Predicate<Object>[]) Array.newInstance(Predicate.class, 8);
      FactoryTransformer<Object, Boolean> factoryTransformer1 = new FactoryTransformer<Object, Boolean>(constantFactory0);
      assertNotNull(factoryTransformer1);
      
      TransformerPredicate<Object> transformerPredicate0 = new TransformerPredicate<Object>(factoryTransformer1);
      assertNotNull(transformerPredicate0);
      
      Predicate<Predicate<Object>> predicate0 = NotPredicate.notPredicate((Predicate<? super Predicate<Object>>) transformerPredicate0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = IdentityPredicate.identityPredicate((Object) predicate0);
      assertNotNull(predicate1);
      
      predicateArray0[0] = predicate1;
      Predicate<Object> predicate2 = TransformerPredicate.transformerPredicate((Transformer<? super Object, Boolean>) factoryTransformer1);
      assertNotNull(predicate2);
      assertFalse(predicate2.equals((Object)predicate1));
      
      predicateArray0[1] = predicate2;
      LinkedList<Predicate<Object>> linkedList0 = new LinkedList<Predicate<Object>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(predicate1));
      
      Predicate<Object> predicate3 = OnePredicate.onePredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate3);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(linkedList0.contains(predicate3));
      
      predicateArray0[2] = predicate3;
      NullIsExceptionPredicate<Object> nullIsExceptionPredicate0 = new NullIsExceptionPredicate<Object>(predicate1);
      assertNotNull(nullIsExceptionPredicate0);
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      
      predicateArray0[3] = (Predicate<Object>) nullIsExceptionPredicate0;
      Predicate<Object> predicate4 = FalsePredicate.falsePredicate();
      assertNotNull(predicate4);
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      
      predicateArray0[4] = predicate4;
      Predicate<Object> predicate5 = AnyPredicate.anyPredicate((Collection<? extends Predicate<? super Object>>) linkedList0);
      assertSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertNotNull(predicate5);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(linkedList0.contains(predicate3));
      
      predicateArray0[5] = predicate5;
      Predicate<Object> predicate6 = NullIsFalsePredicate.nullIsFalsePredicate((Predicate<? super Object>) predicate1);
      assertNotNull(predicate6);
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      
      predicateArray0[6] = predicate6;
      Transformer<Object, Boolean> transformer0 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer0);
      
      Predicate<Object> predicate7 = TransformedPredicate.transformedPredicate((Transformer<? super Object, ?>) transformer0, (Predicate<? super Object>) predicate6);
      assertNotNull(predicate7);
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      
      predicateArray0[7] = predicate7;
      Predicate<Object> predicate8 = AllPredicate.allPredicate((Predicate<? super Object>[]) predicateArray0);
      assertNotNull(predicate8);
      assertEquals(8, predicateArray0.length);
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      
      Predicate<Object> predicate9 = NullIsExceptionPredicate.nullIsExceptionPredicate((Predicate<? super Object>) predicate8);
      assertNotNull(predicate9);
      assertEquals(8, predicateArray0.length);
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      
      ConstantTransformer<Object, Integer> constantTransformer0 = new ConstantTransformer<Object, Integer>(integer0);
      assertNotNull(constantTransformer0);
      
      IfTransformer<Object, Integer> ifTransformer0 = new IfTransformer<Object, Integer>(predicate9, constantTransformer0, constantTransformer0);
      assertNotNull(ifTransformer0);
      assertEquals(8, predicateArray0.length);
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      
      ObjectGraphIterator<Integer> objectGraphIterator2 = new ObjectGraphIterator<Integer>(integer0, ifTransformer0);
      assertNotNull(objectGraphIterator2);
      assertEquals(8, predicateArray0.length);
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      
      boolean boolean0 = objectGraphIterator2.hasNext();
      assertEquals(8, predicateArray0.length);
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Transformer<Object, Object> transformer0 = CloneTransformer.cloneTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.findNext(object0);
      HashMap<Predicate<Object>, Closure<Object>> hashMap0 = new HashMap<Predicate<Object>, Closure<Object>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Closure<Object> closure0 = SwitchClosure.switchClosure((Map<Predicate<Object>, Closure<Object>>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(closure0);
      
      Transformer<Object, Closure<Object>> transformer1 = ExceptionTransformer.exceptionTransformer();
      assertNotNull(transformer1);
      
      ObjectGraphIterator<Closure<Object>> objectGraphIterator1 = new ObjectGraphIterator<Closure<Object>>(closure0, transformer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(objectGraphIterator1);
      
      objectGraphIterator1.findNext(closure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Closure<Object> closure1 = objectGraphIterator1.next();
      assertSame(closure0, closure1);
      assertSame(closure1, closure0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(closure1);
      
      Transformer<Object, String> transformer2 = InvokerTransformer.invokerTransformer(";qyi!V0*IVEB3wXv' ");
      assertNotNull(transformer2);
      
      ObjectGraphIterator<String> objectGraphIterator2 = new ObjectGraphIterator<String>(";qyi!V0*IVEB3wXv' ", transformer2);
      assertNotNull(objectGraphIterator2);
      
      ObjectGraphIterator<String> objectGraphIterator3 = new ObjectGraphIterator<String>(objectGraphIterator2);
      assertNotNull(objectGraphIterator3);
      assertFalse(objectGraphIterator3.equals((Object)objectGraphIterator2));
      
      // Undeclared exception!
      try { 
        objectGraphIterator3.updateCurrentIterator();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method ';qyi!V0*IVEB3wXv' ' on 'class java.lang.String' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-1205));
      assertNotNull(integer0);
      assertEquals((-1205), (int)integer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, (Transformer<? super Integer, ? extends Integer>) null);
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.updateCurrentIterator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantTransformer<Object, String> constantTransformer0 = new ConstantTransformer<Object, String>("");
      assertNotNull(constantTransformer0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(constantTransformer0, constantTransformer0);
      assertNotNull(objectGraphIterator0);
      
      TransformerClosure<Object> transformerClosure0 = new TransformerClosure<Object>(constantTransformer0);
      assertNotNull(transformerClosure0);
      
      Transformer<Boolean, Closure<Object>> transformer0 = ConstantTransformer.constantTransformer((Closure<Object>) transformerClosure0);
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      boolean boolean0 = objectGraphIterator1.hasNext();
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Transformer<Object, String> transformer0 = MapTransformer.mapTransformer((Map<? super Object, ? extends String>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(transformer0);
      
      Transformer<Object, Transformer<Object, String>> transformer1 = InvokerTransformer.invokerTransformer("e DD)ZIZtW@HTk");
      assertNotNull(transformer1);
      
      ObjectGraphIterator<Transformer<Object, String>> objectGraphIterator0 = new ObjectGraphIterator<Transformer<Object, String>>(transformer0, transformer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Transformer<Object, String>> objectGraphIterator1 = new ObjectGraphIterator<Transformer<Object, String>>(transformer0, transformer1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      // Undeclared exception!
      try { 
        objectGraphIterator1.findNextByIterator(objectGraphIterator0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'e DD)ZIZtW@HTk' on 'class org.apache.commons.collections4.functors.MapTransformer' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Predicate<Predicate<Object>> predicate0 = ExceptionPredicate.exceptionPredicate();
      assertNotNull(predicate0);
      
      EqualPredicate<Object> equalPredicate0 = new EqualPredicate<Object>(predicate0);
      assertNotNull(equalPredicate0);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 9);
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      Class<Integer> class1 = Integer.class;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[6] = class6;
      Class<Integer> class7 = Integer.class;
      classArray0[7] = class7;
      Class<Integer> class8 = Integer.class;
      classArray0[8] = class8;
      Transformer<Object, Predicate<Object>> transformer0 = InvokerTransformer.invokerTransformer("2yj/t+", (Class<?>[]) classArray0, (Object[]) classArray0);
      assertNotNull(transformer0);
      assertEquals(9, classArray0.length);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>(equalPredicate0, transformer0);
      assertNotNull(objectGraphIterator0);
      assertEquals(9, classArray0.length);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.hasNext();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method '2yj/t+' on 'class org.apache.commons.collections4.functors.EqualPredicate' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = "InstantiateTransformer: InstantiationException";
      Transformer<Object, String> transformer0 = InvokerTransformer.invokerTransformer("InstantiateTransformer: InstantiationException");
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(object0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // InvokerTransformer: The method 'InstantiateTransformer: InstantiationException' on 'class java.lang.Object' does not exist
         //
         verifyException("org.apache.commons.collections4.functors.InvokerTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      ObjectGraphIterator<Object> objectGraphIterator0 = new ObjectGraphIterator<Object>(iterator0);
      assertNotNull(objectGraphIterator0);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No more elements in the iteration
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(3055);
      assertNotNull(integer0);
      assertEquals(3055, (int)integer0);
      
      Transformer<Integer, Integer> transformer0 = ConstantTransformer.nullTransformer();
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      Integer integer1 = objectGraphIterator0.next();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>((Iterator<? extends Integer>) null);
      assertNotNull(objectGraphIterator0);
      
      boolean boolean0 = objectGraphIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "r'z'kuea";
      AllPredicate<Object> allPredicate0 = new AllPredicate<Object>((Predicate<? super Object>[]) null);
      assertNotNull(allPredicate0);
      
      String string1 = "Q=V7V%)Z,Yv0wB;WPIZ";
      ConstantFactory<String> constantFactory0 = new ConstantFactory<String>("Q=V7V%)Z,Yv0wB;WPIZ");
      assertNotNull(constantFactory0);
      
      FactoryTransformer<Object, String> factoryTransformer0 = new FactoryTransformer<Object, String>(constantFactory0);
      assertNotNull(factoryTransformer0);
      
      IfTransformer<String, String> ifTransformer0 = new IfTransformer<String, String>(allPredicate0, factoryTransformer0, factoryTransformer0);
      assertNotNull(ifTransformer0);
      
      Integer integer0 = new Integer(3249);
      assertNotNull(integer0);
      assertEquals(3249, (int)integer0);
      
      Factory<Integer> factory0 = ConstantFactory.constantFactory(integer0);
      assertNotNull(factory0);
      
      Predicate<? super Object>[] predicateArray0 = allPredicate0.getPredicates();
      assertNull(predicateArray0);
      
      ObjectGraphIterator<String> objectGraphIterator0 = new ObjectGraphIterator<String>("r'z'kuea", ifTransformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<String> objectGraphIterator1 = new ObjectGraphIterator<String>(objectGraphIterator0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      // Undeclared exception!
      try { 
        objectGraphIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      Predicate<Object> predicate0 = InstanceofPredicate.instanceOfPredicate(class0);
      assertNotNull(predicate0);
      
      ObjectGraphIterator<Predicate<Object>> objectGraphIterator0 = new ObjectGraphIterator<Predicate<Object>>(predicate0, (Transformer<? super Predicate<Object>, ? extends Predicate<Object>>) null);
      assertNotNull(objectGraphIterator0);
      
      objectGraphIterator0.updateCurrentIterator();
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>((Object) null, (Transformer<? super Object, ?>) null);
      assertNotNull(objectGraphIterator1);
      
      ObjectGraphIterator<Object> objectGraphIterator2 = new ObjectGraphIterator<Object>(objectGraphIterator0, (Transformer<? super Object, ?>) null);
      assertNotNull(objectGraphIterator2);
      assertFalse(objectGraphIterator2.equals((Object)objectGraphIterator1));
      
      ObjectGraphIterator<Object> objectGraphIterator3 = new ObjectGraphIterator<Object>("", (Transformer<? super Object, ?>) null);
      assertNotNull(objectGraphIterator3);
      assertFalse(objectGraphIterator3.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator3.equals((Object)objectGraphIterator2));
      
      Integer integer0 = new Integer(236);
      assertNotNull(integer0);
      assertEquals(236, (int)integer0);
      
      // Undeclared exception!
      try { 
        FactoryTransformer.factoryTransformer((Factory<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Factory must not be null
         //
         verifyException("org.apache.commons.collections4.functors.FactoryTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-3071));
      assertNotNull(integer0);
      assertEquals((-3071), (int)integer0);
      
      Transformer<Object, Integer> transformer0 = ConstantTransformer.constantTransformer(integer0);
      assertNotNull(transformer0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator0);
      
      ObjectGraphIterator<Integer> objectGraphIterator1 = new ObjectGraphIterator<Integer>(integer0, transformer0);
      assertNotNull(objectGraphIterator1);
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      objectGraphIterator0.findNextByIterator(objectGraphIterator1);
      assertNotSame(objectGraphIterator0, objectGraphIterator1);
      assertNotSame(objectGraphIterator1, objectGraphIterator0);
      assertFalse(objectGraphIterator0.equals((Object)objectGraphIterator1));
      assertFalse(objectGraphIterator1.equals((Object)objectGraphIterator0));
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator remove() cannot be called at this time
         //
         verifyException("org.apache.commons.collections4.iterators.ObjectGraphIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Integer> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      Integer integer0 = new Integer((-2024));
      assertNotNull(integer0);
      assertEquals((-2024), (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains((-2024)));
      assertTrue(boolean0);
      
      ObjectGraphIterator<Integer> objectGraphIterator0 = new ObjectGraphIterator<Integer>(iterator0);
      assertEquals(1, linkedList0.size());
      assertNotNull(objectGraphIterator0);
      assertTrue(linkedList0.contains((-2024)));
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      
      objectGraphIterator0.findNext(integer1);
      assertEquals(1, linkedList0.size());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      
      ObjectGraphIterator<Object> objectGraphIterator1 = new ObjectGraphIterator<Object>(iterator0);
      assertEquals(1, linkedList0.size());
      assertNotNull(objectGraphIterator1);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      objectGraphIterator1.forEachRemaining(consumer1);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      
      boolean boolean1 = objectGraphIterator1.hasNext();
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      assertFalse(boolean1);
      
      objectGraphIterator1.forEachRemaining(consumer0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      
      objectGraphIterator1.findNextByIterator(objectGraphIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(integer1));
      
      Object object0 = objectGraphIterator1.next();
      assertEquals(1, linkedList0.size());
      assertNotNull(object0);
      assertFalse(object0.equals((Object)integer0));
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(object0));
      assertEquals((-1), object0);
      
      boolean boolean2 = objectGraphIterator1.hasNext();
      assertEquals(1, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(object0));
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        objectGraphIterator0.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }
}
