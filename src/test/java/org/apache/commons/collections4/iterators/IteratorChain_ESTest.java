/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:49:24 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import org.apache.commons.collections4.iterators.IteratorChain;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IteratorChain_ESTest extends IteratorChain_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<Object> iteratorChain1 = new IteratorChain<Object>(iteratorChain0);
      iteratorChain1.size();
      assertFalse(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0, iterator0);
      iteratorChain0.next();
      assertTrue(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      assertFalse(iteratorChain0.isLocked());
      
      iteratorChain0.hasNext();
      boolean boolean0 = iteratorChain0.isLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0, iterator0);
      iteratorChain0.hasNext();
      assertTrue(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iterator0);
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      Iterator<Object> iterator0 = linkedList1.iterator();
      iteratorArray0[0] = iterator0;
      linkedList1.addAll((Collection<?>) linkedList0);
      iteratorArray0[1] = iterator0;
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iteratorArray0);
      // Undeclared exception!
      try { 
        iteratorChain0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<String>((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 4);
      IteratorChain<String> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<String>(iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IteratorChain<Iterator<Integer>> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<Iterator<Integer>>((Iterator<? extends Iterator<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorChain0.updateCurrentIterator();
      // Undeclared exception!
      try { 
        iteratorChain0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      iteratorChain0.hasNext();
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // IteratorChain cannot be changed after the first use of a method from the Iterator interface
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = new IteratorChain<Integer>();
      // Undeclared exception!
      try { 
        iteratorChain0.addIterator((Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 2);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      Iterator<Object> iterator0 = linkedList1.iterator();
      iteratorArray0[0] = iterator0;
      iteratorArray0[1] = iterator0;
      IteratorChain<Object> iteratorChain0 = new IteratorChain<Object>(iteratorArray0);
      iteratorChain0.addIterator(iterator0);
      assertFalse(iteratorChain0.isLocked());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Iterator<String>[] iteratorArray0 = (Iterator<String>[]) Array.newInstance(Iterator.class, 1);
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      iteratorArray0[0] = (Iterator<String>) iteratorChain0;
      IteratorChain<String> iteratorChain1 = new IteratorChain<String>(iteratorArray0);
      IteratorChain<String> iteratorChain2 = new IteratorChain<String>(iteratorChain1);
      iteratorChain2.updateCurrentIterator();
      assertTrue(iteratorChain1.isLocked());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IteratorChain<Integer> iteratorChain0 = null;
      try {
        iteratorChain0 = new IteratorChain<Integer>((Iterator<? extends Integer>) null, (Iterator<? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.IteratorChain", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IteratorChain<String> iteratorChain0 = new IteratorChain<String>();
      IteratorChain<Object> iteratorChain1 = new IteratorChain<Object>(iteratorChain0, iteratorChain0);
      // Undeclared exception!
      try { 
        iteratorChain1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }
}
