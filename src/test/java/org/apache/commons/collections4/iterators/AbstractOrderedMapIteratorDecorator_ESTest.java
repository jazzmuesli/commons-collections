/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:15:06 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractOrderedMapIteratorDecorator_ESTest extends AbstractOrderedMapIteratorDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = (OrderedMapIterator<Object, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(orderedMapIterator0).setValue(any());
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.setValue("86q<0[Dn'c;$");
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrderedMapIterator<String, Integer> orderedMapIterator0 = (OrderedMapIterator<String, Integer>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn("y\u0000").when(orderedMapIterator0).previous();
      AbstractOrderedMapIteratorDecorator<String, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Integer>(orderedMapIterator0);
      String string0 = abstractOrderedMapIteratorDecorator0.previous();
      assertEquals("y\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = (OrderedMapIterator<Object, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn("y\u0000").when(orderedMapIterator0).next();
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.next();
      assertEquals("y\u0000", object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrderedMapIterator<String, String> orderedMapIterator0 = (OrderedMapIterator<String, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(orderedMapIterator0).hasPrevious();
      AbstractOrderedMapIteratorDecorator<String, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, String>(orderedMapIterator0);
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedMapIterator<String, Integer> orderedMapIterator0 = (OrderedMapIterator<String, Integer>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(orderedMapIterator0).hasNext();
      AbstractOrderedMapIteratorDecorator<String, Integer> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Integer>(orderedMapIterator0);
      abstractOrderedMapIteratorDecorator0.hasNext();
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(1073741824);
      OrderedMapIterator<String, Object> orderedMapIterator0 = (OrderedMapIterator<String, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(orderedMapIterator0).getValue();
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.getValue();
      assertEquals(1073741824, object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = (OrderedMapIterator<String, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn("OrderedMapIterator must not be null").when(orderedMapIterator0).getKey();
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator0);
      String string0 = abstractOrderedMapIteratorDecorator0.getKey();
      assertEquals("OrderedMapIterator must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = null;
      try {
        abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>((OrderedMapIterator<Object, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // OrderedMapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrderedMapIterator<Integer, String> orderedMapIterator0 = (OrderedMapIterator<Integer, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(orderedMapIterator0).next();
      AbstractOrderedMapIteratorDecorator<Integer, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, String>(orderedMapIterator0);
      Integer integer0 = abstractOrderedMapIteratorDecorator0.next();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = (OrderedMapIterator<Object, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(orderedMapIterator0).toString();
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator0);
      OrderedMapIterator<Object, Object> orderedMapIterator1 = abstractOrderedMapIteratorDecorator0.getOrderedMapIterator();
      assertFalse(orderedMapIterator1.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrderedMapIterator<Object, String> orderedMapIterator0 = (OrderedMapIterator<Object, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(orderedMapIterator0).setValue(anyString());
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(orderedMapIterator0);
      String string0 = abstractOrderedMapIteratorDecorator0.setValue((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrderedMapIterator<Object, String> orderedMapIterator0 = (OrderedMapIterator<Object, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(orderedMapIterator0).getKey();
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.getKey();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrderedMapIterator<Object, String> orderedMapIterator0 = (OrderedMapIterator<Object, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(orderedMapIterator0).previous();
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.previous();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderedMapIterator<Integer, Object> orderedMapIterator0 = (OrderedMapIterator<Integer, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(orderedMapIterator0).hasPrevious();
      AbstractOrderedMapIteratorDecorator<Integer, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Integer, Object>(orderedMapIterator0);
      boolean boolean0 = abstractOrderedMapIteratorDecorator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrderedMapIterator<String, String> orderedMapIterator0 = (OrderedMapIterator<String, String>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      AbstractOrderedMapIteratorDecorator<String, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, String>(orderedMapIterator0);
      abstractOrderedMapIteratorDecorator0.remove();
      assertFalse(abstractOrderedMapIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = (OrderedMapIterator<Object, Object>) mock(OrderedMapIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(orderedMapIterator0).getValue();
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator0);
      Object object0 = abstractOrderedMapIteratorDecorator0.getValue();
      assertNull(object0);
  }
}
