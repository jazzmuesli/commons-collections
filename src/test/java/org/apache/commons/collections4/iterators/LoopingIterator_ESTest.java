/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:04:17 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.LoopingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LoopingIterator_ESTest extends LoopingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.next();
      loopingIterator0.size();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LoopingIterator<String> loopingIterator1 = new LoopingIterator<String>(linkedList1);
      loopingIterator1.hasNext();
      linkedList1.clear();
      // Undeclared exception!
      try { 
        loopingIterator1.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(2223);
      linkedList0.add((Object) integer0);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.next();
      loopingIterator0.remove();
      // Undeclared exception!
      try { 
        loopingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.reset();
      Object object0 = loopingIterator0.next();
      linkedList0.remove(object0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("b>");
      linkedList1.addLast("");
      LoopingIterator<String> loopingIterator1 = new LoopingIterator<String>(linkedList1);
      linkedList1.add("");
      loopingIterator1.size();
      // Undeclared exception!
      try { 
        loopingIterator1.remove();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "?vaMsC>>Qt";
      linkedList0.add((Object) "?vaMsC>>Qt");
      Integer integer0 = new Integer(1);
      linkedList0.add((Object) integer0);
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      // Undeclared exception!
      try { 
        loopingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        loopingIterator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.size();
      loopingIterator0.reset();
      LoopingIterator<String> loopingIterator1 = null;
      try {
        loopingIterator1 = new LoopingIterator<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("G@2|jJNTDi6^1%9U1");
      LoopingIterator<String> loopingIterator0 = new LoopingIterator<String>(linkedList0);
      loopingIterator0.size();
      loopingIterator0.size();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LoopingIterator<Integer> loopingIterator1 = new LoopingIterator<Integer>(linkedList1);
      Integer integer0 = new Integer(1);
      linkedList1.add(integer0);
      loopingIterator1.size();
      LoopingIterator<Object> loopingIterator2 = new LoopingIterator<Object>(linkedList1);
      loopingIterator2.next();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      loopingIterator2.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Collection<String> collection0 = null;
      LoopingIterator<String> loopingIterator0 = null;
      try {
        loopingIterator0 = new LoopingIterator<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The collection must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedList0);
      loopingIterator0.size();
      // Undeclared exception!
      try { 
        loopingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = "^IqCa";
      linkedList0.add((Object) "^IqCa");
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.reset();
      Consumer<Object> consumer0 = null;
      // Undeclared exception!
      try { 
        loopingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LoopingIterator<Object> loopingIterator0 = new LoopingIterator<Object>(linkedList0);
      loopingIterator0.hasNext();
      LoopingIterator<String> loopingIterator1 = new LoopingIterator<String>(linkedList0);
      linkedList0.pollLast();
      loopingIterator0.hasNext();
      // Undeclared exception!
      try { 
        loopingIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // There are no elements for this iterator to loop on
         //
         verifyException("org.apache.commons.collections4.iterators.LoopingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1698));
      linkedList0.add(integer0);
      LoopingIterator<Integer> loopingIterator0 = new LoopingIterator<Integer>(linkedList0);
      boolean boolean0 = loopingIterator0.hasNext();
      assertTrue(boolean0);
  }
}
