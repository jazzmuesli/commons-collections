/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:07:37 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.apache.commons.collections4.iterators.EnumerationIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class EnumerationIterator_ESTest extends EnumerationIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(enumeration0).nextElement();
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(enumeration0);
      Object object0 = enumerationIterator0.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("A");
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      Object object0 = enumerationIterator0.next();
      assertEquals("A", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(enumeration0).hasMoreElements();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0, linkedList0);
      boolean boolean0 = enumerationIterator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0);
      boolean boolean0 = enumerationIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>();
      Enumeration<? extends String> enumeration0 = enumerationIterator0.getEnumeration();
      assertNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("bfr]t<ko3nHk~WM");
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      stringTokenizer0.nextElement();
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(enumeration0).toString();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>(enumeration0, linkedList0);
      Enumeration<? extends Integer> enumeration1 = enumerationIterator0.getEnumeration();
      EnumerationIterator<Object> enumerationIterator1 = new EnumerationIterator<Object>(enumeration1);
      // Undeclared exception!
      try { 
        enumerationIterator1.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No Collection associated with this Iterator
         //
         verifyException("org.apache.commons.collections4.iterators.EnumerationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>();
      // Undeclared exception!
      try { 
        enumerationIterator0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EnumerationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0);
      Enumeration<String> enumeration1 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      enumerationIterator0.setEnumeration(enumeration1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>((Enumeration<?>) null);
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.EnumerationIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<Integer> enumeration0 = (Enumeration<Integer>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      EnumerationIterator<Integer> enumerationIterator0 = new EnumerationIterator<Integer>(enumeration0, linkedList0);
      // Undeclared exception!
      try { 
        enumerationIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // next() must have been called for remove() to function
         //
         verifyException("org.apache.commons.collections4.iterators.EnumerationIterator", e);
      }
  }
}
