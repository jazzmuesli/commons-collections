/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:52:26 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.BoundedIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class BoundedIterator_ESTest extends BoundedIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null).when(iterator0).next();
      BoundedIterator<Integer> boundedIterator0 = new BoundedIterator<Integer>(iterator0, 1L, 1L);
      boundedIterator0.next();
      boundedIterator0.next();
      // Undeclared exception!
      try { 
        boundedIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(564);
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(iterator0).hasNext();
      doReturn(integer0, (Object) null, (Object) null, (Object) null).when(iterator0).next();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 564, 564);
      boundedIterator0.next();
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<String> boundedIterator0 = new BoundedIterator<String>(iterator0, 0L, 0L);
      boolean boolean0 = boundedIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false).when(iterator0).hasNext();
      doReturn((Object) null, (Object) null).when(iterator0).next();
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 418L, 3369L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boundedIterator0.forEachRemaining(consumer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Iterator<Object> iterator0 = (Iterator<Object>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Object> boundedIterator0 = new BoundedIterator<Object>(iterator0, 0L, 0L);
      // Undeclared exception!
      try { 
        boundedIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // remove() can not be called before calling next()
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Iterator<Integer> iterator0 = (Iterator<Integer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<Integer> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<Integer>(iterator0, 0L, (-3099L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Max parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      BoundedIterator<String> boundedIterator0 = null;
      try {
        boundedIterator0 = new BoundedIterator<String>(iterator0, (-1154L), (-1154L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset parameter must not be negative.
         //
         verifyException("org.apache.commons.collections4.iterators.BoundedIterator", e);
      }
  }
}
