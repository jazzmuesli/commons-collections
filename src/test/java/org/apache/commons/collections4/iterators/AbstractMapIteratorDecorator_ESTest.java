/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:16:15 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.MapIterator;
import org.apache.commons.collections4.OrderedMapIterator;
import org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator;
import org.apache.commons.collections4.iterators.AbstractOrderedMapIteratorDecorator;
import org.apache.commons.collections4.iterators.EmptyMapIterator;
import org.apache.commons.collections4.iterators.EmptyOrderedMapIterator;
import org.apache.commons.collections4.iterators.EntrySetMapIterator;
import org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class AbstractMapIteratorDecorator_ESTest extends AbstractMapIteratorDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.putIfAbsent((String) null, (String) null);
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      entrySetMapIterator0.forEachRemaining(consumer0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      abstractMapIteratorDecorator0.remove();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put("KPw%a", (Object) null);
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>(hashMap0);
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(entrySetMapIterator0);
      boolean boolean0 = abstractMapIteratorDecorator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyOrderedMapIterator<String, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put((String) null, emptyOrderedMapIterator0);
      EntrySetMapIterator<String, Object> entrySetMapIterator0 = new EntrySetMapIterator<String, Object>(hashMap0);
      entrySetMapIterator0.next();
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(entrySetMapIterator0);
      String string0 = abstractMapIteratorDecorator0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      EntrySetMapIterator<String, Integer> entrySetMapIterator0 = new EntrySetMapIterator<String, Integer>(hashMap0);
      AbstractMapIteratorDecorator<String, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Integer>(entrySetMapIterator0);
      abstractMapIteratorDecorator0.next();
      String string0 = abstractMapIteratorDecorator0.getKey();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrderedMapIterator<String, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<String, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<String, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<String, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<String, Object>(orderedMapIterator1);
      AbstractMapIteratorDecorator<String, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Object>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.setValue(abstractOrderedMapIteratorDecorator0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // setValue() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrderedMapIterator<Object, Object> orderedMapIterator0 = EmptyOrderedMapIterator.emptyOrderedMapIterator();
      OrderedMapIterator<Object, Object> orderedMapIterator1 = UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator((OrderedMapIterator<Object, ?>) orderedMapIterator0);
      AbstractOrderedMapIteratorDecorator<Object, Object> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, Object>(orderedMapIterator1);
      OrderedMapIterator<Object, Object> orderedMapIterator2 = abstractOrderedMapIteratorDecorator0.getOrderedMapIterator();
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(orderedMapIterator2);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // remove() is not supported
         //
         verifyException("org.apache.commons.collections4.iterators.UnmodifiableOrderedMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyOrderedMapIterator<Integer, Object> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Integer, Object>();
      AbstractMapIteratorDecorator<Integer, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Integer, Object>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.putIfAbsent(integer0, integer0);
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AbstractMapIteratorDecorator<String, Integer> abstractMapIteratorDecorator0 = null;
      try {
        abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Integer>((MapIterator<String, Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // MapIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractMapIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MapIterator<Object, String> mapIterator0 = EmptyMapIterator.emptyMapIterator();
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(mapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getValue();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyOrderedMapIterator<String, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, Integer>();
      AbstractMapIteratorDecorator<String, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Integer>(emptyOrderedMapIterator0);
      boolean boolean0 = abstractMapIteratorDecorator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EntrySetMapIterator<String, String> entrySetMapIterator0 = new EntrySetMapIterator<String, String>(hashMap0);
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.getKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator getKey() can only be called after next() and before remove()
         //
         verifyException("org.apache.commons.collections4.iterators.EntrySetMapIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyOrderedMapIterator<String, Integer> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, Integer>();
      AbstractMapIteratorDecorator<String, Integer> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, Integer>(emptyOrderedMapIterator0);
      MapIterator<String, Integer> mapIterator0 = abstractMapIteratorDecorator0.getMapIterator();
      assertNotNull(mapIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      EntrySetMapIterator<Object, Object> entrySetMapIterator0 = new EntrySetMapIterator<Object, Object>(hashMap0);
      AbstractMapIteratorDecorator<Object, Object> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, Object>(entrySetMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyOrderedMapIterator<Object, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<Object, String>();
      AbstractOrderedMapIteratorDecorator<Object, String> abstractOrderedMapIteratorDecorator0 = new AbstractOrderedMapIteratorDecorator<Object, String>(emptyOrderedMapIterator0);
      AbstractMapIteratorDecorator<Object, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<Object, String>(abstractOrderedMapIteratorDecorator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyOrderedMapIterator<String, String> emptyOrderedMapIterator0 = new EmptyOrderedMapIterator<String, String>();
      AbstractMapIteratorDecorator<String, String> abstractMapIteratorDecorator0 = new AbstractMapIteratorDecorator<String, String>(emptyOrderedMapIterator0);
      // Undeclared exception!
      try { 
        abstractMapIteratorDecorator0.setValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Iterator contains no elements
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractEmptyMapIterator", e);
      }
  }
}
