/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 05:55:31 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.apache.commons.collections4.iterators.ZippingIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZippingIterator_ESTest extends ZippingIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn((String) null).when(iterator0).next();
      ZippingIterator<String> zippingIterator0 = new ZippingIterator<String>(iterator0, iterator0);
      ZippingIterator<Object> zippingIterator1 = new ZippingIterator<Object>(zippingIterator0, zippingIterator0, zippingIterator0);
      Object object0 = zippingIterator1.next();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      doReturn("Lt 89Q").when(iterator0).next();
      ZippingIterator<String> zippingIterator0 = new ZippingIterator<String>(iterator0, iterator0);
      ZippingIterator<Object> zippingIterator1 = new ZippingIterator<Object>(zippingIterator0, zippingIterator0, zippingIterator0);
      Object object0 = zippingIterator1.next();
      assertEquals("Lt 89Q", object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iterator0).hasNext();
      ZippingIterator<String> zippingIterator0 = new ZippingIterator<String>(iterator0, iterator0);
      ZippingIterator<Object> zippingIterator1 = new ZippingIterator<Object>(zippingIterator0, zippingIterator0, zippingIterator0);
      boolean boolean0 = zippingIterator1.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Integer> zippingIterator0 = new ZippingIterator<Integer>(iteratorArray0);
      boolean boolean0 = zippingIterator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ZippingIterator<String> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<String>((Iterator<? extends String>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 3);
      ZippingIterator<Object> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<Object>(iteratorArray0[0], iteratorArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Iterator<Object>[] iteratorArray0 = (Iterator<Object>[]) Array.newInstance(Iterator.class, 3);
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0);
      iteratorArray0[0] = (Iterator<Object>) zippingIterator0;
      ZippingIterator<Object> zippingIterator1 = null;
      try {
        zippingIterator1 = new ZippingIterator<Object>(iteratorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Iterator<Integer>[] iteratorArray0 = (Iterator<Integer>[]) Array.newInstance(Iterator.class, 0);
      ZippingIterator<Integer> zippingIterator0 = new ZippingIterator<Integer>(iteratorArray0);
      // Undeclared exception!
      try { 
        zippingIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iterator0).hasNext();
      ZippingIterator<String> zippingIterator0 = new ZippingIterator<String>(iterator0, iterator0);
      ZippingIterator<Object> zippingIterator1 = new ZippingIterator<Object>(zippingIterator0, zippingIterator0, zippingIterator0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      zippingIterator1.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        zippingIterator1.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No value can be removed at present
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Iterator<String> iterator0 = (Iterator<String>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(iterator0).hasNext();
      ZippingIterator<Object> zippingIterator0 = new ZippingIterator<Object>(iterator0, iterator0, iterator0);
      try { 
        zippingIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZippingIterator<String> zippingIterator0 = null;
      try {
        zippingIterator0 = new ZippingIterator<String>((Iterator<? extends String>) null, (Iterator<? extends String>) null, (Iterator<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Iterator must not be null.
         //
         verifyException("org.apache.commons.collections4.iterators.ZippingIterator", e);
      }
  }
}
