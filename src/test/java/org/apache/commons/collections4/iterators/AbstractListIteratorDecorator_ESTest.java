/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 16 06:13:25 GMT 2019
 */

package org.apache.commons.collections4.iterators;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ListIterator;
import org.apache.commons.collections4.iterators.AbstractListIteratorDecorator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractListIteratorDecorator_ESTest extends AbstractListIteratorDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(248).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      assertEquals(248, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(listIterator0).previous();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      String string0 = abstractListIteratorDecorator0.previous();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(2794).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals(2794, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-282)).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals((-282), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(listIterator0).next();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      String string0 = abstractListIteratorDecorator0.next();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasNext();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator1 = new AbstractListIteratorDecorator<String>(abstractListIteratorDecorator0);
      ListIterator<String> listIterator1 = abstractListIteratorDecorator1.getListIterator();
      assertFalse(listIterator1.hasNext());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = null;
      try {
        abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>((ListIterator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // ListIterator must not be null
         //
         verifyException("org.apache.commons.collections4.iterators.AbstractListIteratorDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      abstractListIteratorDecorator0.set("apUvUYY)Q0Np0KP");
      assertFalse(abstractListIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).previousIndex();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      int int0 = abstractListIteratorDecorator0.previousIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).previous();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      String string0 = abstractListIteratorDecorator0.previous();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ListIterator<Object> listIterator0 = (ListIterator<Object>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(listIterator0).hasPrevious();
      AbstractListIteratorDecorator<Object> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<Object>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasPrevious();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      abstractListIteratorDecorator0.add("");
      assertFalse(abstractListIteratorDecorator0.hasNext());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(listIterator0).nextIndex();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      int int0 = abstractListIteratorDecorator0.nextIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      abstractListIteratorDecorator0.remove();
      assertFalse(abstractListIteratorDecorator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(listIterator0).hasNext();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      boolean boolean0 = abstractListIteratorDecorator0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(listIterator0).next();
      AbstractListIteratorDecorator<String> abstractListIteratorDecorator0 = new AbstractListIteratorDecorator<String>(listIterator0);
      String string0 = abstractListIteratorDecorator0.next();
      assertNull(string0);
  }
}
